/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface ETHDKGPhasesInterface extends utils.Interface {
  contractName: "ETHDKGPhases";
  functions: {
    "complete()": FunctionFragment;
    "distributeShares(uint256[],uint256[2][])": FunctionFragment;
    "getMetamorphicContractAddress(bytes32,address)": FunctionFragment;
    "getMyAddress()": FunctionFragment;
    "register(uint256[2])": FunctionFragment;
    "submitGPKJ(uint256[4])": FunctionFragment;
    "submitKeyShare(uint256[2],uint256[2],uint256[4])": FunctionFragment;
    "submitMasterPublicKey(uint256[4])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "complete", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeShares",
    values: [BigNumberish[], [BigNumberish, BigNumberish][]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetamorphicContractAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGPKJ",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitKeyShare",
    values: [
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMasterPublicKey",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetamorphicContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitGPKJ", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitKeyShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMasterPublicKey",
    data: BytesLike
  ): Result;

  events: {
    "AddressRegistered(address,uint256,uint256,uint256[2])": EventFragment;
    "GPKJSubmissionComplete(uint256)": EventFragment;
    "KeyShareSubmissionComplete(uint256)": EventFragment;
    "KeyShareSubmitted(address,uint256,uint256,uint256[2],uint256[2],uint256[4])": EventFragment;
    "MPKSet(uint256,uint256,uint256[4])": EventFragment;
    "RegistrationComplete(uint256)": EventFragment;
    "RegistrationOpened(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ShareDistributionComplete(uint256)": EventFragment;
    "SharesDistributed(address,uint256,uint256,uint256[],uint256[2][])": EventFragment;
    "ValidatorMemberAdded(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ValidatorSetCompleted(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GPKJSubmissionComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyShareSubmissionComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyShareSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MPKSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShareDistributionComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorMemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSetCompleted"): EventFragment;
}

export type AddressRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, [BigNumber, BigNumber]],
  {
    account: string;
    index: BigNumber;
    nonce: BigNumber;
    publicKey: [BigNumber, BigNumber];
  }
>;

export type AddressRegisteredEventFilter =
  TypedEventFilter<AddressRegisteredEvent>;

export type GPKJSubmissionCompleteEvent = TypedEvent<
  [BigNumber],
  { blockNumber: BigNumber }
>;

export type GPKJSubmissionCompleteEventFilter =
  TypedEventFilter<GPKJSubmissionCompleteEvent>;

export type KeyShareSubmissionCompleteEvent = TypedEvent<
  [BigNumber],
  { blockNumber: BigNumber }
>;

export type KeyShareSubmissionCompleteEventFilter =
  TypedEventFilter<KeyShareSubmissionCompleteEvent>;

export type KeyShareSubmittedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber, BigNumber, BigNumber]
  ],
  {
    account: string;
    index: BigNumber;
    nonce: BigNumber;
    keyShareG1: [BigNumber, BigNumber];
    keyShareG1CorrectnessProof: [BigNumber, BigNumber];
    keyShareG2: [BigNumber, BigNumber, BigNumber, BigNumber];
  }
>;

export type KeyShareSubmittedEventFilter =
  TypedEventFilter<KeyShareSubmittedEvent>;

export type MPKSetEvent = TypedEvent<
  [BigNumber, BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber]],
  {
    blockNumber: BigNumber;
    nonce: BigNumber;
    mpk: [BigNumber, BigNumber, BigNumber, BigNumber];
  }
>;

export type MPKSetEventFilter = TypedEventFilter<MPKSetEvent>;

export type RegistrationCompleteEvent = TypedEvent<
  [BigNumber],
  { blockNumber: BigNumber }
>;

export type RegistrationCompleteEventFilter =
  TypedEventFilter<RegistrationCompleteEvent>;

export type RegistrationOpenedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    startBlock: BigNumber;
    numberValidators: BigNumber;
    nonce: BigNumber;
    phaseLength: BigNumber;
    confirmationLength: BigNumber;
  }
>;

export type RegistrationOpenedEventFilter =
  TypedEventFilter<RegistrationOpenedEvent>;

export type ShareDistributionCompleteEvent = TypedEvent<
  [BigNumber],
  { blockNumber: BigNumber }
>;

export type ShareDistributionCompleteEventFilter =
  TypedEventFilter<ShareDistributionCompleteEvent>;

export type SharesDistributedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], [BigNumber, BigNumber][]],
  {
    account: string;
    index: BigNumber;
    nonce: BigNumber;
    encryptedShares: BigNumber[];
    commitments: [BigNumber, BigNumber][];
  }
>;

export type SharesDistributedEventFilter =
  TypedEventFilter<SharesDistributedEvent>;

export type ValidatorMemberAddedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    account: string;
    index: BigNumber;
    nonce: BigNumber;
    epoch: BigNumber;
    share0: BigNumber;
    share1: BigNumber;
    share2: BigNumber;
    share3: BigNumber;
  }
>;

export type ValidatorMemberAddedEventFilter =
  TypedEventFilter<ValidatorMemberAddedEvent>;

export type ValidatorSetCompletedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    validatorCount: BigNumber;
    nonce: BigNumber;
    epoch: BigNumber;
    ethHeight: BigNumber;
    aliceNetHeight: BigNumber;
    groupKey0: BigNumber;
    groupKey1: BigNumber;
    groupKey2: BigNumber;
    groupKey3: BigNumber;
  }
>;

export type ValidatorSetCompletedEventFilter =
  TypedEventFilter<ValidatorSetCompletedEvent>;

export interface ETHDKGPhases extends BaseContract {
  contractName: "ETHDKGPhases";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETHDKGPhasesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    complete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeShares(
      encryptedShares: BigNumberish[],
      commitments: [BigNumberish, BigNumberish][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMetamorphicContractAddress(
      _salt: BytesLike,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMyAddress(overrides?: CallOverrides): Promise<[string]>;

    register(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitGPKJ(
      gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitKeyShare(
      keyShareG1: [BigNumberish, BigNumberish],
      keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
      keyShareG2: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMasterPublicKey(
      masterPublicKey_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  complete(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeShares(
    encryptedShares: BigNumberish[],
    commitments: [BigNumberish, BigNumberish][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMetamorphicContractAddress(
    _salt: BytesLike,
    _factory: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMyAddress(overrides?: CallOverrides): Promise<string>;

  register(
    publicKey: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitGPKJ(
    gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitKeyShare(
    keyShareG1: [BigNumberish, BigNumberish],
    keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
    keyShareG2: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMasterPublicKey(
    masterPublicKey_: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    complete(overrides?: CallOverrides): Promise<void>;

    distributeShares(
      encryptedShares: BigNumberish[],
      commitments: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    getMetamorphicContractAddress(
      _salt: BytesLike,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMyAddress(overrides?: CallOverrides): Promise<string>;

    register(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    submitGPKJ(
      gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    submitKeyShare(
      keyShareG1: [BigNumberish, BigNumberish],
      keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
      keyShareG2: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    submitMasterPublicKey(
      masterPublicKey_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressRegistered(address,uint256,uint256,uint256[2])"(
      account?: null,
      index?: null,
      nonce?: null,
      publicKey?: null
    ): AddressRegisteredEventFilter;
    AddressRegistered(
      account?: null,
      index?: null,
      nonce?: null,
      publicKey?: null
    ): AddressRegisteredEventFilter;

    "GPKJSubmissionComplete(uint256)"(
      blockNumber?: null
    ): GPKJSubmissionCompleteEventFilter;
    GPKJSubmissionComplete(
      blockNumber?: null
    ): GPKJSubmissionCompleteEventFilter;

    "KeyShareSubmissionComplete(uint256)"(
      blockNumber?: null
    ): KeyShareSubmissionCompleteEventFilter;
    KeyShareSubmissionComplete(
      blockNumber?: null
    ): KeyShareSubmissionCompleteEventFilter;

    "KeyShareSubmitted(address,uint256,uint256,uint256[2],uint256[2],uint256[4])"(
      account?: null,
      index?: null,
      nonce?: null,
      keyShareG1?: null,
      keyShareG1CorrectnessProof?: null,
      keyShareG2?: null
    ): KeyShareSubmittedEventFilter;
    KeyShareSubmitted(
      account?: null,
      index?: null,
      nonce?: null,
      keyShareG1?: null,
      keyShareG1CorrectnessProof?: null,
      keyShareG2?: null
    ): KeyShareSubmittedEventFilter;

    "MPKSet(uint256,uint256,uint256[4])"(
      blockNumber?: null,
      nonce?: null,
      mpk?: null
    ): MPKSetEventFilter;
    MPKSet(blockNumber?: null, nonce?: null, mpk?: null): MPKSetEventFilter;

    "RegistrationComplete(uint256)"(
      blockNumber?: null
    ): RegistrationCompleteEventFilter;
    RegistrationComplete(blockNumber?: null): RegistrationCompleteEventFilter;

    "RegistrationOpened(uint256,uint256,uint256,uint256,uint256)"(
      startBlock?: null,
      numberValidators?: null,
      nonce?: null,
      phaseLength?: null,
      confirmationLength?: null
    ): RegistrationOpenedEventFilter;
    RegistrationOpened(
      startBlock?: null,
      numberValidators?: null,
      nonce?: null,
      phaseLength?: null,
      confirmationLength?: null
    ): RegistrationOpenedEventFilter;

    "ShareDistributionComplete(uint256)"(
      blockNumber?: null
    ): ShareDistributionCompleteEventFilter;
    ShareDistributionComplete(
      blockNumber?: null
    ): ShareDistributionCompleteEventFilter;

    "SharesDistributed(address,uint256,uint256,uint256[],uint256[2][])"(
      account?: null,
      index?: null,
      nonce?: null,
      encryptedShares?: null,
      commitments?: null
    ): SharesDistributedEventFilter;
    SharesDistributed(
      account?: null,
      index?: null,
      nonce?: null,
      encryptedShares?: null,
      commitments?: null
    ): SharesDistributedEventFilter;

    "ValidatorMemberAdded(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      account?: null,
      index?: null,
      nonce?: null,
      epoch?: null,
      share0?: null,
      share1?: null,
      share2?: null,
      share3?: null
    ): ValidatorMemberAddedEventFilter;
    ValidatorMemberAdded(
      account?: null,
      index?: null,
      nonce?: null,
      epoch?: null,
      share0?: null,
      share1?: null,
      share2?: null,
      share3?: null
    ): ValidatorMemberAddedEventFilter;

    "ValidatorSetCompleted(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      validatorCount?: null,
      nonce?: null,
      epoch?: null,
      ethHeight?: null,
      aliceNetHeight?: null,
      groupKey0?: null,
      groupKey1?: null,
      groupKey2?: null,
      groupKey3?: null
    ): ValidatorSetCompletedEventFilter;
    ValidatorSetCompleted(
      validatorCount?: null,
      nonce?: null,
      epoch?: null,
      ethHeight?: null,
      aliceNetHeight?: null,
      groupKey0?: null,
      groupKey1?: null,
      groupKey2?: null,
      groupKey3?: null
    ): ValidatorSetCompletedEventFilter;
  };

  estimateGas: {
    complete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeShares(
      encryptedShares: BigNumberish[],
      commitments: [BigNumberish, BigNumberish][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMetamorphicContractAddress(
      _salt: BytesLike,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitGPKJ(
      gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitKeyShare(
      keyShareG1: [BigNumberish, BigNumberish],
      keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
      keyShareG2: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMasterPublicKey(
      masterPublicKey_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    complete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeShares(
      encryptedShares: BigNumberish[],
      commitments: [BigNumberish, BigNumberish][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMetamorphicContractAddress(
      _salt: BytesLike,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      publicKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitGPKJ(
      gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitKeyShare(
      keyShareG1: [BigNumberish, BigNumberish],
      keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
      keyShareG2: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMasterPublicKey(
      masterPublicKey_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
