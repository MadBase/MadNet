/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface BTokenErrorCodesInterface extends utils.Interface {
  contractName: "BTokenErrorCodes";
  functions: {
    "BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY()": FunctionFragment;
    "BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS()": FunctionFragment;
    "BTOKEN_DEPOSIT_AMOUNT_ZERO()": FunctionFragment;
    "BTOKEN_DEPOSIT_BURN_FAIL()": FunctionFragment;
    "BTOKEN_INVALID_BALANCE()": FunctionFragment;
    "BTOKEN_INVALID_BURN_AMOUNT()": FunctionFragment;
    "BTOKEN_INVALID_DEPOSIT_ID()": FunctionFragment;
    "BTOKEN_MARKET_SPREAD_TOO_LOW()": FunctionFragment;
    "BTOKEN_MINIMUM_BURN_NOT_MET()": FunctionFragment;
    "BTOKEN_MINIMUM_MINT_NOT_MET()": FunctionFragment;
    "BTOKEN_MINT_INSUFFICIENT_ETH()": FunctionFragment;
    "BTOKEN_SPLIT_VALUE_SUM_ERROR()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_DEPOSIT_AMOUNT_ZERO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_DEPOSIT_BURN_FAIL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_INVALID_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_INVALID_BURN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_INVALID_DEPOSIT_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_MARKET_SPREAD_TOO_LOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_MINIMUM_BURN_NOT_MET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_MINIMUM_MINT_NOT_MET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_MINT_INSUFFICIENT_ETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BTOKEN_SPLIT_VALUE_SUM_ERROR",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_DEPOSIT_AMOUNT_ZERO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_DEPOSIT_BURN_FAIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_INVALID_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_INVALID_BURN_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_INVALID_DEPOSIT_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_MARKET_SPREAD_TOO_LOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_MINIMUM_BURN_NOT_MET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_MINIMUM_MINT_NOT_MET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_MINT_INSUFFICIENT_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BTOKEN_SPLIT_VALUE_SUM_ERROR",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BTokenErrorCodes extends BaseContract {
  contractName: "BTokenErrorCodes";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BTokenErrorCodesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    BTOKEN_DEPOSIT_AMOUNT_ZERO(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_DEPOSIT_BURN_FAIL(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_INVALID_BALANCE(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_INVALID_BURN_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_INVALID_DEPOSIT_ID(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_MARKET_SPREAD_TOO_LOW(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_MINIMUM_BURN_NOT_MET(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_MINIMUM_MINT_NOT_MET(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_MINT_INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<[string]>;

    BTOKEN_SPLIT_VALUE_SUM_ERROR(overrides?: CallOverrides): Promise<[string]>;
  };

  BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY(overrides?: CallOverrides): Promise<string>;

  BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS(
    overrides?: CallOverrides
  ): Promise<string>;

  BTOKEN_DEPOSIT_AMOUNT_ZERO(overrides?: CallOverrides): Promise<string>;

  BTOKEN_DEPOSIT_BURN_FAIL(overrides?: CallOverrides): Promise<string>;

  BTOKEN_INVALID_BALANCE(overrides?: CallOverrides): Promise<string>;

  BTOKEN_INVALID_BURN_AMOUNT(overrides?: CallOverrides): Promise<string>;

  BTOKEN_INVALID_DEPOSIT_ID(overrides?: CallOverrides): Promise<string>;

  BTOKEN_MARKET_SPREAD_TOO_LOW(overrides?: CallOverrides): Promise<string>;

  BTOKEN_MINIMUM_BURN_NOT_MET(overrides?: CallOverrides): Promise<string>;

  BTOKEN_MINIMUM_MINT_NOT_MET(overrides?: CallOverrides): Promise<string>;

  BTOKEN_MINT_INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<string>;

  BTOKEN_SPLIT_VALUE_SUM_ERROR(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY(
      overrides?: CallOverrides
    ): Promise<string>;

    BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS(
      overrides?: CallOverrides
    ): Promise<string>;

    BTOKEN_DEPOSIT_AMOUNT_ZERO(overrides?: CallOverrides): Promise<string>;

    BTOKEN_DEPOSIT_BURN_FAIL(overrides?: CallOverrides): Promise<string>;

    BTOKEN_INVALID_BALANCE(overrides?: CallOverrides): Promise<string>;

    BTOKEN_INVALID_BURN_AMOUNT(overrides?: CallOverrides): Promise<string>;

    BTOKEN_INVALID_DEPOSIT_ID(overrides?: CallOverrides): Promise<string>;

    BTOKEN_MARKET_SPREAD_TOO_LOW(overrides?: CallOverrides): Promise<string>;

    BTOKEN_MINIMUM_BURN_NOT_MET(overrides?: CallOverrides): Promise<string>;

    BTOKEN_MINIMUM_MINT_NOT_MET(overrides?: CallOverrides): Promise<string>;

    BTOKEN_MINT_INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<string>;

    BTOKEN_SPLIT_VALUE_SUM_ERROR(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BTOKEN_DEPOSIT_AMOUNT_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_DEPOSIT_BURN_FAIL(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_INVALID_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_INVALID_BURN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_INVALID_DEPOSIT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_MARKET_SPREAD_TOO_LOW(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_MINIMUM_BURN_NOT_MET(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_MINIMUM_MINT_NOT_MET(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_MINT_INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<BigNumber>;

    BTOKEN_SPLIT_VALUE_SUM_ERROR(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_DEPOSIT_AMOUNT_ZERO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_DEPOSIT_BURN_FAIL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_INVALID_BALANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_INVALID_BURN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_INVALID_DEPOSIT_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_MARKET_SPREAD_TOO_LOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_MINIMUM_BURN_NOT_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_MINIMUM_MINT_NOT_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_MINT_INSUFFICIENT_ETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BTOKEN_SPLIT_VALUE_SUM_ERROR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
