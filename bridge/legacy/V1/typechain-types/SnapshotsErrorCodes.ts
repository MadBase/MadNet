/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface SnapshotsErrorCodesInterface extends utils.Interface {
  contractName: "SnapshotsErrorCodes";
  functions: {
    "SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT()": FunctionFragment;
    "SNAPSHOT_CONSENSUS_RUNNING()": FunctionFragment;
    "SNAPSHOT_INCORRECT_BLOCK_HEIGHT()": FunctionFragment;
    "SNAPSHOT_INCORRECT_CHAIN_ID()": FunctionFragment;
    "SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH()": FunctionFragment;
    "SNAPSHOT_MIGRATION_NOT_ALLOWED()": FunctionFragment;
    "SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED()": FunctionFragment;
    "SNAPSHOT_ONLY_VALIDATORS_ALLOWED()": FunctionFragment;
    "SNAPSHOT_SIGNATURE_VERIFICATION_FAILED()": FunctionFragment;
    "SNAPSHOT_WRONG_MASTER_PUBLIC_KEY()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_CONSENSUS_RUNNING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_INCORRECT_BLOCK_HEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_INCORRECT_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_MIGRATION_NOT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_ONLY_VALIDATORS_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_SIGNATURE_VERIFICATION_FAILED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_WRONG_MASTER_PUBLIC_KEY",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_CONSENSUS_RUNNING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_INCORRECT_BLOCK_HEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_INCORRECT_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_MIGRATION_NOT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_ONLY_VALIDATORS_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_SIGNATURE_VERIFICATION_FAILED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_WRONG_MASTER_PUBLIC_KEY",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SnapshotsErrorCodes extends BaseContract {
  contractName: "SnapshotsErrorCodes";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SnapshotsErrorCodesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_CONSENSUS_RUNNING(overrides?: CallOverrides): Promise<[string]>;

    SNAPSHOT_INCORRECT_BLOCK_HEIGHT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_INCORRECT_CHAIN_ID(overrides?: CallOverrides): Promise<[string]>;

    SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_MIGRATION_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_ONLY_VALIDATORS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_SIGNATURE_VERIFICATION_FAILED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SNAPSHOT_WRONG_MASTER_PUBLIC_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT(
    overrides?: CallOverrides
  ): Promise<string>;

  SNAPSHOT_CONSENSUS_RUNNING(overrides?: CallOverrides): Promise<string>;

  SNAPSHOT_INCORRECT_BLOCK_HEIGHT(overrides?: CallOverrides): Promise<string>;

  SNAPSHOT_INCORRECT_CHAIN_ID(overrides?: CallOverrides): Promise<string>;

  SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH(
    overrides?: CallOverrides
  ): Promise<string>;

  SNAPSHOT_MIGRATION_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED(
    overrides?: CallOverrides
  ): Promise<string>;

  SNAPSHOT_ONLY_VALIDATORS_ALLOWED(overrides?: CallOverrides): Promise<string>;

  SNAPSHOT_SIGNATURE_VERIFICATION_FAILED(
    overrides?: CallOverrides
  ): Promise<string>;

  SNAPSHOT_WRONG_MASTER_PUBLIC_KEY(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT(
      overrides?: CallOverrides
    ): Promise<string>;

    SNAPSHOT_CONSENSUS_RUNNING(overrides?: CallOverrides): Promise<string>;

    SNAPSHOT_INCORRECT_BLOCK_HEIGHT(overrides?: CallOverrides): Promise<string>;

    SNAPSHOT_INCORRECT_CHAIN_ID(overrides?: CallOverrides): Promise<string>;

    SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH(
      overrides?: CallOverrides
    ): Promise<string>;

    SNAPSHOT_MIGRATION_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

    SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED(
      overrides?: CallOverrides
    ): Promise<string>;

    SNAPSHOT_ONLY_VALIDATORS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<string>;

    SNAPSHOT_SIGNATURE_VERIFICATION_FAILED(
      overrides?: CallOverrides
    ): Promise<string>;

    SNAPSHOT_WRONG_MASTER_PUBLIC_KEY(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_CONSENSUS_RUNNING(overrides?: CallOverrides): Promise<BigNumber>;

    SNAPSHOT_INCORRECT_BLOCK_HEIGHT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_INCORRECT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_MIGRATION_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_ONLY_VALIDATORS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_SIGNATURE_VERIFICATION_FAILED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SNAPSHOT_WRONG_MASTER_PUBLIC_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SNAPSHOT_CALLER_NOT_ETHDKG_PARTICIPANT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_CONSENSUS_RUNNING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_INCORRECT_BLOCK_HEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_INCORRECT_CHAIN_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_MIGRATION_INPUT_DATA_MISMATCH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_MIGRATION_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_MIN_BLOCKS_INTERVAL_NOT_PASSED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_ONLY_VALIDATORS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_SIGNATURE_VERIFICATION_FAILED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SNAPSHOT_WRONG_MASTER_PUBLIC_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
