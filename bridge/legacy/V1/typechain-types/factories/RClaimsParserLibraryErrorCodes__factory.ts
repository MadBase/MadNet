/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
  RClaimsParserLibraryErrorCodes,
  RClaimsParserLibraryErrorCodesInterface,
} from "../RClaimsParserLibraryErrorCodes";

const _abi = [
  {
    inputs: [],
    name: "RCLAIMSPARSERLIB_CHAINID_ZERO",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RCLAIMSPARSERLIB_DATA_OFFSET_OVERFLOW",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RCLAIMSPARSERLIB_HEIGHT_ZERO",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RCLAIMSPARSERLIB_INSUFFICIENT_BYTES",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RCLAIMSPARSERLIB_ROUND_ZERO",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61018161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c806355af79391161005a57806355af7939146100d6578063b54900be146100fd578063d83f6d6b1461012457600080fd5b806342d201a41461007657806342ff1293146100af575b600080fd5b61009d7f313530330000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b61009d7f313530320000000000000000000000000000000000000000000000000000000081565b61009d7f313530310000000000000000000000000000000000000000000000000000000081565b61009d7f313530340000000000000000000000000000000000000000000000000000000081565b61009d7f31353030000000000000000000000000000000000000000000000000000000008156fea2646970667358221220439eca811ba070b7004e0c601e3ebdd83493506d26d64adb1f42c9303bd6c4bc64736f6c634300080d0033";

type RClaimsParserLibraryErrorCodesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RClaimsParserLibraryErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RClaimsParserLibraryErrorCodes__factory extends ContractFactory {
  constructor(...args: RClaimsParserLibraryErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RClaimsParserLibraryErrorCodes";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RClaimsParserLibraryErrorCodes> {
    return super.deploy(
      overrides || {}
    ) as Promise<RClaimsParserLibraryErrorCodes>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RClaimsParserLibraryErrorCodes {
    return super.attach(address) as RClaimsParserLibraryErrorCodes;
  }
  connect(signer: Signer): RClaimsParserLibraryErrorCodes__factory {
    return super.connect(signer) as RClaimsParserLibraryErrorCodes__factory;
  }
  static readonly contractName: "RClaimsParserLibraryErrorCodes";
  public readonly contractName: "RClaimsParserLibraryErrorCodes";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RClaimsParserLibraryErrorCodesInterface {
    return new utils.Interface(_abi) as RClaimsParserLibraryErrorCodesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RClaimsParserLibraryErrorCodes {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RClaimsParserLibraryErrorCodes;
  }
}
