/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
  ImmutableAuthErrorCodes,
  ImmutableAuthErrorCodesInterface,
} from "../ImmutableAuthErrorCodes";

const _abi = [
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_ATOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_ATOKENBURNER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_ATOKENMINTER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_BTOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_ETHDKG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_ETHDKGACCUSATIONS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_ETHDKGPHASES",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_FACTORY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_FOUNDATION",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_GOVERNANCE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_LIQUIDITYPROVIDERSTAKING",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_MADTOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_PUBLICSTAKING",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_SNAPSHOTS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_STAKINGPOSITIONDESCRIPTOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_VALIDATORPOOL",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IMMUTEABLEAUTH_ONLY_VALIDATORSTAKING",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61040961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101255760003560e01c806371dc5170116100bc578063af80e8a21161008b578063d1c78e6c11610070578063d1c78e6c1461035e578063e7a1bcc214610385578063ee7a4549146103ac57600080fd5b8063af80e8a214610310578063bcbc4d5c1461033757600080fd5b806371dc517014610274578063875c63e11461029b57806392646b6a146102c2578063a50151d9146102e957600080fd5b80634b424b18116100f85780634b424b18146101d8578063511e8769146101ff5780635a37b86714610226578063622880e91461024d57600080fd5b806306a1a75b1461012a57806317081dbe146101635780632e0f47701461018a57806347cec1fc146101b1575b600080fd5b6101517f323030310000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b6101517f323031350000000000000000000000000000000000000000000000000000000081565b6101517f323030360000000000000000000000000000000000000000000000000000000081565b6101517f323030300000000000000000000000000000000000000000000000000000000081565b6101517f323030380000000000000000000000000000000000000000000000000000000081565b6101517f323031330000000000000000000000000000000000000000000000000000000081565b6101517f323031340000000000000000000000000000000000000000000000000000000081565b6101517f323030350000000000000000000000000000000000000000000000000000000081565b6101517f323031310000000000000000000000000000000000000000000000000000000081565b6101517f323031320000000000000000000000000000000000000000000000000000000081565b6101517f323030340000000000000000000000000000000000000000000000000000000081565b6101517f323031360000000000000000000000000000000000000000000000000000000081565b6101517f323030370000000000000000000000000000000000000000000000000000000081565b6101517f323030320000000000000000000000000000000000000000000000000000000081565b6101517f323030390000000000000000000000000000000000000000000000000000000081565b6101517f323031300000000000000000000000000000000000000000000000000000000081565b6101517f32303033000000000000000000000000000000000000000000000000000000008156fea2646970667358221220341735049732343735e09f53e8de156ac3f63ca2ec662bbe05e4b803f0b3d95a64736f6c634300080d0033";

type ImmutableAuthErrorCodesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableAuthErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableAuthErrorCodes__factory extends ContractFactory {
  constructor(...args: ImmutableAuthErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ImmutableAuthErrorCodes";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ImmutableAuthErrorCodes> {
    return super.deploy(overrides || {}) as Promise<ImmutableAuthErrorCodes>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ImmutableAuthErrorCodes {
    return super.attach(address) as ImmutableAuthErrorCodes;
  }
  connect(signer: Signer): ImmutableAuthErrorCodes__factory {
    return super.connect(signer) as ImmutableAuthErrorCodes__factory;
  }
  static readonly contractName: "ImmutableAuthErrorCodes";
  public readonly contractName: "ImmutableAuthErrorCodes";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableAuthErrorCodesInterface {
    return new utils.Interface(_abi) as ImmutableAuthErrorCodesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImmutableAuthErrorCodes {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ImmutableAuthErrorCodes;
  }
}
