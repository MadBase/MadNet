/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
  BTokenErrorCodes,
  BTokenErrorCodesInterface,
} from "../BTokenErrorCodes";

const _abi = [
  {
    inputs: [],
    name: "BTOKEN_BURN_AMOUNT_EXCEEDS_SUPPLY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_CONTRACTS_DISALLOWED_DEPOSITS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_DEPOSIT_AMOUNT_ZERO",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_DEPOSIT_BURN_FAIL",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_INVALID_BALANCE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_INVALID_BURN_AMOUNT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_INVALID_DEPOSIT_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_MARKET_SPREAD_TOO_LOW",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_MINIMUM_BURN_NOT_MET",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_MINIMUM_MINT_NOT_MET",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_MINT_INSUFFICIENT_ETH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BTOKEN_SPLIT_VALUE_SUM_ERROR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6102ff61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100de5760003560e01c8063a3d600f11161008b578063f87e114e11610065578063f87e114e14610254578063fc45f4cf1461027b578063fe4a969a146102a257600080fd5b8063a3d600f1146101df578063b949d48514610206578063c7f53c4f1461022d57600080fd5b80632810d142116100bc5780632810d1421461016a5780633dd428161461019157806342e745e4146101b857600080fd5b80630e19d024146100e357806317be61321461011c5780631e13bfbb14610143575b600080fd5b61010a7f333033000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b61010a7f333036000000000000000000000000000000000000000000000000000000000081565b61010a7f333131000000000000000000000000000000000000000000000000000000000081565b61010a7f333037000000000000000000000000000000000000000000000000000000000081565b61010a7f333030000000000000000000000000000000000000000000000000000000000081565b61010a7f333039000000000000000000000000000000000000000000000000000000000081565b61010a7f333031000000000000000000000000000000000000000000000000000000000081565b61010a7f333034000000000000000000000000000000000000000000000000000000000081565b61010a7f333130000000000000000000000000000000000000000000000000000000000081565b61010a7f333032000000000000000000000000000000000000000000000000000000000081565b61010a7f333038000000000000000000000000000000000000000000000000000000000081565b61010a7f33303500000000000000000000000000000000000000000000000000000000008156fea26469706673582212206debad338d973f355bdf445fd8fe8784810916c7542e97bd5210dfc1093b1df264736f6c634300080d0033";

type BTokenErrorCodesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BTokenErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BTokenErrorCodes__factory extends ContractFactory {
  constructor(...args: BTokenErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BTokenErrorCodes";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BTokenErrorCodes> {
    return super.deploy(overrides || {}) as Promise<BTokenErrorCodes>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BTokenErrorCodes {
    return super.attach(address) as BTokenErrorCodes;
  }
  connect(signer: Signer): BTokenErrorCodes__factory {
    return super.connect(signer) as BTokenErrorCodes__factory;
  }
  static readonly contractName: "BTokenErrorCodes";
  public readonly contractName: "BTokenErrorCodes";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BTokenErrorCodesInterface {
    return new utils.Interface(_abi) as BTokenErrorCodesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BTokenErrorCodes {
    return new Contract(address, _abi, signerOrProvider) as BTokenErrorCodes;
  }
}
