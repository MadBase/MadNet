/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
  BClaimsParserLibraryErrorCodes,
  BClaimsParserLibraryErrorCodesInterface,
} from "../BClaimsParserLibraryErrorCodes";

const _abi = [
  {
    inputs: [],
    name: "BCLAIMSPARSERLIB_CHAINID_ZERO",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BCLAIMSPARSERLIB_DATA_OFFSET_OVERFLOW",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BCLAIMSPARSERLIB_HEIGHT_ZERO",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BCLAIMSPARSERLIB_NOT_ENOUGH_BYTES",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BCLAIMSPARSERLIB_SIZE_THRESHOLD_EXCEEDED",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61018161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c8063bee291f71161005a578063bee291f7146100d6578063c424db8a146100fd578063cc2603f01461012457600080fd5b806301c792fe14610076578063b0df47f6146100af575b600080fd5b61009d7f313130310000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b61009d7f313130300000000000000000000000000000000000000000000000000000000081565b61009d7f313130330000000000000000000000000000000000000000000000000000000081565b61009d7f313130320000000000000000000000000000000000000000000000000000000081565b61009d7f31313034000000000000000000000000000000000000000000000000000000008156fea264697066735822122061d5cc20e31bd92071bc4670a0bd515b9d291b26d130dfb5581ef9f8b4ae707564736f6c634300080d0033";

type BClaimsParserLibraryErrorCodesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BClaimsParserLibraryErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BClaimsParserLibraryErrorCodes__factory extends ContractFactory {
  constructor(...args: BClaimsParserLibraryErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BClaimsParserLibraryErrorCodes";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BClaimsParserLibraryErrorCodes> {
    return super.deploy(
      overrides || {}
    ) as Promise<BClaimsParserLibraryErrorCodes>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BClaimsParserLibraryErrorCodes {
    return super.attach(address) as BClaimsParserLibraryErrorCodes;
  }
  connect(signer: Signer): BClaimsParserLibraryErrorCodes__factory {
    return super.connect(signer) as BClaimsParserLibraryErrorCodes__factory;
  }
  static readonly contractName: "BClaimsParserLibraryErrorCodes";
  public readonly contractName: "BClaimsParserLibraryErrorCodes";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BClaimsParserLibraryErrorCodesInterface {
    return new utils.Interface(_abi) as BClaimsParserLibraryErrorCodesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BClaimsParserLibraryErrorCodes {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BClaimsParserLibraryErrorCodes;
  }
}
