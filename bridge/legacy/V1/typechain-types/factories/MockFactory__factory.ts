/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { MockFactory, MockFactoryInterface } from "../MockFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    name: "getMetamorphicContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "new_",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061023e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806313af40351461003b5780638653a46514610092575b600080fd5b6100906100493660046101ba565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6101686100a03660046101dc565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be60558201819052600091607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146101b557600080fd5b919050565b6000602082840312156101cc57600080fd5b6101d582610191565b9392505050565b600080604083850312156101ef57600080fd5b823591506101ff60208401610191565b9050925092905056fea26469706673582212200f8911db9bf34364fb0f21be3b9aa5b563ae13b1801d5d86326ed72d15b4aa2a64736f6c634300080d0033";

type MockFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFactory__factory extends ContractFactory {
  constructor(...args: MockFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockFactory";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFactory> {
    return super.deploy(overrides || {}) as Promise<MockFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockFactory {
    return super.attach(address) as MockFactory;
  }
  connect(signer: Signer): MockFactory__factory {
    return super.connect(signer) as MockFactory__factory;
  }
  static readonly contractName: "MockFactory";
  public readonly contractName: "MockFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFactoryInterface {
    return new utils.Interface(_abi) as MockFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFactory {
    return new Contract(address, _abi, signerOrProvider) as MockFactory;
  }
}
