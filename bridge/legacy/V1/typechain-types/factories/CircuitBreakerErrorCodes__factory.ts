/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
  CircuitBreakerErrorCodes,
  CircuitBreakerErrorCodesInterface,
} from "../CircuitBreakerErrorCodes";

const _abi = [
  {
    inputs: [],
    name: "CIRCUIT_BREAKER_CLOSED",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CIRCUIT_BREAKER_OPENED",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60d6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063b181a75c146042578063c8228a7514607a575b600080fd5b60687f353030000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b60687f35303100000000000000000000000000000000000000000000000000000000008156fea26469706673582212209520dad04944f56dee1aab4b10a3d632e26a106572df947c666ad98d203ea3eb64736f6c634300080d0033";

type CircuitBreakerErrorCodesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircuitBreakerErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CircuitBreakerErrorCodes__factory extends ContractFactory {
  constructor(...args: CircuitBreakerErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CircuitBreakerErrorCodes";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CircuitBreakerErrorCodes> {
    return super.deploy(overrides || {}) as Promise<CircuitBreakerErrorCodes>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CircuitBreakerErrorCodes {
    return super.attach(address) as CircuitBreakerErrorCodes;
  }
  connect(signer: Signer): CircuitBreakerErrorCodes__factory {
    return super.connect(signer) as CircuitBreakerErrorCodes__factory;
  }
  static readonly contractName: "CircuitBreakerErrorCodes";
  public readonly contractName: "CircuitBreakerErrorCodes";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircuitBreakerErrorCodesInterface {
    return new utils.Interface(_abi) as CircuitBreakerErrorCodesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CircuitBreakerErrorCodes {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CircuitBreakerErrorCodes;
  }
}
