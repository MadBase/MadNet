/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";
import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Accusations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Accusations__factory>;
    getContractFactory(
      name: "AliceNetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AliceNetFactory__factory>;
    getContractFactory(
      name: "AToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AToken__factory>;
    getContractFactory(
      name: "ATokenBurner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenBurner__factory>;
    getContractFactory(
      name: "ATokenMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenMinter__factory>;
    getContractFactory(
      name: "BToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BToken__factory>;
    getContractFactory(
      name: "ETHDKG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHDKG__factory>;
    getContractFactory(
      name: "Foundation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Foundation__factory>;
    getContractFactory(
      name: "Governance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governance__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IATokenBurner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IATokenBurner__factory>;
    getContractFactory(
      name: "IATokenMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IATokenMinter__factory>;
    getContractFactory(
      name: "IBToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBToken__factory>;
    getContractFactory(
      name: "ICBCloser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICBCloser__factory>;
    getContractFactory(
      name: "ICBOpener",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICBOpener__factory>;
    getContractFactory(
      name: "IERC20Transferable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Transferable__factory>;
    getContractFactory(
      name: "IERC721Transferable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Transferable__factory>;
    getContractFactory(
      name: "IETHDKG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IETHDKG__factory>;
    getContractFactory(
      name: "IETHDKGEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IETHDKGEvents__factory>;
    getContractFactory(
      name: "IGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: "IMagicEthTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMagicEthTransfer__factory>;
    getContractFactory(
      name: "IMagicTokenTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMagicTokenTransfer__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "ISnapshots",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISnapshots__factory>;
    getContractFactory(
      name: "IStakingNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingNFT__factory>;
    getContractFactory(
      name: "IStakingNFTDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingNFTDescriptor__factory>;
    getContractFactory(
      name: "IValidatorPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidatorPool__factory>;
    getContractFactory(
      name: "AdminErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminErrorCodes__factory>;
    getContractFactory(
      name: "AliceNetFactoryBaseErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AliceNetFactoryBaseErrorCodes__factory>;
    getContractFactory(
      name: "Base64ErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base64ErrorCodes__factory>;
    getContractFactory(
      name: "BaseParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "BClaimsParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BClaimsParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "BTokenErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BTokenErrorCodes__factory>;
    getContractFactory(
      name: "CircuitBreakerErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CircuitBreakerErrorCodes__factory>;
    getContractFactory(
      name: "CryptoLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptoLibraryErrorCodes__factory>;
    getContractFactory(
      name: "CustomEnumerableMapsErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomEnumerableMapsErrorCodes__factory>;
    getContractFactory(
      name: "ETHDKGErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHDKGErrorCodes__factory>;
    getContractFactory(
      name: "GovernanceErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceErrorCodes__factory>;
    getContractFactory(
      name: "ImmutableAuthErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableAuthErrorCodes__factory>;
    getContractFactory(
      name: "MagicTokenTransferErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagicTokenTransferErrorCodes__factory>;
    getContractFactory(
      name: "MagicValueErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagicValueErrorCodes__factory>;
    getContractFactory(
      name: "MerkleProofParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProofParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "MutexErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MutexErrorCodes__factory>;
    getContractFactory(
      name: "PClaimsParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PClaimsParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "RCertParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RCertParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "RClaimsParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RClaimsParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "SnapshotsErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotsErrorCodes__factory>;
    getContractFactory(
      name: "StakingNFTErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingNFTErrorCodes__factory>;
    getContractFactory(
      name: "TXInPreImageParserLibraryErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TXInPreImageParserLibraryErrorCodes__factory>;
    getContractFactory(
      name: "ValidatorPoolErrorCodes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorPoolErrorCodes__factory>;
    getContractFactory(
      name: "ETHDKGAccusations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHDKGAccusations__factory>;
    getContractFactory(
      name: "ETHDKGPhases",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHDKGPhases__factory>;
    getContractFactory(
      name: "ETHDKGStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHDKGStorage__factory>;
    getContractFactory(
      name: "AliceNetFactoryBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AliceNetFactoryBase__factory>;
    getContractFactory(
      name: "CryptoLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptoLibrary__factory>;
    getContractFactory(
      name: "SnapshotsStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotsStorage__factory>;
    getContractFactory(
      name: "SnapshotsStorageV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotsStorageV2__factory>;
    getContractFactory(
      name: "StakingNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingNFT__factory>;
    getContractFactory(
      name: "ValidatorPoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorPoolStorage__factory>;
    getContractFactory(
      name: "LiquidityProviderStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityProviderStaking__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "PublicStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicStaking__factory>;
    getContractFactory(
      name: "Snapshots",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Snapshots__factory>;
    getContractFactory(
      name: "SnapshotsV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotsV2__factory>;
    getContractFactory(
      name: "StakingPositionDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingPositionDescriptor__factory>;
    getContractFactory(
      name: "ExternalStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExternalStore__factory>;
    getContractFactory(
      name: "StateMigration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateMigration__factory>;
    getContractFactory(
      name: "Admin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Admin__factory>;
    getContractFactory(
      name: "CircuitBreaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CircuitBreaker__factory>;
    getContractFactory(
      name: "DeterministicAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeterministicAddress__factory>;
    getContractFactory(
      name: "ImmutableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableAToken__factory>;
    getContractFactory(
      name: "ImmutableATokenBurner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableATokenBurner__factory>;
    getContractFactory(
      name: "ImmutableATokenMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableATokenMinter__factory>;
    getContractFactory(
      name: "ImmutableBToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableBToken__factory>;
    getContractFactory(
      name: "ImmutableETHDKG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableETHDKG__factory>;
    getContractFactory(
      name: "ImmutableETHDKGAccusations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableETHDKGAccusations__factory>;
    getContractFactory(
      name: "ImmutableETHDKGPhases",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableETHDKGPhases__factory>;
    getContractFactory(
      name: "ImmutableFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableFactory__factory>;
    getContractFactory(
      name: "ImmutableFoundation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableFoundation__factory>;
    getContractFactory(
      name: "ImmutableGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableGovernance__factory>;
    getContractFactory(
      name: "ImmutableLiquidityProviderStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableLiquidityProviderStaking__factory>;
    getContractFactory(
      name: "ImmutablePublicStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutablePublicStaking__factory>;
    getContractFactory(
      name: "ImmutableSnapshots",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableSnapshots__factory>;
    getContractFactory(
      name: "ImmutableStakingPositionDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableStakingPositionDescriptor__factory>;
    getContractFactory(
      name: "ImmutableValidatorPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableValidatorPool__factory>;
    getContractFactory(
      name: "ImmutableValidatorStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableValidatorStaking__factory>;
    getContractFactory(
      name: "Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utils__factory>;
    getContractFactory(
      name: "ValidatorPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorPool__factory>;
    getContractFactory(
      name: "ValidatorStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorStaking__factory>;
    getContractFactory(
      name: "ATokenBurnerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenBurnerMock__factory>;
    getContractFactory(
      name: "ATokenMinterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenMinterMock__factory>;
    getContractFactory(
      name: "ETHDKGMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHDKGMock__factory>;
    getContractFactory(
      name: "IMockBaseContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMockBaseContract__factory>;
    getContractFactory(
      name: "MockBaseContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBaseContract__factory>;
    getContractFactory(
      name: "IMockEndPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMockEndPoint__factory>;
    getContractFactory(
      name: "MockEndPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEndPoint__factory>;
    getContractFactory(
      name: "IMockEndPointLockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMockEndPointLockable__factory>;
    getContractFactory(
      name: "MockEndPointLockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEndPointLockable__factory>;
    getContractFactory(
      name: "MockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFactory__factory>;
    getContractFactory(
      name: "MockInitializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInitializable__factory>;
    getContractFactory(
      name: "MockSelfDestruct",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSelfDestruct__factory>;
    getContractFactory(
      name: "LegacyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyToken__factory>;
    getContractFactory(
      name: "LegacyTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyTokenBase__factory>;
    getContractFactory(
      name: "CryptoLibraryWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptoLibraryWrapper__factory>;
    getContractFactory(
      name: "StakingDescriptorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingDescriptorMock__factory>;
    getContractFactory(
      name: "StakingSVGMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingSVGMock__factory>;
    getContractFactory(
      name: "BaseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseMock__factory>;
    getContractFactory(
      name: "HugeAccumulatorStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HugeAccumulatorStaking__factory>;
    getContractFactory(
      name: "ERC721ReceiverAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721ReceiverAccount__factory>;
    getContractFactory(
      name: "ReentrantFiniteBurnAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantFiniteBurnAccount__factory>;
    getContractFactory(
      name: "ReentrantFiniteBurnERC721ReceiverAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantFiniteBurnERC721ReceiverAccount__factory>;
    getContractFactory(
      name: "ReentrantFiniteEthCollectorAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantFiniteEthCollectorAccount__factory>;
    getContractFactory(
      name: "ReentrantLoopBurnAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantLoopBurnAccount__factory>;
    getContractFactory(
      name: "ReentrantLoopBurnERC721ReceiverAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantLoopBurnERC721ReceiverAccount__factory>;
    getContractFactory(
      name: "ReentrantLoopCollectEthERC721ReceiverAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantLoopCollectEthERC721ReceiverAccount__factory>;
    getContractFactory(
      name: "ReentrantLoopEthCollectorAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantLoopEthCollectorAccount__factory>;
    getContractFactory(
      name: "ExternalStoreRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExternalStoreRegistration__factory>;
    getContractFactory(
      name: "RegisterValidators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegisterValidators__factory>;
    getContractFactory(
      name: "SnapshotsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotsMock__factory>;
    getContractFactory(
      name: "FooToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FooToken__factory>;
    getContractFactory(
      name: "Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Minter__factory>;
    getContractFactory(
      name: "ValidatorPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorPoolMock__factory>;

    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Accusations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Accusations>;
    getContractAt(
      name: "AliceNetFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AliceNetFactory>;
    getContractAt(
      name: "AToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AToken>;
    getContractAt(
      name: "ATokenBurner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenBurner>;
    getContractAt(
      name: "ATokenMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenMinter>;
    getContractAt(
      name: "BToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BToken>;
    getContractAt(
      name: "ETHDKG",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHDKG>;
    getContractAt(
      name: "Foundation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Foundation>;
    getContractAt(
      name: "Governance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governance>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IATokenBurner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IATokenBurner>;
    getContractAt(
      name: "IATokenMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IATokenMinter>;
    getContractAt(
      name: "IBToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBToken>;
    getContractAt(
      name: "ICBCloser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICBCloser>;
    getContractAt(
      name: "ICBOpener",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICBOpener>;
    getContractAt(
      name: "IERC20Transferable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Transferable>;
    getContractAt(
      name: "IERC721Transferable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Transferable>;
    getContractAt(
      name: "IETHDKG",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IETHDKG>;
    getContractAt(
      name: "IETHDKGEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IETHDKGEvents>;
    getContractAt(
      name: "IGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: "IMagicEthTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMagicEthTransfer>;
    getContractAt(
      name: "IMagicTokenTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMagicTokenTransfer>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "ISnapshots",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISnapshots>;
    getContractAt(
      name: "IStakingNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingNFT>;
    getContractAt(
      name: "IStakingNFTDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingNFTDescriptor>;
    getContractAt(
      name: "IValidatorPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidatorPool>;
    getContractAt(
      name: "AdminErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminErrorCodes>;
    getContractAt(
      name: "AliceNetFactoryBaseErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AliceNetFactoryBaseErrorCodes>;
    getContractAt(
      name: "Base64ErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Base64ErrorCodes>;
    getContractAt(
      name: "BaseParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseParserLibraryErrorCodes>;
    getContractAt(
      name: "BClaimsParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BClaimsParserLibraryErrorCodes>;
    getContractAt(
      name: "BTokenErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BTokenErrorCodes>;
    getContractAt(
      name: "CircuitBreakerErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CircuitBreakerErrorCodes>;
    getContractAt(
      name: "CryptoLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptoLibraryErrorCodes>;
    getContractAt(
      name: "CustomEnumerableMapsErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomEnumerableMapsErrorCodes>;
    getContractAt(
      name: "ETHDKGErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHDKGErrorCodes>;
    getContractAt(
      name: "GovernanceErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceErrorCodes>;
    getContractAt(
      name: "ImmutableAuthErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableAuthErrorCodes>;
    getContractAt(
      name: "MagicTokenTransferErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagicTokenTransferErrorCodes>;
    getContractAt(
      name: "MagicValueErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagicValueErrorCodes>;
    getContractAt(
      name: "MerkleProofParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProofParserLibraryErrorCodes>;
    getContractAt(
      name: "MutexErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MutexErrorCodes>;
    getContractAt(
      name: "PClaimsParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PClaimsParserLibraryErrorCodes>;
    getContractAt(
      name: "RCertParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RCertParserLibraryErrorCodes>;
    getContractAt(
      name: "RClaimsParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RClaimsParserLibraryErrorCodes>;
    getContractAt(
      name: "SnapshotsErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotsErrorCodes>;
    getContractAt(
      name: "StakingNFTErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingNFTErrorCodes>;
    getContractAt(
      name: "TXInPreImageParserLibraryErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TXInPreImageParserLibraryErrorCodes>;
    getContractAt(
      name: "ValidatorPoolErrorCodes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorPoolErrorCodes>;
    getContractAt(
      name: "ETHDKGAccusations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHDKGAccusations>;
    getContractAt(
      name: "ETHDKGPhases",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHDKGPhases>;
    getContractAt(
      name: "ETHDKGStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHDKGStorage>;
    getContractAt(
      name: "AliceNetFactoryBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AliceNetFactoryBase>;
    getContractAt(
      name: "CryptoLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptoLibrary>;
    getContractAt(
      name: "SnapshotsStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotsStorage>;
    getContractAt(
      name: "SnapshotsStorageV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotsStorageV2>;
    getContractAt(
      name: "StakingNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingNFT>;
    getContractAt(
      name: "ValidatorPoolStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorPoolStorage>;
    getContractAt(
      name: "LiquidityProviderStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityProviderStaking>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "PublicStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicStaking>;
    getContractAt(
      name: "Snapshots",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Snapshots>;
    getContractAt(
      name: "SnapshotsV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotsV2>;
    getContractAt(
      name: "StakingPositionDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingPositionDescriptor>;
    getContractAt(
      name: "ExternalStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExternalStore>;
    getContractAt(
      name: "StateMigration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StateMigration>;
    getContractAt(
      name: "Admin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Admin>;
    getContractAt(
      name: "CircuitBreaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CircuitBreaker>;
    getContractAt(
      name: "DeterministicAddress",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeterministicAddress>;
    getContractAt(
      name: "ImmutableAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableAToken>;
    getContractAt(
      name: "ImmutableATokenBurner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableATokenBurner>;
    getContractAt(
      name: "ImmutableATokenMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableATokenMinter>;
    getContractAt(
      name: "ImmutableBToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableBToken>;
    getContractAt(
      name: "ImmutableETHDKG",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableETHDKG>;
    getContractAt(
      name: "ImmutableETHDKGAccusations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableETHDKGAccusations>;
    getContractAt(
      name: "ImmutableETHDKGPhases",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableETHDKGPhases>;
    getContractAt(
      name: "ImmutableFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableFactory>;
    getContractAt(
      name: "ImmutableFoundation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableFoundation>;
    getContractAt(
      name: "ImmutableGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableGovernance>;
    getContractAt(
      name: "ImmutableLiquidityProviderStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableLiquidityProviderStaking>;
    getContractAt(
      name: "ImmutablePublicStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutablePublicStaking>;
    getContractAt(
      name: "ImmutableSnapshots",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableSnapshots>;
    getContractAt(
      name: "ImmutableStakingPositionDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableStakingPositionDescriptor>;
    getContractAt(
      name: "ImmutableValidatorPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableValidatorPool>;
    getContractAt(
      name: "ImmutableValidatorStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableValidatorStaking>;
    getContractAt(
      name: "Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Utils>;
    getContractAt(
      name: "ValidatorPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorPool>;
    getContractAt(
      name: "ValidatorStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorStaking>;
    getContractAt(
      name: "ATokenBurnerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenBurnerMock>;
    getContractAt(
      name: "ATokenMinterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenMinterMock>;
    getContractAt(
      name: "ETHDKGMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHDKGMock>;
    getContractAt(
      name: "IMockBaseContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMockBaseContract>;
    getContractAt(
      name: "MockBaseContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBaseContract>;
    getContractAt(
      name: "IMockEndPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMockEndPoint>;
    getContractAt(
      name: "MockEndPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockEndPoint>;
    getContractAt(
      name: "IMockEndPointLockable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMockEndPointLockable>;
    getContractAt(
      name: "MockEndPointLockable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockEndPointLockable>;
    getContractAt(
      name: "MockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFactory>;
    getContractAt(
      name: "MockInitializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInitializable>;
    getContractAt(
      name: "MockSelfDestruct",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSelfDestruct>;
    getContractAt(
      name: "LegacyToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyToken>;
    getContractAt(
      name: "LegacyTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyTokenBase>;
    getContractAt(
      name: "CryptoLibraryWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptoLibraryWrapper>;
    getContractAt(
      name: "StakingDescriptorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingDescriptorMock>;
    getContractAt(
      name: "StakingSVGMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingSVGMock>;
    getContractAt(
      name: "BaseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseMock>;
    getContractAt(
      name: "HugeAccumulatorStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HugeAccumulatorStaking>;
    getContractAt(
      name: "ERC721ReceiverAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721ReceiverAccount>;
    getContractAt(
      name: "ReentrantFiniteBurnAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantFiniteBurnAccount>;
    getContractAt(
      name: "ReentrantFiniteBurnERC721ReceiverAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantFiniteBurnERC721ReceiverAccount>;
    getContractAt(
      name: "ReentrantFiniteEthCollectorAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantFiniteEthCollectorAccount>;
    getContractAt(
      name: "ReentrantLoopBurnAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantLoopBurnAccount>;
    getContractAt(
      name: "ReentrantLoopBurnERC721ReceiverAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantLoopBurnERC721ReceiverAccount>;
    getContractAt(
      name: "ReentrantLoopCollectEthERC721ReceiverAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantLoopCollectEthERC721ReceiverAccount>;
    getContractAt(
      name: "ReentrantLoopEthCollectorAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantLoopEthCollectorAccount>;
    getContractAt(
      name: "ExternalStoreRegistration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExternalStoreRegistration>;
    getContractAt(
      name: "RegisterValidators",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegisterValidators>;
    getContractAt(
      name: "SnapshotsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotsMock>;
    getContractAt(
      name: "FooToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FooToken>;
    getContractAt(
      name: "Minter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Minter>;
    getContractAt(
      name: "ValidatorPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorPoolMock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
