/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface GovernanceInterface extends utils.Interface {
  contractName: "Governance";
  functions: {
    "updateValue(uint256,uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "updateValue",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "updateValue",
    data: BytesLike
  ): Result;

  events: {
    "ValueUpdated(uint256,uint256,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueUpdated"): EventFragment;
}

export type ValueUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  { epoch: BigNumber; key: BigNumber; value: string; who: string }
>;

export type ValueUpdatedEventFilter = TypedEventFilter<ValueUpdatedEvent>;

export interface Governance extends BaseContract {
  contractName: "Governance";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    updateValue(
      epoch: BigNumberish,
      key: BigNumberish,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  updateValue(
    epoch: BigNumberish,
    key: BigNumberish,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    updateValue(
      epoch: BigNumberish,
      key: BigNumberish,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ValueUpdated(uint256,uint256,bytes32,address)"(
      epoch?: BigNumberish | null,
      key?: BigNumberish | null,
      value?: BytesLike | null,
      who?: null
    ): ValueUpdatedEventFilter;
    ValueUpdated(
      epoch?: BigNumberish | null,
      key?: BigNumberish | null,
      value?: BytesLike | null,
      who?: null
    ): ValueUpdatedEventFilter;
  };

  estimateGas: {
    updateValue(
      epoch: BigNumberish,
      key: BigNumberish,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    updateValue(
      epoch: BigNumberish,
      key: BigNumberish,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
