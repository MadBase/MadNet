/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface CryptoLibraryErrorCodesInterface extends utils.Interface {
  contractName: "CryptoLibraryErrorCodes";
  functions: {
    "CRYPTOLIB_ELLIPTIC_CURVE_ADDITION()": FunctionFragment;
    "CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION()": FunctionFragment;
    "CRYPTOLIB_ELLIPTIC_CURVE_PAIRING()": FunctionFragment;
    "CRYPTOLIB_HASH_POINT_NOT_ON_CURVE()": FunctionFragment;
    "CRYPTOLIB_HASH_POINT_UNSAFE()": FunctionFragment;
    "CRYPTOLIB_INVERSE_ARRAY_INCORRECT()": FunctionFragment;
    "CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED()": FunctionFragment;
    "CRYPTOLIB_K_EQUAL_TO_J()": FunctionFragment;
    "CRYPTOLIB_MODULAR_EXPONENTIATION()": FunctionFragment;
    "CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH()": FunctionFragment;
    "CRYPTOLIB_POINT_NOT_ON_CURVE()": FunctionFragment;
    "CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH()": FunctionFragment;
    "CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CRYPTOLIB_ELLIPTIC_CURVE_ADDITION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_ELLIPTIC_CURVE_PAIRING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_HASH_POINT_NOT_ON_CURVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_HASH_POINT_UNSAFE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_INVERSE_ARRAY_INCORRECT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_K_EQUAL_TO_J",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_MODULAR_EXPONENTIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_POINT_NOT_ON_CURVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_ELLIPTIC_CURVE_ADDITION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_ELLIPTIC_CURVE_PAIRING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_HASH_POINT_NOT_ON_CURVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_HASH_POINT_UNSAFE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_INVERSE_ARRAY_INCORRECT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_K_EQUAL_TO_J",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_MODULAR_EXPONENTIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_POINT_NOT_ON_CURVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CryptoLibraryErrorCodes extends BaseContract {
  contractName: "CryptoLibraryErrorCodes";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CryptoLibraryErrorCodesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CRYPTOLIB_ELLIPTIC_CURVE_ADDITION(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_ELLIPTIC_CURVE_PAIRING(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_HASH_POINT_NOT_ON_CURVE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_HASH_POINT_UNSAFE(overrides?: CallOverrides): Promise<[string]>;

    CRYPTOLIB_INVERSE_ARRAY_INCORRECT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_K_EQUAL_TO_J(overrides?: CallOverrides): Promise<[string]>;

    CRYPTOLIB_MODULAR_EXPONENTIATION(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_POINT_NOT_ON_CURVE(overrides?: CallOverrides): Promise<[string]>;

    CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  CRYPTOLIB_ELLIPTIC_CURVE_ADDITION(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION(
    overrides?: CallOverrides
  ): Promise<string>;

  CRYPTOLIB_ELLIPTIC_CURVE_PAIRING(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_HASH_POINT_NOT_ON_CURVE(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_HASH_POINT_UNSAFE(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_INVERSE_ARRAY_INCORRECT(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED(
    overrides?: CallOverrides
  ): Promise<string>;

  CRYPTOLIB_K_EQUAL_TO_J(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_MODULAR_EXPONENTIATION(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH(
    overrides?: CallOverrides
  ): Promise<string>;

  CRYPTOLIB_POINT_NOT_ON_CURVE(overrides?: CallOverrides): Promise<string>;

  CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH(
    overrides?: CallOverrides
  ): Promise<string>;

  CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET(
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    CRYPTOLIB_ELLIPTIC_CURVE_ADDITION(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_ELLIPTIC_CURVE_PAIRING(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_HASH_POINT_NOT_ON_CURVE(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_HASH_POINT_UNSAFE(overrides?: CallOverrides): Promise<string>;

    CRYPTOLIB_INVERSE_ARRAY_INCORRECT(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_K_EQUAL_TO_J(overrides?: CallOverrides): Promise<string>;

    CRYPTOLIB_MODULAR_EXPONENTIATION(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_POINT_NOT_ON_CURVE(overrides?: CallOverrides): Promise<string>;

    CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<string>;

    CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    CRYPTOLIB_ELLIPTIC_CURVE_ADDITION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_ELLIPTIC_CURVE_PAIRING(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_HASH_POINT_NOT_ON_CURVE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_HASH_POINT_UNSAFE(overrides?: CallOverrides): Promise<BigNumber>;

    CRYPTOLIB_INVERSE_ARRAY_INCORRECT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_K_EQUAL_TO_J(overrides?: CallOverrides): Promise<BigNumber>;

    CRYPTOLIB_MODULAR_EXPONENTIATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_POINT_NOT_ON_CURVE(overrides?: CallOverrides): Promise<BigNumber>;

    CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CRYPTOLIB_ELLIPTIC_CURVE_ADDITION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_ELLIPTIC_CURVE_MULTIPLICATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_ELLIPTIC_CURVE_PAIRING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_HASH_POINT_NOT_ON_CURVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_HASH_POINT_UNSAFE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_INVERSE_ARRAY_INCORRECT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_INVERSE_ARRAY_THRESHOLD_EXCEEDED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_K_EQUAL_TO_J(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_MODULAR_EXPONENTIATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_POINTSG1_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_POINT_NOT_ON_CURVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_SIGNATURES_INDICES_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CRYPTOLIB_SIGNATURES_LENGTH_THRESHOLD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
