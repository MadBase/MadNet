/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface ValidatorPoolErrorCodesInterface extends utils.Interface {
  contractName: "ValidatorPoolErrorCodes";
  functions: {
    "VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR()": FunctionFragment;
    "VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE()": FunctionFragment;
    "VALIDATORPOOL_ADDRESS_NOT_VALIDATOR()": FunctionFragment;
    "VALIDATORPOOL_CALLER_NOT_VALIDATOR()": FunctionFragment;
    "VALIDATORPOOL_CONSENSUS_RUNNING()": FunctionFragment;
    "VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE()": FunctionFragment;
    "VALIDATORPOOL_ETHDKG_ROUND_RUNNING()": FunctionFragment;
    "VALIDATORPOOL_ETH_BALANCE_CHANGED()": FunctionFragment;
    "VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION()": FunctionFragment;
    "VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION()": FunctionFragment;
    "VALIDATORPOOL_INVALID_INDEX()": FunctionFragment;
    "VALIDATORPOOL_MAX_VALIDATORS_MET()": FunctionFragment;
    "VALIDATORPOOL_MINIMUM_STAKE_NOT_MET()": FunctionFragment;
    "VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET()": FunctionFragment;
    "VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED()": FunctionFragment;
    "VALIDATORPOOL_PAYOUT_TOO_LOW()": FunctionFragment;
    "VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS()": FunctionFragment;
    "VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH()": FunctionFragment;
    "VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE()": FunctionFragment;
    "VALIDATORPOOL_TOKEN_BALANCE_CHANGED()": FunctionFragment;
    "VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE()": FunctionFragment;
    "VALIDATORPOOL_WAITING_PERIOD_NOT_MET()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_ADDRESS_NOT_VALIDATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_CALLER_NOT_VALIDATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_CONSENSUS_RUNNING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_ETHDKG_ROUND_RUNNING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_ETH_BALANCE_CHANGED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_INVALID_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_MAX_VALIDATORS_MET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_MINIMUM_STAKE_NOT_MET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_PAYOUT_TOO_LOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_TOKEN_BALANCE_CHANGED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORPOOL_WAITING_PERIOD_NOT_MET",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_ADDRESS_NOT_VALIDATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_CALLER_NOT_VALIDATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_CONSENSUS_RUNNING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_ETHDKG_ROUND_RUNNING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_ETH_BALANCE_CHANGED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_INVALID_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_MAX_VALIDATORS_MET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_MINIMUM_STAKE_NOT_MET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_PAYOUT_TOO_LOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_TOKEN_BALANCE_CHANGED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORPOOL_WAITING_PERIOD_NOT_MET",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ValidatorPoolErrorCodes extends BaseContract {
  contractName: "ValidatorPoolErrorCodes";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorPoolErrorCodesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_ADDRESS_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_CALLER_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_CONSENSUS_RUNNING(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_ETHDKG_ROUND_RUNNING(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_ETH_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_INVALID_INDEX(overrides?: CallOverrides): Promise<[string]>;

    VALIDATORPOOL_MAX_VALIDATORS_MET(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_MINIMUM_STAKE_NOT_MET(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_PAYOUT_TOO_LOW(overrides?: CallOverrides): Promise<[string]>;

    VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_TOKEN_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    VALIDATORPOOL_WAITING_PERIOD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_ADDRESS_NOT_VALIDATOR(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_CALLER_NOT_VALIDATOR(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_CONSENSUS_RUNNING(overrides?: CallOverrides): Promise<string>;

  VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_ETHDKG_ROUND_RUNNING(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_ETH_BALANCE_CHANGED(overrides?: CallOverrides): Promise<string>;

  VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_INVALID_INDEX(overrides?: CallOverrides): Promise<string>;

  VALIDATORPOOL_MAX_VALIDATORS_MET(overrides?: CallOverrides): Promise<string>;

  VALIDATORPOOL_MINIMUM_STAKE_NOT_MET(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_PAYOUT_TOO_LOW(overrides?: CallOverrides): Promise<string>;

  VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_TOKEN_BALANCE_CHANGED(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE(
    overrides?: CallOverrides
  ): Promise<string>;

  VALIDATORPOOL_WAITING_PERIOD_NOT_MET(
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_ADDRESS_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_CALLER_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_CONSENSUS_RUNNING(overrides?: CallOverrides): Promise<string>;

    VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_ETHDKG_ROUND_RUNNING(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_ETH_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_INVALID_INDEX(overrides?: CallOverrides): Promise<string>;

    VALIDATORPOOL_MAX_VALIDATORS_MET(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_MINIMUM_STAKE_NOT_MET(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_PAYOUT_TOO_LOW(overrides?: CallOverrides): Promise<string>;

    VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_TOKEN_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE(
      overrides?: CallOverrides
    ): Promise<string>;

    VALIDATORPOOL_WAITING_PERIOD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_ADDRESS_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_CALLER_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_CONSENSUS_RUNNING(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_ETHDKG_ROUND_RUNNING(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_ETH_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATORPOOL_MAX_VALIDATORS_MET(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_MINIMUM_STAKE_NOT_MET(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_PAYOUT_TOO_LOW(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_TOKEN_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VALIDATORPOOL_WAITING_PERIOD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VALIDATORPOOL_ADDRESS_ALREADY_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_ADDRESS_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_ADDRESS_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_CALLER_NOT_VALIDATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_CONSENSUS_RUNNING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_DISHONEST_VALIDATOR_NOT_ACCUSABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_ETHDKG_ROUND_RUNNING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_ETH_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_FACTORY_SHOULD_OWN_POSITION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_INSUFFICIENT_FUNDS_IN_STAKE_POSITION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_INVALID_INDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_MAX_VALIDATORS_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_MINIMUM_STAKE_NOT_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_MIN_BLOCK_INTERVAL_NOT_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_ONLY_CONTRACTS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_PAYOUT_TOO_LOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_PROFITS_ONLY_CLAIMABLE_DURING_CONSENSUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_REGISTRATION_PARAMETER_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_SENDER_NOT_IN_EXITING_QUEUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_TOKEN_BALANCE_CHANGED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_VALIDATORS_GREATER_THAN_AVAILABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATORPOOL_WAITING_PERIOD_NOT_MET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
