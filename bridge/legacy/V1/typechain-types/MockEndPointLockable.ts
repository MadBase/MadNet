/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface MockEndPointLockableInterface extends utils.Interface {
  contractName: "MockEndPointLockable";
  functions: {
    "addOne()": FunctionFragment;
    "addTwo()": FunctionFragment;
    "factory()": FunctionFragment;
    "i()": FunctionFragment;
    "owner()": FunctionFragment;
    "upgradeLock()": FunctionFragment;
    "upgradeUnlock()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addOne", values?: undefined): string;
  encodeFunctionData(functionFragment: "addTwo", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "i", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeUnlock",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTwo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "i", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeUnlock",
    data: BytesLike
  ): Result;

  events: {
    "AddedOne(uint256)": EventFragment;
    "AddedTwo(uint256)": EventFragment;
    "UpgradeLocked(bool)": EventFragment;
    "UpgradeUnlocked(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedTwo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeUnlocked"): EventFragment;
}

export type AddedOneEvent = TypedEvent<[BigNumber], { i: BigNumber }>;

export type AddedOneEventFilter = TypedEventFilter<AddedOneEvent>;

export type AddedTwoEvent = TypedEvent<[BigNumber], { i: BigNumber }>;

export type AddedTwoEventFilter = TypedEventFilter<AddedTwoEvent>;

export type UpgradeLockedEvent = TypedEvent<[boolean], { lock: boolean }>;

export type UpgradeLockedEventFilter = TypedEventFilter<UpgradeLockedEvent>;

export type UpgradeUnlockedEvent = TypedEvent<[boolean], { lock: boolean }>;

export type UpgradeUnlockedEventFilter = TypedEventFilter<UpgradeUnlockedEvent>;

export interface MockEndPointLockable extends BaseContract {
  contractName: "MockEndPointLockable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockEndPointLockableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOne(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTwo(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    i(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    upgradeLock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeUnlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOne(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTwo(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  i(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  upgradeLock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeUnlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOne(overrides?: CallOverrides): Promise<void>;

    addTwo(overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    i(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    upgradeLock(overrides?: CallOverrides): Promise<void>;

    upgradeUnlock(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddedOne(uint256)"(i?: BigNumberish | null): AddedOneEventFilter;
    AddedOne(i?: BigNumberish | null): AddedOneEventFilter;

    "AddedTwo(uint256)"(i?: BigNumberish | null): AddedTwoEventFilter;
    AddedTwo(i?: BigNumberish | null): AddedTwoEventFilter;

    "UpgradeLocked(bool)"(lock?: boolean | null): UpgradeLockedEventFilter;
    UpgradeLocked(lock?: boolean | null): UpgradeLockedEventFilter;

    "UpgradeUnlocked(bool)"(lock?: boolean | null): UpgradeUnlockedEventFilter;
    UpgradeUnlocked(lock?: boolean | null): UpgradeUnlockedEventFilter;
  };

  estimateGas: {
    addOne(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTwo(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    i(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeLock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeUnlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOne(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTwo(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    i(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeLock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeUnlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
