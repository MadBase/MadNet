// Code generated by go-mockgen 1.1.4; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"

	transaction "github.com/MadBase/MadNet/blockchain/transaction"
	types "github.com/ethereum/go-ethereum/core/types"
)

// MockIWatcher is a mock implementation of the IWatcher interface (from the
// package github.com/MadBase/MadNet/blockchain/transaction) used for unit
// testing.
type MockIWatcher struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *IWatcherCloseFunc
	// StartFunc is an instance of a mock function object controlling the
	// behavior of the method Start.
	StartFunc *IWatcherStartFunc
	// SubscribeFunc is an instance of a mock function object controlling
	// the behavior of the method Subscribe.
	SubscribeFunc *IWatcherSubscribeFunc
	// SubscribeAndWaitFunc is an instance of a mock function object
	// controlling the behavior of the method SubscribeAndWait.
	SubscribeAndWaitFunc *IWatcherSubscribeAndWaitFunc
	// WaitFunc is an instance of a mock function object controlling the
	// behavior of the method Wait.
	WaitFunc *IWatcherWaitFunc
}

// NewMockIWatcher creates a new mock of the IWatcher interface. All methods
// return zero values for all results, unless overwritten.
func NewMockIWatcher() *MockIWatcher {
	return &MockIWatcher{
		CloseFunc: &IWatcherCloseFunc{
			defaultHook: func() {
				return
			},
		},
		StartFunc: &IWatcherStartFunc{
			defaultHook: func() error {
				return nil
			},
		},
		SubscribeFunc: &IWatcherSubscribeFunc{
			defaultHook: func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error) {
				return nil, nil
			},
		},
		SubscribeAndWaitFunc: &IWatcherSubscribeAndWaitFunc{
			defaultHook: func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error) {
				return nil, nil
			},
		},
		WaitFunc: &IWatcherWaitFunc{
			defaultHook: func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockIWatcher creates a new mock of the IWatcher interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockIWatcher() *MockIWatcher {
	return &MockIWatcher{
		CloseFunc: &IWatcherCloseFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockIWatcher.Close")
			},
		},
		StartFunc: &IWatcherStartFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockIWatcher.Start")
			},
		},
		SubscribeFunc: &IWatcherSubscribeFunc{
			defaultHook: func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error) {
				panic("unexpected invocation of MockIWatcher.Subscribe")
			},
		},
		SubscribeAndWaitFunc: &IWatcherSubscribeAndWaitFunc{
			defaultHook: func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error) {
				panic("unexpected invocation of MockIWatcher.SubscribeAndWait")
			},
		},
		WaitFunc: &IWatcherWaitFunc{
			defaultHook: func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error) {
				panic("unexpected invocation of MockIWatcher.Wait")
			},
		},
	}
}

// NewMockIWatcherFrom creates a new mock of the MockIWatcher interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockIWatcherFrom(i transaction.IWatcher) *MockIWatcher {
	return &MockIWatcher{
		CloseFunc: &IWatcherCloseFunc{
			defaultHook: i.Close,
		},
		StartFunc: &IWatcherStartFunc{
			defaultHook: i.Start,
		},
		SubscribeFunc: &IWatcherSubscribeFunc{
			defaultHook: i.Subscribe,
		},
		SubscribeAndWaitFunc: &IWatcherSubscribeAndWaitFunc{
			defaultHook: i.SubscribeAndWait,
		},
		WaitFunc: &IWatcherWaitFunc{
			defaultHook: i.Wait,
		},
	}
}

// IWatcherCloseFunc describes the behavior when the Close method of the
// parent MockIWatcher instance is invoked.
type IWatcherCloseFunc struct {
	defaultHook func()
	hooks       []func()
	history     []IWatcherCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIWatcher) Close() {
	m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(IWatcherCloseFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockIWatcher instance is invoked and the hook queue is empty.
func (f *IWatcherCloseFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockIWatcher instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IWatcherCloseFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IWatcherCloseFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IWatcherCloseFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *IWatcherCloseFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IWatcherCloseFunc) appendCall(r0 IWatcherCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IWatcherCloseFuncCall objects describing
// the invocations of this function.
func (f *IWatcherCloseFunc) History() []IWatcherCloseFuncCall {
	f.mutex.Lock()
	history := make([]IWatcherCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IWatcherCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockIWatcher.
type IWatcherCloseFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IWatcherCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IWatcherCloseFuncCall) Results() []interface{} {
	return []interface{}{}
}

// IWatcherStartFunc describes the behavior when the Start method of the
// parent MockIWatcher instance is invoked.
type IWatcherStartFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []IWatcherStartFuncCall
	mutex       sync.Mutex
}

// Start delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIWatcher) Start() error {
	r0 := m.StartFunc.nextHook()()
	m.StartFunc.appendCall(IWatcherStartFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Start method of the
// parent MockIWatcher instance is invoked and the hook queue is empty.
func (f *IWatcherStartFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Start method of the parent MockIWatcher instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IWatcherStartFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IWatcherStartFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IWatcherStartFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *IWatcherStartFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IWatcherStartFunc) appendCall(r0 IWatcherStartFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IWatcherStartFuncCall objects describing
// the invocations of this function.
func (f *IWatcherStartFunc) History() []IWatcherStartFuncCall {
	f.mutex.Lock()
	history := make([]IWatcherStartFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IWatcherStartFuncCall is an object that describes an invocation of method
// Start on an instance of MockIWatcher.
type IWatcherStartFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IWatcherStartFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IWatcherStartFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IWatcherSubscribeFunc describes the behavior when the Subscribe method of
// the parent MockIWatcher instance is invoked.
type IWatcherSubscribeFunc struct {
	defaultHook func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error)
	hooks       []func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error)
	history     []IWatcherSubscribeFuncCall
	mutex       sync.Mutex
}

// Subscribe delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIWatcher) Subscribe(v0 context.Context, v1 *types.Transaction, v2 *transaction.SubscribeOptions) (transaction.IReceiptResponse, error) {
	r0, r1 := m.SubscribeFunc.nextHook()(v0, v1, v2)
	m.SubscribeFunc.appendCall(IWatcherSubscribeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Subscribe method of
// the parent MockIWatcher instance is invoked and the hook queue is empty.
func (f *IWatcherSubscribeFunc) SetDefaultHook(hook func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Subscribe method of the parent MockIWatcher instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IWatcherSubscribeFunc) PushHook(hook func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IWatcherSubscribeFunc) SetDefaultReturn(r0 transaction.IReceiptResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IWatcherSubscribeFunc) PushReturn(r0 transaction.IReceiptResponse, r1 error) {
	f.PushHook(func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error) {
		return r0, r1
	})
}

func (f *IWatcherSubscribeFunc) nextHook() func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (transaction.IReceiptResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IWatcherSubscribeFunc) appendCall(r0 IWatcherSubscribeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IWatcherSubscribeFuncCall objects
// describing the invocations of this function.
func (f *IWatcherSubscribeFunc) History() []IWatcherSubscribeFuncCall {
	f.mutex.Lock()
	history := make([]IWatcherSubscribeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IWatcherSubscribeFuncCall is an object that describes an invocation of
// method Subscribe on an instance of MockIWatcher.
type IWatcherSubscribeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *transaction.SubscribeOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 transaction.IReceiptResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IWatcherSubscribeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IWatcherSubscribeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IWatcherSubscribeAndWaitFunc describes the behavior when the
// SubscribeAndWait method of the parent MockIWatcher instance is invoked.
type IWatcherSubscribeAndWaitFunc struct {
	defaultHook func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error)
	hooks       []func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error)
	history     []IWatcherSubscribeAndWaitFuncCall
	mutex       sync.Mutex
}

// SubscribeAndWait delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIWatcher) SubscribeAndWait(v0 context.Context, v1 *types.Transaction, v2 *transaction.SubscribeOptions) (*types.Receipt, error) {
	r0, r1 := m.SubscribeAndWaitFunc.nextHook()(v0, v1, v2)
	m.SubscribeAndWaitFunc.appendCall(IWatcherSubscribeAndWaitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubscribeAndWait
// method of the parent MockIWatcher instance is invoked and the hook queue
// is empty.
func (f *IWatcherSubscribeAndWaitFunc) SetDefaultHook(hook func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubscribeAndWait method of the parent MockIWatcher instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IWatcherSubscribeAndWaitFunc) PushHook(hook func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IWatcherSubscribeAndWaitFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IWatcherSubscribeAndWaitFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *IWatcherSubscribeAndWaitFunc) nextHook() func(context.Context, *types.Transaction, *transaction.SubscribeOptions) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IWatcherSubscribeAndWaitFunc) appendCall(r0 IWatcherSubscribeAndWaitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IWatcherSubscribeAndWaitFuncCall objects
// describing the invocations of this function.
func (f *IWatcherSubscribeAndWaitFunc) History() []IWatcherSubscribeAndWaitFuncCall {
	f.mutex.Lock()
	history := make([]IWatcherSubscribeAndWaitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IWatcherSubscribeAndWaitFuncCall is an object that describes an
// invocation of method SubscribeAndWait on an instance of MockIWatcher.
type IWatcherSubscribeAndWaitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *transaction.SubscribeOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IWatcherSubscribeAndWaitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IWatcherSubscribeAndWaitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IWatcherWaitFunc describes the behavior when the Wait method of the
// parent MockIWatcher instance is invoked.
type IWatcherWaitFunc struct {
	defaultHook func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error)
	hooks       []func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error)
	history     []IWatcherWaitFuncCall
	mutex       sync.Mutex
}

// Wait delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIWatcher) Wait(v0 context.Context, v1 transaction.IReceiptResponse) (*types.Receipt, error) {
	r0, r1 := m.WaitFunc.nextHook()(v0, v1)
	m.WaitFunc.appendCall(IWatcherWaitFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Wait method of the
// parent MockIWatcher instance is invoked and the hook queue is empty.
func (f *IWatcherWaitFunc) SetDefaultHook(hook func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Wait method of the parent MockIWatcher instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IWatcherWaitFunc) PushHook(hook func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IWatcherWaitFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IWatcherWaitFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *IWatcherWaitFunc) nextHook() func(context.Context, transaction.IReceiptResponse) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IWatcherWaitFunc) appendCall(r0 IWatcherWaitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IWatcherWaitFuncCall objects describing the
// invocations of this function.
func (f *IWatcherWaitFunc) History() []IWatcherWaitFuncCall {
	f.mutex.Lock()
	history := make([]IWatcherWaitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IWatcherWaitFuncCall is an object that describes an invocation of method
// Wait on an instance of MockIWatcher.
type IWatcherWaitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 transaction.IReceiptResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IWatcherWaitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IWatcherWaitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
