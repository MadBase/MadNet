// Code generated by go-mockgen 1.1.4; DO NOT EDIT.

package mocks

import (
	"sync"

	interfaces "github.com/MadBase/MadNet/blockchain/monitor/interfaces"
	objs "github.com/MadBase/MadNet/consensus/objs"
	constants "github.com/MadBase/MadNet/constants"
)

// MockIAdminHandler is a mock implementation of the IAdminHandler interface
// (from the package
// github.com/MadBase/MadNet/blockchain/monitor/interfaces) used for unit
// testing.
type MockIAdminHandler struct {
	// AddPrivateKeyFunc is an instance of a mock function object
	// controlling the behavior of the method AddPrivateKey.
	AddPrivateKeyFunc *IAdminHandlerAddPrivateKeyFunc
	// AddSnapshotFunc is an instance of a mock function object controlling
	// the behavior of the method AddSnapshot.
	AddSnapshotFunc *IAdminHandlerAddSnapshotFunc
	// AddValidatorSetFunc is an instance of a mock function object
	// controlling the behavior of the method AddValidatorSet.
	AddValidatorSetFunc *IAdminHandlerAddValidatorSetFunc
	// RegisterSnapshotCallbackFunc is an instance of a mock function object
	// controlling the behavior of the method RegisterSnapshotCallback.
	RegisterSnapshotCallbackFunc *IAdminHandlerRegisterSnapshotCallbackFunc
	// SetSynchronizedFunc is an instance of a mock function object
	// controlling the behavior of the method SetSynchronized.
	SetSynchronizedFunc *IAdminHandlerSetSynchronizedFunc
}

// NewMockIAdminHandler creates a new mock of the IAdminHandler interface.
// All methods return zero values for all results, unless overwritten.
func NewMockIAdminHandler() *MockIAdminHandler {
	return &MockIAdminHandler{
		AddPrivateKeyFunc: &IAdminHandlerAddPrivateKeyFunc{
			defaultHook: func([]byte, constants.CurveSpec) error {
				return nil
			},
		},
		AddSnapshotFunc: &IAdminHandlerAddSnapshotFunc{
			defaultHook: func(*objs.BlockHeader, bool) error {
				return nil
			},
		},
		AddValidatorSetFunc: &IAdminHandlerAddValidatorSetFunc{
			defaultHook: func(*objs.ValidatorSet) error {
				return nil
			},
		},
		RegisterSnapshotCallbackFunc: &IAdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: func(func(*objs.BlockHeader) error) {
				return
			},
		},
		SetSynchronizedFunc: &IAdminHandlerSetSynchronizedFunc{
			defaultHook: func(bool) {
				return
			},
		},
	}
}

// NewStrictMockIAdminHandler creates a new mock of the IAdminHandler
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockIAdminHandler() *MockIAdminHandler {
	return &MockIAdminHandler{
		AddPrivateKeyFunc: &IAdminHandlerAddPrivateKeyFunc{
			defaultHook: func([]byte, constants.CurveSpec) error {
				panic("unexpected invocation of MockIAdminHandler.AddPrivateKey")
			},
		},
		AddSnapshotFunc: &IAdminHandlerAddSnapshotFunc{
			defaultHook: func(*objs.BlockHeader, bool) error {
				panic("unexpected invocation of MockIAdminHandler.AddSnapshot")
			},
		},
		AddValidatorSetFunc: &IAdminHandlerAddValidatorSetFunc{
			defaultHook: func(*objs.ValidatorSet) error {
				panic("unexpected invocation of MockIAdminHandler.AddValidatorSet")
			},
		},
		RegisterSnapshotCallbackFunc: &IAdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: func(func(*objs.BlockHeader) error) {
				panic("unexpected invocation of MockIAdminHandler.RegisterSnapshotCallback")
			},
		},
		SetSynchronizedFunc: &IAdminHandlerSetSynchronizedFunc{
			defaultHook: func(bool) {
				panic("unexpected invocation of MockIAdminHandler.SetSynchronized")
			},
		},
	}
}

// NewMockIAdminHandlerFrom creates a new mock of the MockIAdminHandler
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockIAdminHandlerFrom(i interfaces.IAdminHandler) *MockIAdminHandler {
	return &MockIAdminHandler{
		AddPrivateKeyFunc: &IAdminHandlerAddPrivateKeyFunc{
			defaultHook: i.AddPrivateKey,
		},
		AddSnapshotFunc: &IAdminHandlerAddSnapshotFunc{
			defaultHook: i.AddSnapshot,
		},
		AddValidatorSetFunc: &IAdminHandlerAddValidatorSetFunc{
			defaultHook: i.AddValidatorSet,
		},
		RegisterSnapshotCallbackFunc: &IAdminHandlerRegisterSnapshotCallbackFunc{
			defaultHook: i.RegisterSnapshotCallback,
		},
		SetSynchronizedFunc: &IAdminHandlerSetSynchronizedFunc{
			defaultHook: i.SetSynchronized,
		},
	}
}

// IAdminHandlerAddPrivateKeyFunc describes the behavior when the
// AddPrivateKey method of the parent MockIAdminHandler instance is invoked.
type IAdminHandlerAddPrivateKeyFunc struct {
	defaultHook func([]byte, constants.CurveSpec) error
	hooks       []func([]byte, constants.CurveSpec) error
	history     []IAdminHandlerAddPrivateKeyFuncCall
	mutex       sync.Mutex
}

// AddPrivateKey delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAdminHandler) AddPrivateKey(v0 []byte, v1 constants.CurveSpec) error {
	r0 := m.AddPrivateKeyFunc.nextHook()(v0, v1)
	m.AddPrivateKeyFunc.appendCall(IAdminHandlerAddPrivateKeyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddPrivateKey method
// of the parent MockIAdminHandler instance is invoked and the hook queue is
// empty.
func (f *IAdminHandlerAddPrivateKeyFunc) SetDefaultHook(hook func([]byte, constants.CurveSpec) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddPrivateKey method of the parent MockIAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAdminHandlerAddPrivateKeyFunc) PushHook(hook func([]byte, constants.CurveSpec) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAdminHandlerAddPrivateKeyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func([]byte, constants.CurveSpec) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAdminHandlerAddPrivateKeyFunc) PushReturn(r0 error) {
	f.PushHook(func([]byte, constants.CurveSpec) error {
		return r0
	})
}

func (f *IAdminHandlerAddPrivateKeyFunc) nextHook() func([]byte, constants.CurveSpec) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAdminHandlerAddPrivateKeyFunc) appendCall(r0 IAdminHandlerAddPrivateKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAdminHandlerAddPrivateKeyFuncCall objects
// describing the invocations of this function.
func (f *IAdminHandlerAddPrivateKeyFunc) History() []IAdminHandlerAddPrivateKeyFuncCall {
	f.mutex.Lock()
	history := make([]IAdminHandlerAddPrivateKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAdminHandlerAddPrivateKeyFuncCall is an object that describes an
// invocation of method AddPrivateKey on an instance of MockIAdminHandler.
type IAdminHandlerAddPrivateKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []byte
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 constants.CurveSpec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAdminHandlerAddPrivateKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAdminHandlerAddPrivateKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IAdminHandlerAddSnapshotFunc describes the behavior when the AddSnapshot
// method of the parent MockIAdminHandler instance is invoked.
type IAdminHandlerAddSnapshotFunc struct {
	defaultHook func(*objs.BlockHeader, bool) error
	hooks       []func(*objs.BlockHeader, bool) error
	history     []IAdminHandlerAddSnapshotFuncCall
	mutex       sync.Mutex
}

// AddSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIAdminHandler) AddSnapshot(v0 *objs.BlockHeader, v1 bool) error {
	r0 := m.AddSnapshotFunc.nextHook()(v0, v1)
	m.AddSnapshotFunc.appendCall(IAdminHandlerAddSnapshotFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddSnapshot method
// of the parent MockIAdminHandler instance is invoked and the hook queue is
// empty.
func (f *IAdminHandlerAddSnapshotFunc) SetDefaultHook(hook func(*objs.BlockHeader, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddSnapshot method of the parent MockIAdminHandler instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IAdminHandlerAddSnapshotFunc) PushHook(hook func(*objs.BlockHeader, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAdminHandlerAddSnapshotFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*objs.BlockHeader, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAdminHandlerAddSnapshotFunc) PushReturn(r0 error) {
	f.PushHook(func(*objs.BlockHeader, bool) error {
		return r0
	})
}

func (f *IAdminHandlerAddSnapshotFunc) nextHook() func(*objs.BlockHeader, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAdminHandlerAddSnapshotFunc) appendCall(r0 IAdminHandlerAddSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAdminHandlerAddSnapshotFuncCall objects
// describing the invocations of this function.
func (f *IAdminHandlerAddSnapshotFunc) History() []IAdminHandlerAddSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]IAdminHandlerAddSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAdminHandlerAddSnapshotFuncCall is an object that describes an
// invocation of method AddSnapshot on an instance of MockIAdminHandler.
type IAdminHandlerAddSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *objs.BlockHeader
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAdminHandlerAddSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAdminHandlerAddSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IAdminHandlerAddValidatorSetFunc describes the behavior when the
// AddValidatorSet method of the parent MockIAdminHandler instance is
// invoked.
type IAdminHandlerAddValidatorSetFunc struct {
	defaultHook func(*objs.ValidatorSet) error
	hooks       []func(*objs.ValidatorSet) error
	history     []IAdminHandlerAddValidatorSetFuncCall
	mutex       sync.Mutex
}

// AddValidatorSet delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAdminHandler) AddValidatorSet(v0 *objs.ValidatorSet) error {
	r0 := m.AddValidatorSetFunc.nextHook()(v0)
	m.AddValidatorSetFunc.appendCall(IAdminHandlerAddValidatorSetFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddValidatorSet
// method of the parent MockIAdminHandler instance is invoked and the hook
// queue is empty.
func (f *IAdminHandlerAddValidatorSetFunc) SetDefaultHook(hook func(*objs.ValidatorSet) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddValidatorSet method of the parent MockIAdminHandler instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAdminHandlerAddValidatorSetFunc) PushHook(hook func(*objs.ValidatorSet) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAdminHandlerAddValidatorSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*objs.ValidatorSet) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAdminHandlerAddValidatorSetFunc) PushReturn(r0 error) {
	f.PushHook(func(*objs.ValidatorSet) error {
		return r0
	})
}

func (f *IAdminHandlerAddValidatorSetFunc) nextHook() func(*objs.ValidatorSet) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAdminHandlerAddValidatorSetFunc) appendCall(r0 IAdminHandlerAddValidatorSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAdminHandlerAddValidatorSetFuncCall
// objects describing the invocations of this function.
func (f *IAdminHandlerAddValidatorSetFunc) History() []IAdminHandlerAddValidatorSetFuncCall {
	f.mutex.Lock()
	history := make([]IAdminHandlerAddValidatorSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAdminHandlerAddValidatorSetFuncCall is an object that describes an
// invocation of method AddValidatorSet on an instance of MockIAdminHandler.
type IAdminHandlerAddValidatorSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *objs.ValidatorSet
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAdminHandlerAddValidatorSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAdminHandlerAddValidatorSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IAdminHandlerRegisterSnapshotCallbackFunc describes the behavior when the
// RegisterSnapshotCallback method of the parent MockIAdminHandler instance
// is invoked.
type IAdminHandlerRegisterSnapshotCallbackFunc struct {
	defaultHook func(func(*objs.BlockHeader) error)
	hooks       []func(func(*objs.BlockHeader) error)
	history     []IAdminHandlerRegisterSnapshotCallbackFuncCall
	mutex       sync.Mutex
}

// RegisterSnapshotCallback delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockIAdminHandler) RegisterSnapshotCallback(v0 func(*objs.BlockHeader) error) {
	m.RegisterSnapshotCallbackFunc.nextHook()(v0)
	m.RegisterSnapshotCallbackFunc.appendCall(IAdminHandlerRegisterSnapshotCallbackFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the
// RegisterSnapshotCallback method of the parent MockIAdminHandler instance
// is invoked and the hook queue is empty.
func (f *IAdminHandlerRegisterSnapshotCallbackFunc) SetDefaultHook(hook func(func(*objs.BlockHeader) error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RegisterSnapshotCallback method of the parent MockIAdminHandler instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IAdminHandlerRegisterSnapshotCallbackFunc) PushHook(hook func(func(*objs.BlockHeader) error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAdminHandlerRegisterSnapshotCallbackFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(func(*objs.BlockHeader) error) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAdminHandlerRegisterSnapshotCallbackFunc) PushReturn() {
	f.PushHook(func(func(*objs.BlockHeader) error) {
		return
	})
}

func (f *IAdminHandlerRegisterSnapshotCallbackFunc) nextHook() func(func(*objs.BlockHeader) error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAdminHandlerRegisterSnapshotCallbackFunc) appendCall(r0 IAdminHandlerRegisterSnapshotCallbackFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IAdminHandlerRegisterSnapshotCallbackFuncCall objects describing the
// invocations of this function.
func (f *IAdminHandlerRegisterSnapshotCallbackFunc) History() []IAdminHandlerRegisterSnapshotCallbackFuncCall {
	f.mutex.Lock()
	history := make([]IAdminHandlerRegisterSnapshotCallbackFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAdminHandlerRegisterSnapshotCallbackFuncCall is an object that describes
// an invocation of method RegisterSnapshotCallback on an instance of
// MockIAdminHandler.
type IAdminHandlerRegisterSnapshotCallbackFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 func(*objs.BlockHeader) error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAdminHandlerRegisterSnapshotCallbackFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAdminHandlerRegisterSnapshotCallbackFuncCall) Results() []interface{} {
	return []interface{}{}
}

// IAdminHandlerSetSynchronizedFunc describes the behavior when the
// SetSynchronized method of the parent MockIAdminHandler instance is
// invoked.
type IAdminHandlerSetSynchronizedFunc struct {
	defaultHook func(bool)
	hooks       []func(bool)
	history     []IAdminHandlerSetSynchronizedFuncCall
	mutex       sync.Mutex
}

// SetSynchronized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIAdminHandler) SetSynchronized(v0 bool) {
	m.SetSynchronizedFunc.nextHook()(v0)
	m.SetSynchronizedFunc.appendCall(IAdminHandlerSetSynchronizedFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetSynchronized
// method of the parent MockIAdminHandler instance is invoked and the hook
// queue is empty.
func (f *IAdminHandlerSetSynchronizedFunc) SetDefaultHook(hook func(bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSynchronized method of the parent MockIAdminHandler instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IAdminHandlerSetSynchronizedFunc) PushHook(hook func(bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IAdminHandlerSetSynchronizedFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(bool) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IAdminHandlerSetSynchronizedFunc) PushReturn() {
	f.PushHook(func(bool) {
		return
	})
}

func (f *IAdminHandlerSetSynchronizedFunc) nextHook() func(bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IAdminHandlerSetSynchronizedFunc) appendCall(r0 IAdminHandlerSetSynchronizedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IAdminHandlerSetSynchronizedFuncCall
// objects describing the invocations of this function.
func (f *IAdminHandlerSetSynchronizedFunc) History() []IAdminHandlerSetSynchronizedFuncCall {
	f.mutex.Lock()
	history := make([]IAdminHandlerSetSynchronizedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IAdminHandlerSetSynchronizedFuncCall is an object that describes an
// invocation of method SetSynchronized on an instance of MockIAdminHandler.
type IAdminHandlerSetSynchronizedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IAdminHandlerSetSynchronizedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IAdminHandlerSetSynchronizedFuncCall) Results() []interface{} {
	return []interface{}{}
}
