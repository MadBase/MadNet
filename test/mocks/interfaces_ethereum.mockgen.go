// Code generated by go-mockgen 1.1.4; DO NOT EDIT.

package mocks

import (
	"context"
	"math/big"
	"sync"
	"time"

	ethereum "github.com/MadBase/MadNet/blockchain/ethereum"
	bindings "github.com/MadBase/MadNet/bridge/bindings"
	goethereum "github.com/ethereum/go-ethereum"
	accounts "github.com/ethereum/go-ethereum/accounts"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	keystore "github.com/ethereum/go-ethereum/accounts/keystore"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
)

// MockClient is a mock implementation of the Client interface (from the
// package github.com/MadBase/MadNet/blockchain/ethereum) used for unit
// testing.
type MockClient struct {
	// BalanceAtFunc is an instance of a mock function object controlling
	// the behavior of the method BalanceAt.
	BalanceAtFunc *ClientBalanceAtFunc
	// BlockByHashFunc is an instance of a mock function object controlling
	// the behavior of the method BlockByHash.
	BlockByHashFunc *ClientBlockByHashFunc
	// BlockByNumberFunc is an instance of a mock function object
	// controlling the behavior of the method BlockByNumber.
	BlockByNumberFunc *ClientBlockByNumberFunc
	// BlockNumberFunc is an instance of a mock function object controlling
	// the behavior of the method BlockNumber.
	BlockNumberFunc *ClientBlockNumberFunc
	// CallContractFunc is an instance of a mock function object controlling
	// the behavior of the method CallContract.
	CallContractFunc *ClientCallContractFunc
	// CodeAtFunc is an instance of a mock function object controlling the
	// behavior of the method CodeAt.
	CodeAtFunc *ClientCodeAtFunc
	// EstimateGasFunc is an instance of a mock function object controlling
	// the behavior of the method EstimateGas.
	EstimateGasFunc *ClientEstimateGasFunc
	// FilterLogsFunc is an instance of a mock function object controlling
	// the behavior of the method FilterLogs.
	FilterLogsFunc *ClientFilterLogsFunc
	// HeaderByHashFunc is an instance of a mock function object controlling
	// the behavior of the method HeaderByHash.
	HeaderByHashFunc *ClientHeaderByHashFunc
	// HeaderByNumberFunc is an instance of a mock function object
	// controlling the behavior of the method HeaderByNumber.
	HeaderByNumberFunc *ClientHeaderByNumberFunc
	// NonceAtFunc is an instance of a mock function object controlling the
	// behavior of the method NonceAt.
	NonceAtFunc *ClientNonceAtFunc
	// PendingCodeAtFunc is an instance of a mock function object
	// controlling the behavior of the method PendingCodeAt.
	PendingCodeAtFunc *ClientPendingCodeAtFunc
	// PendingNonceAtFunc is an instance of a mock function object
	// controlling the behavior of the method PendingNonceAt.
	PendingNonceAtFunc *ClientPendingNonceAtFunc
	// SendTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method SendTransaction.
	SendTransactionFunc *ClientSendTransactionFunc
	// StorageAtFunc is an instance of a mock function object controlling
	// the behavior of the method StorageAt.
	StorageAtFunc *ClientStorageAtFunc
	// SubscribeFilterLogsFunc is an instance of a mock function object
	// controlling the behavior of the method SubscribeFilterLogs.
	SubscribeFilterLogsFunc *ClientSubscribeFilterLogsFunc
	// SubscribeNewHeadFunc is an instance of a mock function object
	// controlling the behavior of the method SubscribeNewHead.
	SubscribeNewHeadFunc *ClientSubscribeNewHeadFunc
	// SuggestGasPriceFunc is an instance of a mock function object
	// controlling the behavior of the method SuggestGasPrice.
	SuggestGasPriceFunc *ClientSuggestGasPriceFunc
	// SuggestGasTipCapFunc is an instance of a mock function object
	// controlling the behavior of the method SuggestGasTipCap.
	SuggestGasTipCapFunc *ClientSuggestGasTipCapFunc
	// TransactionByHashFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionByHash.
	TransactionByHashFunc *ClientTransactionByHashFunc
	// TransactionCountFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionCount.
	TransactionCountFunc *ClientTransactionCountFunc
	// TransactionInBlockFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionInBlock.
	TransactionInBlockFunc *ClientTransactionInBlockFunc
	// TransactionReceiptFunc is an instance of a mock function object
	// controlling the behavior of the method TransactionReceipt.
	TransactionReceiptFunc *ClientTransactionReceiptFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		BalanceAtFunc: &ClientBalanceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (*big.Int, error) {
				return nil, nil
			},
		},
		BlockByHashFunc: &ClientBlockByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Block, error) {
				return nil, nil
			},
		},
		BlockByNumberFunc: &ClientBlockByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Block, error) {
				return nil, nil
			},
		},
		BlockNumberFunc: &ClientBlockNumberFunc{
			defaultHook: func(context.Context) (uint64, error) {
				return 0, nil
			},
		},
		CallContractFunc: &ClientCallContractFunc{
			defaultHook: func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
				return nil, nil
			},
		},
		CodeAtFunc: &ClientCodeAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) ([]byte, error) {
				return nil, nil
			},
		},
		EstimateGasFunc: &ClientEstimateGasFunc{
			defaultHook: func(context.Context, goethereum.CallMsg) (uint64, error) {
				return 0, nil
			},
		},
		FilterLogsFunc: &ClientFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
				return nil, nil
			},
		},
		HeaderByHashFunc: &ClientHeaderByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Header, error) {
				return nil, nil
			},
		},
		HeaderByNumberFunc: &ClientHeaderByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Header, error) {
				return nil, nil
			},
		},
		NonceAtFunc: &ClientNonceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (uint64, error) {
				return 0, nil
			},
		},
		PendingCodeAtFunc: &ClientPendingCodeAtFunc{
			defaultHook: func(context.Context, common.Address) ([]byte, error) {
				return nil, nil
			},
		},
		PendingNonceAtFunc: &ClientPendingNonceAtFunc{
			defaultHook: func(context.Context, common.Address) (uint64, error) {
				return 0, nil
			},
		},
		SendTransactionFunc: &ClientSendTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) error {
				return nil
			},
		},
		StorageAtFunc: &ClientStorageAtFunc{
			defaultHook: func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
				return nil, nil
			},
		},
		SubscribeFilterLogsFunc: &ClientSubscribeFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
				return nil, nil
			},
		},
		SubscribeNewHeadFunc: &ClientSubscribeNewHeadFunc{
			defaultHook: func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
				return nil, nil
			},
		},
		SuggestGasPriceFunc: &ClientSuggestGasPriceFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				return nil, nil
			},
		},
		SuggestGasTipCapFunc: &ClientSuggestGasTipCapFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				return nil, nil
			},
		},
		TransactionByHashFunc: &ClientTransactionByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Transaction, bool, error) {
				return nil, false, nil
			},
		},
		TransactionCountFunc: &ClientTransactionCountFunc{
			defaultHook: func(context.Context, common.Hash) (uint, error) {
				return 0, nil
			},
		},
		TransactionInBlockFunc: &ClientTransactionInBlockFunc{
			defaultHook: func(context.Context, common.Hash, uint) (*types.Transaction, error) {
				return nil, nil
			},
		},
		TransactionReceiptFunc: &ClientTransactionReceiptFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Receipt, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		BalanceAtFunc: &ClientBalanceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (*big.Int, error) {
				panic("unexpected invocation of MockClient.BalanceAt")
			},
		},
		BlockByHashFunc: &ClientBlockByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Block, error) {
				panic("unexpected invocation of MockClient.BlockByHash")
			},
		},
		BlockByNumberFunc: &ClientBlockByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Block, error) {
				panic("unexpected invocation of MockClient.BlockByNumber")
			},
		},
		BlockNumberFunc: &ClientBlockNumberFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockClient.BlockNumber")
			},
		},
		CallContractFunc: &ClientCallContractFunc{
			defaultHook: func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
				panic("unexpected invocation of MockClient.CallContract")
			},
		},
		CodeAtFunc: &ClientCodeAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) ([]byte, error) {
				panic("unexpected invocation of MockClient.CodeAt")
			},
		},
		EstimateGasFunc: &ClientEstimateGasFunc{
			defaultHook: func(context.Context, goethereum.CallMsg) (uint64, error) {
				panic("unexpected invocation of MockClient.EstimateGas")
			},
		},
		FilterLogsFunc: &ClientFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
				panic("unexpected invocation of MockClient.FilterLogs")
			},
		},
		HeaderByHashFunc: &ClientHeaderByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Header, error) {
				panic("unexpected invocation of MockClient.HeaderByHash")
			},
		},
		HeaderByNumberFunc: &ClientHeaderByNumberFunc{
			defaultHook: func(context.Context, *big.Int) (*types.Header, error) {
				panic("unexpected invocation of MockClient.HeaderByNumber")
			},
		},
		NonceAtFunc: &ClientNonceAtFunc{
			defaultHook: func(context.Context, common.Address, *big.Int) (uint64, error) {
				panic("unexpected invocation of MockClient.NonceAt")
			},
		},
		PendingCodeAtFunc: &ClientPendingCodeAtFunc{
			defaultHook: func(context.Context, common.Address) ([]byte, error) {
				panic("unexpected invocation of MockClient.PendingCodeAt")
			},
		},
		PendingNonceAtFunc: &ClientPendingNonceAtFunc{
			defaultHook: func(context.Context, common.Address) (uint64, error) {
				panic("unexpected invocation of MockClient.PendingNonceAt")
			},
		},
		SendTransactionFunc: &ClientSendTransactionFunc{
			defaultHook: func(context.Context, *types.Transaction) error {
				panic("unexpected invocation of MockClient.SendTransaction")
			},
		},
		StorageAtFunc: &ClientStorageAtFunc{
			defaultHook: func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
				panic("unexpected invocation of MockClient.StorageAt")
			},
		},
		SubscribeFilterLogsFunc: &ClientSubscribeFilterLogsFunc{
			defaultHook: func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
				panic("unexpected invocation of MockClient.SubscribeFilterLogs")
			},
		},
		SubscribeNewHeadFunc: &ClientSubscribeNewHeadFunc{
			defaultHook: func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
				panic("unexpected invocation of MockClient.SubscribeNewHead")
			},
		},
		SuggestGasPriceFunc: &ClientSuggestGasPriceFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				panic("unexpected invocation of MockClient.SuggestGasPrice")
			},
		},
		SuggestGasTipCapFunc: &ClientSuggestGasTipCapFunc{
			defaultHook: func(context.Context) (*big.Int, error) {
				panic("unexpected invocation of MockClient.SuggestGasTipCap")
			},
		},
		TransactionByHashFunc: &ClientTransactionByHashFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Transaction, bool, error) {
				panic("unexpected invocation of MockClient.TransactionByHash")
			},
		},
		TransactionCountFunc: &ClientTransactionCountFunc{
			defaultHook: func(context.Context, common.Hash) (uint, error) {
				panic("unexpected invocation of MockClient.TransactionCount")
			},
		},
		TransactionInBlockFunc: &ClientTransactionInBlockFunc{
			defaultHook: func(context.Context, common.Hash, uint) (*types.Transaction, error) {
				panic("unexpected invocation of MockClient.TransactionInBlock")
			},
		},
		TransactionReceiptFunc: &ClientTransactionReceiptFunc{
			defaultHook: func(context.Context, common.Hash) (*types.Receipt, error) {
				panic("unexpected invocation of MockClient.TransactionReceipt")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i ethereum.Client) *MockClient {
	return &MockClient{
		BalanceAtFunc: &ClientBalanceAtFunc{
			defaultHook: i.BalanceAt,
		},
		BlockByHashFunc: &ClientBlockByHashFunc{
			defaultHook: i.BlockByHash,
		},
		BlockByNumberFunc: &ClientBlockByNumberFunc{
			defaultHook: i.BlockByNumber,
		},
		BlockNumberFunc: &ClientBlockNumberFunc{
			defaultHook: i.BlockNumber,
		},
		CallContractFunc: &ClientCallContractFunc{
			defaultHook: i.CallContract,
		},
		CodeAtFunc: &ClientCodeAtFunc{
			defaultHook: i.CodeAt,
		},
		EstimateGasFunc: &ClientEstimateGasFunc{
			defaultHook: i.EstimateGas,
		},
		FilterLogsFunc: &ClientFilterLogsFunc{
			defaultHook: i.FilterLogs,
		},
		HeaderByHashFunc: &ClientHeaderByHashFunc{
			defaultHook: i.HeaderByHash,
		},
		HeaderByNumberFunc: &ClientHeaderByNumberFunc{
			defaultHook: i.HeaderByNumber,
		},
		NonceAtFunc: &ClientNonceAtFunc{
			defaultHook: i.NonceAt,
		},
		PendingCodeAtFunc: &ClientPendingCodeAtFunc{
			defaultHook: i.PendingCodeAt,
		},
		PendingNonceAtFunc: &ClientPendingNonceAtFunc{
			defaultHook: i.PendingNonceAt,
		},
		SendTransactionFunc: &ClientSendTransactionFunc{
			defaultHook: i.SendTransaction,
		},
		StorageAtFunc: &ClientStorageAtFunc{
			defaultHook: i.StorageAt,
		},
		SubscribeFilterLogsFunc: &ClientSubscribeFilterLogsFunc{
			defaultHook: i.SubscribeFilterLogs,
		},
		SubscribeNewHeadFunc: &ClientSubscribeNewHeadFunc{
			defaultHook: i.SubscribeNewHead,
		},
		SuggestGasPriceFunc: &ClientSuggestGasPriceFunc{
			defaultHook: i.SuggestGasPrice,
		},
		SuggestGasTipCapFunc: &ClientSuggestGasTipCapFunc{
			defaultHook: i.SuggestGasTipCap,
		},
		TransactionByHashFunc: &ClientTransactionByHashFunc{
			defaultHook: i.TransactionByHash,
		},
		TransactionCountFunc: &ClientTransactionCountFunc{
			defaultHook: i.TransactionCount,
		},
		TransactionInBlockFunc: &ClientTransactionInBlockFunc{
			defaultHook: i.TransactionInBlock,
		},
		TransactionReceiptFunc: &ClientTransactionReceiptFunc{
			defaultHook: i.TransactionReceipt,
		},
	}
}

// ClientBalanceAtFunc describes the behavior when the BalanceAt method of
// the parent MockClient instance is invoked.
type ClientBalanceAtFunc struct {
	defaultHook func(context.Context, common.Address, *big.Int) (*big.Int, error)
	hooks       []func(context.Context, common.Address, *big.Int) (*big.Int, error)
	history     []ClientBalanceAtFuncCall
	mutex       sync.Mutex
}

// BalanceAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) BalanceAt(v0 context.Context, v1 common.Address, v2 *big.Int) (*big.Int, error) {
	r0, r1 := m.BalanceAtFunc.nextHook()(v0, v1, v2)
	m.BalanceAtFunc.appendCall(ClientBalanceAtFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BalanceAt method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBalanceAtFunc) SetDefaultHook(hook func(context.Context, common.Address, *big.Int) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BalanceAt method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBalanceAtFunc) PushHook(hook func(context.Context, common.Address, *big.Int) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBalanceAtFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBalanceAtFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(context.Context, common.Address, *big.Int) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ClientBalanceAtFunc) nextHook() func(context.Context, common.Address, *big.Int) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBalanceAtFunc) appendCall(r0 ClientBalanceAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBalanceAtFuncCall objects describing
// the invocations of this function.
func (f *ClientBalanceAtFunc) History() []ClientBalanceAtFuncCall {
	f.mutex.Lock()
	history := make([]ClientBalanceAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBalanceAtFuncCall is an object that describes an invocation of
// method BalanceAt on an instance of MockClient.
type ClientBalanceAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBalanceAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBalanceAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientBlockByHashFunc describes the behavior when the BlockByHash method
// of the parent MockClient instance is invoked.
type ClientBlockByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Block, error)
	hooks       []func(context.Context, common.Hash) (*types.Block, error)
	history     []ClientBlockByHashFuncCall
	mutex       sync.Mutex
}

// BlockByHash delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) BlockByHash(v0 context.Context, v1 common.Hash) (*types.Block, error) {
	r0, r1 := m.BlockByHashFunc.nextHook()(v0, v1)
	m.BlockByHashFunc.appendCall(ClientBlockByHashFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlockByHash method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBlockByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Block, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlockByHash method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBlockByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Block, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBlockByHashFunc) SetDefaultReturn(r0 *types.Block, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Block, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBlockByHashFunc) PushReturn(r0 *types.Block, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Block, error) {
		return r0, r1
	})
}

func (f *ClientBlockByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Block, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBlockByHashFunc) appendCall(r0 ClientBlockByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBlockByHashFuncCall objects
// describing the invocations of this function.
func (f *ClientBlockByHashFunc) History() []ClientBlockByHashFuncCall {
	f.mutex.Lock()
	history := make([]ClientBlockByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBlockByHashFuncCall is an object that describes an invocation of
// method BlockByHash on an instance of MockClient.
type ClientBlockByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Block
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBlockByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBlockByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientBlockByNumberFunc describes the behavior when the BlockByNumber
// method of the parent MockClient instance is invoked.
type ClientBlockByNumberFunc struct {
	defaultHook func(context.Context, *big.Int) (*types.Block, error)
	hooks       []func(context.Context, *big.Int) (*types.Block, error)
	history     []ClientBlockByNumberFuncCall
	mutex       sync.Mutex
}

// BlockByNumber delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) BlockByNumber(v0 context.Context, v1 *big.Int) (*types.Block, error) {
	r0, r1 := m.BlockByNumberFunc.nextHook()(v0, v1)
	m.BlockByNumberFunc.appendCall(ClientBlockByNumberFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlockByNumber method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBlockByNumberFunc) SetDefaultHook(hook func(context.Context, *big.Int) (*types.Block, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlockByNumber method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBlockByNumberFunc) PushHook(hook func(context.Context, *big.Int) (*types.Block, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBlockByNumberFunc) SetDefaultReturn(r0 *types.Block, r1 error) {
	f.SetDefaultHook(func(context.Context, *big.Int) (*types.Block, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBlockByNumberFunc) PushReturn(r0 *types.Block, r1 error) {
	f.PushHook(func(context.Context, *big.Int) (*types.Block, error) {
		return r0, r1
	})
}

func (f *ClientBlockByNumberFunc) nextHook() func(context.Context, *big.Int) (*types.Block, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBlockByNumberFunc) appendCall(r0 ClientBlockByNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBlockByNumberFuncCall objects
// describing the invocations of this function.
func (f *ClientBlockByNumberFunc) History() []ClientBlockByNumberFuncCall {
	f.mutex.Lock()
	history := make([]ClientBlockByNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBlockByNumberFuncCall is an object that describes an invocation of
// method BlockByNumber on an instance of MockClient.
type ClientBlockByNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Block
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBlockByNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBlockByNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientBlockNumberFunc describes the behavior when the BlockNumber method
// of the parent MockClient instance is invoked.
type ClientBlockNumberFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []ClientBlockNumberFuncCall
	mutex       sync.Mutex
}

// BlockNumber delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) BlockNumber(v0 context.Context) (uint64, error) {
	r0, r1 := m.BlockNumberFunc.nextHook()(v0)
	m.BlockNumberFunc.appendCall(ClientBlockNumberFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlockNumber method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBlockNumberFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlockNumber method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBlockNumberFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBlockNumberFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBlockNumberFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientBlockNumberFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBlockNumberFunc) appendCall(r0 ClientBlockNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBlockNumberFuncCall objects
// describing the invocations of this function.
func (f *ClientBlockNumberFunc) History() []ClientBlockNumberFuncCall {
	f.mutex.Lock()
	history := make([]ClientBlockNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBlockNumberFuncCall is an object that describes an invocation of
// method BlockNumber on an instance of MockClient.
type ClientBlockNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBlockNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBlockNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCallContractFunc describes the behavior when the CallContract
// method of the parent MockClient instance is invoked.
type ClientCallContractFunc struct {
	defaultHook func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)
	hooks       []func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)
	history     []ClientCallContractFuncCall
	mutex       sync.Mutex
}

// CallContract delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) CallContract(v0 context.Context, v1 goethereum.CallMsg, v2 *big.Int) ([]byte, error) {
	r0, r1 := m.CallContractFunc.nextHook()(v0, v1, v2)
	m.CallContractFunc.appendCall(ClientCallContractFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CallContract method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCallContractFunc) SetDefaultHook(hook func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CallContract method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCallContractFunc) PushHook(hook func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCallContractFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCallContractFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

func (f *ClientCallContractFunc) nextHook() func(context.Context, goethereum.CallMsg, *big.Int) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCallContractFunc) appendCall(r0 ClientCallContractFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCallContractFuncCall objects
// describing the invocations of this function.
func (f *ClientCallContractFunc) History() []ClientCallContractFuncCall {
	f.mutex.Lock()
	history := make([]ClientCallContractFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCallContractFuncCall is an object that describes an invocation of
// method CallContract on an instance of MockClient.
type ClientCallContractFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.CallMsg
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCallContractFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCallContractFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCodeAtFunc describes the behavior when the CodeAt method of the
// parent MockClient instance is invoked.
type ClientCodeAtFunc struct {
	defaultHook func(context.Context, common.Address, *big.Int) ([]byte, error)
	hooks       []func(context.Context, common.Address, *big.Int) ([]byte, error)
	history     []ClientCodeAtFuncCall
	mutex       sync.Mutex
}

// CodeAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) CodeAt(v0 context.Context, v1 common.Address, v2 *big.Int) ([]byte, error) {
	r0, r1 := m.CodeAtFunc.nextHook()(v0, v1, v2)
	m.CodeAtFunc.appendCall(ClientCodeAtFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CodeAt method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCodeAtFunc) SetDefaultHook(hook func(context.Context, common.Address, *big.Int) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeAt method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientCodeAtFunc) PushHook(hook func(context.Context, common.Address, *big.Int) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCodeAtFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCodeAtFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, common.Address, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

func (f *ClientCodeAtFunc) nextHook() func(context.Context, common.Address, *big.Int) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCodeAtFunc) appendCall(r0 ClientCodeAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCodeAtFuncCall objects describing the
// invocations of this function.
func (f *ClientCodeAtFunc) History() []ClientCodeAtFuncCall {
	f.mutex.Lock()
	history := make([]ClientCodeAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCodeAtFuncCall is an object that describes an invocation of method
// CodeAt on an instance of MockClient.
type ClientCodeAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCodeAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCodeAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientEstimateGasFunc describes the behavior when the EstimateGas method
// of the parent MockClient instance is invoked.
type ClientEstimateGasFunc struct {
	defaultHook func(context.Context, goethereum.CallMsg) (uint64, error)
	hooks       []func(context.Context, goethereum.CallMsg) (uint64, error)
	history     []ClientEstimateGasFuncCall
	mutex       sync.Mutex
}

// EstimateGas delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) EstimateGas(v0 context.Context, v1 goethereum.CallMsg) (uint64, error) {
	r0, r1 := m.EstimateGasFunc.nextHook()(v0, v1)
	m.EstimateGasFunc.appendCall(ClientEstimateGasFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EstimateGas method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientEstimateGasFunc) SetDefaultHook(hook func(context.Context, goethereum.CallMsg) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EstimateGas method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientEstimateGasFunc) PushHook(hook func(context.Context, goethereum.CallMsg) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientEstimateGasFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.CallMsg) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientEstimateGasFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, goethereum.CallMsg) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientEstimateGasFunc) nextHook() func(context.Context, goethereum.CallMsg) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientEstimateGasFunc) appendCall(r0 ClientEstimateGasFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientEstimateGasFuncCall objects
// describing the invocations of this function.
func (f *ClientEstimateGasFunc) History() []ClientEstimateGasFuncCall {
	f.mutex.Lock()
	history := make([]ClientEstimateGasFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientEstimateGasFuncCall is an object that describes an invocation of
// method EstimateGas on an instance of MockClient.
type ClientEstimateGasFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.CallMsg
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientEstimateGasFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientEstimateGasFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientFilterLogsFunc describes the behavior when the FilterLogs method of
// the parent MockClient instance is invoked.
type ClientFilterLogsFunc struct {
	defaultHook func(context.Context, goethereum.FilterQuery) ([]types.Log, error)
	hooks       []func(context.Context, goethereum.FilterQuery) ([]types.Log, error)
	history     []ClientFilterLogsFuncCall
	mutex       sync.Mutex
}

// FilterLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) FilterLogs(v0 context.Context, v1 goethereum.FilterQuery) ([]types.Log, error) {
	r0, r1 := m.FilterLogsFunc.nextHook()(v0, v1)
	m.FilterLogsFunc.appendCall(ClientFilterLogsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FilterLogs method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientFilterLogsFunc) SetDefaultHook(hook func(context.Context, goethereum.FilterQuery) ([]types.Log, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FilterLogs method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientFilterLogsFunc) PushHook(hook func(context.Context, goethereum.FilterQuery) ([]types.Log, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientFilterLogsFunc) SetDefaultReturn(r0 []types.Log, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientFilterLogsFunc) PushReturn(r0 []types.Log, r1 error) {
	f.PushHook(func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
		return r0, r1
	})
}

func (f *ClientFilterLogsFunc) nextHook() func(context.Context, goethereum.FilterQuery) ([]types.Log, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientFilterLogsFunc) appendCall(r0 ClientFilterLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientFilterLogsFuncCall objects describing
// the invocations of this function.
func (f *ClientFilterLogsFunc) History() []ClientFilterLogsFuncCall {
	f.mutex.Lock()
	history := make([]ClientFilterLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientFilterLogsFuncCall is an object that describes an invocation of
// method FilterLogs on an instance of MockClient.
type ClientFilterLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.FilterQuery
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Log
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientFilterLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientFilterLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientHeaderByHashFunc describes the behavior when the HeaderByHash
// method of the parent MockClient instance is invoked.
type ClientHeaderByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Header, error)
	hooks       []func(context.Context, common.Hash) (*types.Header, error)
	history     []ClientHeaderByHashFuncCall
	mutex       sync.Mutex
}

// HeaderByHash delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) HeaderByHash(v0 context.Context, v1 common.Hash) (*types.Header, error) {
	r0, r1 := m.HeaderByHashFunc.nextHook()(v0, v1)
	m.HeaderByHashFunc.appendCall(ClientHeaderByHashFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HeaderByHash method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientHeaderByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeaderByHash method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientHeaderByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientHeaderByHashFunc) SetDefaultReturn(r0 *types.Header, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Header, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientHeaderByHashFunc) PushReturn(r0 *types.Header, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Header, error) {
		return r0, r1
	})
}

func (f *ClientHeaderByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientHeaderByHashFunc) appendCall(r0 ClientHeaderByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientHeaderByHashFuncCall objects
// describing the invocations of this function.
func (f *ClientHeaderByHashFunc) History() []ClientHeaderByHashFuncCall {
	f.mutex.Lock()
	history := make([]ClientHeaderByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientHeaderByHashFuncCall is an object that describes an invocation of
// method HeaderByHash on an instance of MockClient.
type ClientHeaderByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Header
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientHeaderByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientHeaderByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientHeaderByNumberFunc describes the behavior when the HeaderByNumber
// method of the parent MockClient instance is invoked.
type ClientHeaderByNumberFunc struct {
	defaultHook func(context.Context, *big.Int) (*types.Header, error)
	hooks       []func(context.Context, *big.Int) (*types.Header, error)
	history     []ClientHeaderByNumberFuncCall
	mutex       sync.Mutex
}

// HeaderByNumber delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) HeaderByNumber(v0 context.Context, v1 *big.Int) (*types.Header, error) {
	r0, r1 := m.HeaderByNumberFunc.nextHook()(v0, v1)
	m.HeaderByNumberFunc.appendCall(ClientHeaderByNumberFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HeaderByNumber
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientHeaderByNumberFunc) SetDefaultHook(hook func(context.Context, *big.Int) (*types.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeaderByNumber method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientHeaderByNumberFunc) PushHook(hook func(context.Context, *big.Int) (*types.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientHeaderByNumberFunc) SetDefaultReturn(r0 *types.Header, r1 error) {
	f.SetDefaultHook(func(context.Context, *big.Int) (*types.Header, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientHeaderByNumberFunc) PushReturn(r0 *types.Header, r1 error) {
	f.PushHook(func(context.Context, *big.Int) (*types.Header, error) {
		return r0, r1
	})
}

func (f *ClientHeaderByNumberFunc) nextHook() func(context.Context, *big.Int) (*types.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientHeaderByNumberFunc) appendCall(r0 ClientHeaderByNumberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientHeaderByNumberFuncCall objects
// describing the invocations of this function.
func (f *ClientHeaderByNumberFunc) History() []ClientHeaderByNumberFuncCall {
	f.mutex.Lock()
	history := make([]ClientHeaderByNumberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientHeaderByNumberFuncCall is an object that describes an invocation of
// method HeaderByNumber on an instance of MockClient.
type ClientHeaderByNumberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Header
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientHeaderByNumberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientHeaderByNumberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientNonceAtFunc describes the behavior when the NonceAt method of the
// parent MockClient instance is invoked.
type ClientNonceAtFunc struct {
	defaultHook func(context.Context, common.Address, *big.Int) (uint64, error)
	hooks       []func(context.Context, common.Address, *big.Int) (uint64, error)
	history     []ClientNonceAtFuncCall
	mutex       sync.Mutex
}

// NonceAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) NonceAt(v0 context.Context, v1 common.Address, v2 *big.Int) (uint64, error) {
	r0, r1 := m.NonceAtFunc.nextHook()(v0, v1, v2)
	m.NonceAtFunc.appendCall(ClientNonceAtFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NonceAt method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientNonceAtFunc) SetDefaultHook(hook func(context.Context, common.Address, *big.Int) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NonceAt method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientNonceAtFunc) PushHook(hook func(context.Context, common.Address, *big.Int) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientNonceAtFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, *big.Int) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientNonceAtFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, common.Address, *big.Int) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientNonceAtFunc) nextHook() func(context.Context, common.Address, *big.Int) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientNonceAtFunc) appendCall(r0 ClientNonceAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientNonceAtFuncCall objects describing
// the invocations of this function.
func (f *ClientNonceAtFunc) History() []ClientNonceAtFuncCall {
	f.mutex.Lock()
	history := make([]ClientNonceAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientNonceAtFuncCall is an object that describes an invocation of method
// NonceAt on an instance of MockClient.
type ClientNonceAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientNonceAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientNonceAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPendingCodeAtFunc describes the behavior when the PendingCodeAt
// method of the parent MockClient instance is invoked.
type ClientPendingCodeAtFunc struct {
	defaultHook func(context.Context, common.Address) ([]byte, error)
	hooks       []func(context.Context, common.Address) ([]byte, error)
	history     []ClientPendingCodeAtFuncCall
	mutex       sync.Mutex
}

// PendingCodeAt delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) PendingCodeAt(v0 context.Context, v1 common.Address) ([]byte, error) {
	r0, r1 := m.PendingCodeAtFunc.nextHook()(v0, v1)
	m.PendingCodeAtFunc.appendCall(ClientPendingCodeAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PendingCodeAt method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientPendingCodeAtFunc) SetDefaultHook(hook func(context.Context, common.Address) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PendingCodeAt method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientPendingCodeAtFunc) PushHook(hook func(context.Context, common.Address) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPendingCodeAtFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPendingCodeAtFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, common.Address) ([]byte, error) {
		return r0, r1
	})
}

func (f *ClientPendingCodeAtFunc) nextHook() func(context.Context, common.Address) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPendingCodeAtFunc) appendCall(r0 ClientPendingCodeAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPendingCodeAtFuncCall objects
// describing the invocations of this function.
func (f *ClientPendingCodeAtFunc) History() []ClientPendingCodeAtFuncCall {
	f.mutex.Lock()
	history := make([]ClientPendingCodeAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPendingCodeAtFuncCall is an object that describes an invocation of
// method PendingCodeAt on an instance of MockClient.
type ClientPendingCodeAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPendingCodeAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPendingCodeAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPendingNonceAtFunc describes the behavior when the PendingNonceAt
// method of the parent MockClient instance is invoked.
type ClientPendingNonceAtFunc struct {
	defaultHook func(context.Context, common.Address) (uint64, error)
	hooks       []func(context.Context, common.Address) (uint64, error)
	history     []ClientPendingNonceAtFuncCall
	mutex       sync.Mutex
}

// PendingNonceAt delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) PendingNonceAt(v0 context.Context, v1 common.Address) (uint64, error) {
	r0, r1 := m.PendingNonceAtFunc.nextHook()(v0, v1)
	m.PendingNonceAtFunc.appendCall(ClientPendingNonceAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PendingNonceAt
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientPendingNonceAtFunc) SetDefaultHook(hook func(context.Context, common.Address) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PendingNonceAt method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientPendingNonceAtFunc) PushHook(hook func(context.Context, common.Address) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPendingNonceAtFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPendingNonceAtFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, common.Address) (uint64, error) {
		return r0, r1
	})
}

func (f *ClientPendingNonceAtFunc) nextHook() func(context.Context, common.Address) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPendingNonceAtFunc) appendCall(r0 ClientPendingNonceAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPendingNonceAtFuncCall objects
// describing the invocations of this function.
func (f *ClientPendingNonceAtFunc) History() []ClientPendingNonceAtFuncCall {
	f.mutex.Lock()
	history := make([]ClientPendingNonceAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPendingNonceAtFuncCall is an object that describes an invocation of
// method PendingNonceAt on an instance of MockClient.
type ClientPendingNonceAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPendingNonceAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPendingNonceAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSendTransactionFunc describes the behavior when the SendTransaction
// method of the parent MockClient instance is invoked.
type ClientSendTransactionFunc struct {
	defaultHook func(context.Context, *types.Transaction) error
	hooks       []func(context.Context, *types.Transaction) error
	history     []ClientSendTransactionFuncCall
	mutex       sync.Mutex
}

// SendTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SendTransaction(v0 context.Context, v1 *types.Transaction) error {
	r0 := m.SendTransactionFunc.nextHook()(v0, v1)
	m.SendTransactionFunc.appendCall(ClientSendTransactionFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendTransaction
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSendTransactionFunc) SetDefaultHook(hook func(context.Context, *types.Transaction) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendTransaction method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSendTransactionFunc) PushHook(hook func(context.Context, *types.Transaction) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSendTransactionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.Transaction) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSendTransactionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.Transaction) error {
		return r0
	})
}

func (f *ClientSendTransactionFunc) nextHook() func(context.Context, *types.Transaction) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSendTransactionFunc) appendCall(r0 ClientSendTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSendTransactionFuncCall objects
// describing the invocations of this function.
func (f *ClientSendTransactionFunc) History() []ClientSendTransactionFuncCall {
	f.mutex.Lock()
	history := make([]ClientSendTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSendTransactionFuncCall is an object that describes an invocation
// of method SendTransaction on an instance of MockClient.
type ClientSendTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Transaction
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSendTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSendTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientStorageAtFunc describes the behavior when the StorageAt method of
// the parent MockClient instance is invoked.
type ClientStorageAtFunc struct {
	defaultHook func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)
	hooks       []func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)
	history     []ClientStorageAtFuncCall
	mutex       sync.Mutex
}

// StorageAt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) StorageAt(v0 context.Context, v1 common.Address, v2 common.Hash, v3 *big.Int) ([]byte, error) {
	r0, r1 := m.StorageAtFunc.nextHook()(v0, v1, v2, v3)
	m.StorageAtFunc.appendCall(ClientStorageAtFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StorageAt method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientStorageAtFunc) SetDefaultHook(hook func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StorageAt method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientStorageAtFunc) PushHook(hook func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientStorageAtFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientStorageAtFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
		return r0, r1
	})
}

func (f *ClientStorageAtFunc) nextHook() func(context.Context, common.Address, common.Hash, *big.Int) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientStorageAtFunc) appendCall(r0 ClientStorageAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientStorageAtFuncCall objects describing
// the invocations of this function.
func (f *ClientStorageAtFunc) History() []ClientStorageAtFuncCall {
	f.mutex.Lock()
	history := make([]ClientStorageAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientStorageAtFuncCall is an object that describes an invocation of
// method StorageAt on an instance of MockClient.
type ClientStorageAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 common.Hash
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientStorageAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientStorageAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSubscribeFilterLogsFunc describes the behavior when the
// SubscribeFilterLogs method of the parent MockClient instance is invoked.
type ClientSubscribeFilterLogsFunc struct {
	defaultHook func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)
	hooks       []func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)
	history     []ClientSubscribeFilterLogsFuncCall
	mutex       sync.Mutex
}

// SubscribeFilterLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SubscribeFilterLogs(v0 context.Context, v1 goethereum.FilterQuery, v2 chan<- types.Log) (goethereum.Subscription, error) {
	r0, r1 := m.SubscribeFilterLogsFunc.nextHook()(v0, v1, v2)
	m.SubscribeFilterLogsFunc.appendCall(ClientSubscribeFilterLogsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubscribeFilterLogs
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSubscribeFilterLogsFunc) SetDefaultHook(hook func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubscribeFilterLogs method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientSubscribeFilterLogsFunc) PushHook(hook func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSubscribeFilterLogsFunc) SetDefaultReturn(r0 goethereum.Subscription, r1 error) {
	f.SetDefaultHook(func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSubscribeFilterLogsFunc) PushReturn(r0 goethereum.Subscription, r1 error) {
	f.PushHook(func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
		return r0, r1
	})
}

func (f *ClientSubscribeFilterLogsFunc) nextHook() func(context.Context, goethereum.FilterQuery, chan<- types.Log) (goethereum.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSubscribeFilterLogsFunc) appendCall(r0 ClientSubscribeFilterLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSubscribeFilterLogsFuncCall objects
// describing the invocations of this function.
func (f *ClientSubscribeFilterLogsFunc) History() []ClientSubscribeFilterLogsFuncCall {
	f.mutex.Lock()
	history := make([]ClientSubscribeFilterLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSubscribeFilterLogsFuncCall is an object that describes an
// invocation of method SubscribeFilterLogs on an instance of MockClient.
type ClientSubscribeFilterLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 goethereum.FilterQuery
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 chan<- types.Log
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 goethereum.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSubscribeFilterLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSubscribeFilterLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSubscribeNewHeadFunc describes the behavior when the
// SubscribeNewHead method of the parent MockClient instance is invoked.
type ClientSubscribeNewHeadFunc struct {
	defaultHook func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)
	hooks       []func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)
	history     []ClientSubscribeNewHeadFuncCall
	mutex       sync.Mutex
}

// SubscribeNewHead delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SubscribeNewHead(v0 context.Context, v1 chan<- *types.Header) (goethereum.Subscription, error) {
	r0, r1 := m.SubscribeNewHeadFunc.nextHook()(v0, v1)
	m.SubscribeNewHeadFunc.appendCall(ClientSubscribeNewHeadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubscribeNewHead
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSubscribeNewHeadFunc) SetDefaultHook(hook func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubscribeNewHead method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientSubscribeNewHeadFunc) PushHook(hook func(context.Context, chan<- *types.Header) (goethereum.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSubscribeNewHeadFunc) SetDefaultReturn(r0 goethereum.Subscription, r1 error) {
	f.SetDefaultHook(func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSubscribeNewHeadFunc) PushReturn(r0 goethereum.Subscription, r1 error) {
	f.PushHook(func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
		return r0, r1
	})
}

func (f *ClientSubscribeNewHeadFunc) nextHook() func(context.Context, chan<- *types.Header) (goethereum.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSubscribeNewHeadFunc) appendCall(r0 ClientSubscribeNewHeadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSubscribeNewHeadFuncCall objects
// describing the invocations of this function.
func (f *ClientSubscribeNewHeadFunc) History() []ClientSubscribeNewHeadFuncCall {
	f.mutex.Lock()
	history := make([]ClientSubscribeNewHeadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSubscribeNewHeadFuncCall is an object that describes an invocation
// of method SubscribeNewHead on an instance of MockClient.
type ClientSubscribeNewHeadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan<- *types.Header
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 goethereum.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSubscribeNewHeadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSubscribeNewHeadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSuggestGasPriceFunc describes the behavior when the SuggestGasPrice
// method of the parent MockClient instance is invoked.
type ClientSuggestGasPriceFunc struct {
	defaultHook func(context.Context) (*big.Int, error)
	hooks       []func(context.Context) (*big.Int, error)
	history     []ClientSuggestGasPriceFuncCall
	mutex       sync.Mutex
}

// SuggestGasPrice delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SuggestGasPrice(v0 context.Context) (*big.Int, error) {
	r0, r1 := m.SuggestGasPriceFunc.nextHook()(v0)
	m.SuggestGasPriceFunc.appendCall(ClientSuggestGasPriceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SuggestGasPrice
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSuggestGasPriceFunc) SetDefaultHook(hook func(context.Context) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SuggestGasPrice method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSuggestGasPriceFunc) PushHook(hook func(context.Context) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSuggestGasPriceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSuggestGasPriceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ClientSuggestGasPriceFunc) nextHook() func(context.Context) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSuggestGasPriceFunc) appendCall(r0 ClientSuggestGasPriceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSuggestGasPriceFuncCall objects
// describing the invocations of this function.
func (f *ClientSuggestGasPriceFunc) History() []ClientSuggestGasPriceFuncCall {
	f.mutex.Lock()
	history := make([]ClientSuggestGasPriceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSuggestGasPriceFuncCall is an object that describes an invocation
// of method SuggestGasPrice on an instance of MockClient.
type ClientSuggestGasPriceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSuggestGasPriceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSuggestGasPriceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSuggestGasTipCapFunc describes the behavior when the
// SuggestGasTipCap method of the parent MockClient instance is invoked.
type ClientSuggestGasTipCapFunc struct {
	defaultHook func(context.Context) (*big.Int, error)
	hooks       []func(context.Context) (*big.Int, error)
	history     []ClientSuggestGasTipCapFuncCall
	mutex       sync.Mutex
}

// SuggestGasTipCap delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) SuggestGasTipCap(v0 context.Context) (*big.Int, error) {
	r0, r1 := m.SuggestGasTipCapFunc.nextHook()(v0)
	m.SuggestGasTipCapFunc.appendCall(ClientSuggestGasTipCapFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SuggestGasTipCap
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientSuggestGasTipCapFunc) SetDefaultHook(hook func(context.Context) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SuggestGasTipCap method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientSuggestGasTipCapFunc) PushHook(hook func(context.Context) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSuggestGasTipCapFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSuggestGasTipCapFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(context.Context) (*big.Int, error) {
		return r0, r1
	})
}

func (f *ClientSuggestGasTipCapFunc) nextHook() func(context.Context) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSuggestGasTipCapFunc) appendCall(r0 ClientSuggestGasTipCapFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSuggestGasTipCapFuncCall objects
// describing the invocations of this function.
func (f *ClientSuggestGasTipCapFunc) History() []ClientSuggestGasTipCapFuncCall {
	f.mutex.Lock()
	history := make([]ClientSuggestGasTipCapFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSuggestGasTipCapFuncCall is an object that describes an invocation
// of method SuggestGasTipCap on an instance of MockClient.
type ClientSuggestGasTipCapFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSuggestGasTipCapFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSuggestGasTipCapFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientTransactionByHashFunc describes the behavior when the
// TransactionByHash method of the parent MockClient instance is invoked.
type ClientTransactionByHashFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Transaction, bool, error)
	hooks       []func(context.Context, common.Hash) (*types.Transaction, bool, error)
	history     []ClientTransactionByHashFuncCall
	mutex       sync.Mutex
}

// TransactionByHash delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) TransactionByHash(v0 context.Context, v1 common.Hash) (*types.Transaction, bool, error) {
	r0, r1, r2 := m.TransactionByHashFunc.nextHook()(v0, v1)
	m.TransactionByHashFunc.appendCall(ClientTransactionByHashFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the TransactionByHash
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientTransactionByHashFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionByHash method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientTransactionByHashFunc) PushHook(hook func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientTransactionByHashFunc) SetDefaultReturn(r0 *types.Transaction, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Transaction, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientTransactionByHashFunc) PushReturn(r0 *types.Transaction, r1 bool, r2 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Transaction, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientTransactionByHashFunc) nextHook() func(context.Context, common.Hash) (*types.Transaction, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientTransactionByHashFunc) appendCall(r0 ClientTransactionByHashFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientTransactionByHashFuncCall objects
// describing the invocations of this function.
func (f *ClientTransactionByHashFunc) History() []ClientTransactionByHashFuncCall {
	f.mutex.Lock()
	history := make([]ClientTransactionByHashFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientTransactionByHashFuncCall is an object that describes an invocation
// of method TransactionByHash on an instance of MockClient.
type ClientTransactionByHashFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientTransactionByHashFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientTransactionByHashFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientTransactionCountFunc describes the behavior when the
// TransactionCount method of the parent MockClient instance is invoked.
type ClientTransactionCountFunc struct {
	defaultHook func(context.Context, common.Hash) (uint, error)
	hooks       []func(context.Context, common.Hash) (uint, error)
	history     []ClientTransactionCountFuncCall
	mutex       sync.Mutex
}

// TransactionCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) TransactionCount(v0 context.Context, v1 common.Hash) (uint, error) {
	r0, r1 := m.TransactionCountFunc.nextHook()(v0, v1)
	m.TransactionCountFunc.appendCall(ClientTransactionCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactionCount
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientTransactionCountFunc) SetDefaultHook(hook func(context.Context, common.Hash) (uint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionCount method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientTransactionCountFunc) PushHook(hook func(context.Context, common.Hash) (uint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientTransactionCountFunc) SetDefaultReturn(r0 uint, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (uint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientTransactionCountFunc) PushReturn(r0 uint, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (uint, error) {
		return r0, r1
	})
}

func (f *ClientTransactionCountFunc) nextHook() func(context.Context, common.Hash) (uint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientTransactionCountFunc) appendCall(r0 ClientTransactionCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientTransactionCountFuncCall objects
// describing the invocations of this function.
func (f *ClientTransactionCountFunc) History() []ClientTransactionCountFuncCall {
	f.mutex.Lock()
	history := make([]ClientTransactionCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientTransactionCountFuncCall is an object that describes an invocation
// of method TransactionCount on an instance of MockClient.
type ClientTransactionCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientTransactionCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientTransactionCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientTransactionInBlockFunc describes the behavior when the
// TransactionInBlock method of the parent MockClient instance is invoked.
type ClientTransactionInBlockFunc struct {
	defaultHook func(context.Context, common.Hash, uint) (*types.Transaction, error)
	hooks       []func(context.Context, common.Hash, uint) (*types.Transaction, error)
	history     []ClientTransactionInBlockFuncCall
	mutex       sync.Mutex
}

// TransactionInBlock delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) TransactionInBlock(v0 context.Context, v1 common.Hash, v2 uint) (*types.Transaction, error) {
	r0, r1 := m.TransactionInBlockFunc.nextHook()(v0, v1, v2)
	m.TransactionInBlockFunc.appendCall(ClientTransactionInBlockFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactionInBlock
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientTransactionInBlockFunc) SetDefaultHook(hook func(context.Context, common.Hash, uint) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionInBlock method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientTransactionInBlockFunc) PushHook(hook func(context.Context, common.Hash, uint) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientTransactionInBlockFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash, uint) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientTransactionInBlockFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(context.Context, common.Hash, uint) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *ClientTransactionInBlockFunc) nextHook() func(context.Context, common.Hash, uint) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientTransactionInBlockFunc) appendCall(r0 ClientTransactionInBlockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientTransactionInBlockFuncCall objects
// describing the invocations of this function.
func (f *ClientTransactionInBlockFunc) History() []ClientTransactionInBlockFuncCall {
	f.mutex.Lock()
	history := make([]ClientTransactionInBlockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientTransactionInBlockFuncCall is an object that describes an
// invocation of method TransactionInBlock on an instance of MockClient.
type ClientTransactionInBlockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientTransactionInBlockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientTransactionInBlockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientTransactionReceiptFunc describes the behavior when the
// TransactionReceipt method of the parent MockClient instance is invoked.
type ClientTransactionReceiptFunc struct {
	defaultHook func(context.Context, common.Hash) (*types.Receipt, error)
	hooks       []func(context.Context, common.Hash) (*types.Receipt, error)
	history     []ClientTransactionReceiptFuncCall
	mutex       sync.Mutex
}

// TransactionReceipt delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) TransactionReceipt(v0 context.Context, v1 common.Hash) (*types.Receipt, error) {
	r0, r1 := m.TransactionReceiptFunc.nextHook()(v0, v1)
	m.TransactionReceiptFunc.appendCall(ClientTransactionReceiptFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactionReceipt
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientTransactionReceiptFunc) SetDefaultHook(hook func(context.Context, common.Hash) (*types.Receipt, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactionReceipt method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientTransactionReceiptFunc) PushHook(hook func(context.Context, common.Hash) (*types.Receipt, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientTransactionReceiptFunc) SetDefaultReturn(r0 *types.Receipt, r1 error) {
	f.SetDefaultHook(func(context.Context, common.Hash) (*types.Receipt, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientTransactionReceiptFunc) PushReturn(r0 *types.Receipt, r1 error) {
	f.PushHook(func(context.Context, common.Hash) (*types.Receipt, error) {
		return r0, r1
	})
}

func (f *ClientTransactionReceiptFunc) nextHook() func(context.Context, common.Hash) (*types.Receipt, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientTransactionReceiptFunc) appendCall(r0 ClientTransactionReceiptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientTransactionReceiptFuncCall objects
// describing the invocations of this function.
func (f *ClientTransactionReceiptFunc) History() []ClientTransactionReceiptFuncCall {
	f.mutex.Lock()
	history := make([]ClientTransactionReceiptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientTransactionReceiptFuncCall is an object that describes an
// invocation of method TransactionReceipt on an instance of MockClient.
type ClientTransactionReceiptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Hash
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Receipt
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientTransactionReceiptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientTransactionReceiptFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockContracts is a mock implementation of the Contracts interface (from
// the package github.com/MadBase/MadNet/blockchain/ethereum) used for unit
// testing.
type MockContracts struct {
	// ATokenFunc is an instance of a mock function object controlling the
	// behavior of the method AToken.
	ATokenFunc *ContractsATokenFunc
	// ATokenAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ATokenAddress.
	ATokenAddressFunc *ContractsATokenAddressFunc
	// BTokenFunc is an instance of a mock function object controlling the
	// behavior of the method BToken.
	BTokenFunc *ContractsBTokenFunc
	// BTokenAddressFunc is an instance of a mock function object
	// controlling the behavior of the method BTokenAddress.
	BTokenAddressFunc *ContractsBTokenAddressFunc
	// ContractFactoryFunc is an instance of a mock function object
	// controlling the behavior of the method ContractFactory.
	ContractFactoryFunc *ContractsContractFactoryFunc
	// ContractFactoryAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ContractFactoryAddress.
	ContractFactoryAddressFunc *ContractsContractFactoryAddressFunc
	// EthdkgFunc is an instance of a mock function object controlling the
	// behavior of the method Ethdkg.
	EthdkgFunc *ContractsEthdkgFunc
	// EthdkgAddressFunc is an instance of a mock function object
	// controlling the behavior of the method EthdkgAddress.
	EthdkgAddressFunc *ContractsEthdkgAddressFunc
	// GovernanceFunc is an instance of a mock function object controlling
	// the behavior of the method Governance.
	GovernanceFunc *ContractsGovernanceFunc
	// GovernanceAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GovernanceAddress.
	GovernanceAddressFunc *ContractsGovernanceAddressFunc
	// LookupContractsFunc is an instance of a mock function object
	// controlling the behavior of the method LookupContracts.
	LookupContractsFunc *ContractsLookupContractsFunc
	// PublicStakingFunc is an instance of a mock function object
	// controlling the behavior of the method PublicStaking.
	PublicStakingFunc *ContractsPublicStakingFunc
	// PublicStakingAddressFunc is an instance of a mock function object
	// controlling the behavior of the method PublicStakingAddress.
	PublicStakingAddressFunc *ContractsPublicStakingAddressFunc
	// SnapshotsFunc is an instance of a mock function object controlling
	// the behavior of the method Snapshots.
	SnapshotsFunc *ContractsSnapshotsFunc
	// SnapshotsAddressFunc is an instance of a mock function object
	// controlling the behavior of the method SnapshotsAddress.
	SnapshotsAddressFunc *ContractsSnapshotsAddressFunc
	// ValidatorPoolFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorPool.
	ValidatorPoolFunc *ContractsValidatorPoolFunc
	// ValidatorPoolAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorPoolAddress.
	ValidatorPoolAddressFunc *ContractsValidatorPoolAddressFunc
	// ValidatorStakingFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorStaking.
	ValidatorStakingFunc *ContractsValidatorStakingFunc
	// ValidatorStakingAddressFunc is an instance of a mock function object
	// controlling the behavior of the method ValidatorStakingAddress.
	ValidatorStakingAddressFunc *ContractsValidatorStakingAddressFunc
}

// NewMockContracts creates a new mock of the Contracts interface. All
// methods return zero values for all results, unless overwritten.
func NewMockContracts() *MockContracts {
	return &MockContracts{
		ATokenFunc: &ContractsATokenFunc{
			defaultHook: func() bindings.IAToken {
				return nil
			},
		},
		ATokenAddressFunc: &ContractsATokenAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		BTokenFunc: &ContractsBTokenFunc{
			defaultHook: func() bindings.IBToken {
				return nil
			},
		},
		BTokenAddressFunc: &ContractsBTokenAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		ContractFactoryFunc: &ContractsContractFactoryFunc{
			defaultHook: func() bindings.IAliceNetFactory {
				return nil
			},
		},
		ContractFactoryAddressFunc: &ContractsContractFactoryAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		EthdkgFunc: &ContractsEthdkgFunc{
			defaultHook: func() bindings.IETHDKG {
				return nil
			},
		},
		EthdkgAddressFunc: &ContractsEthdkgAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		GovernanceFunc: &ContractsGovernanceFunc{
			defaultHook: func() bindings.IGovernance {
				return nil
			},
		},
		GovernanceAddressFunc: &ContractsGovernanceAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		LookupContractsFunc: &ContractsLookupContractsFunc{
			defaultHook: func(context.Context, common.Address) error {
				return nil
			},
		},
		PublicStakingFunc: &ContractsPublicStakingFunc{
			defaultHook: func() bindings.IPublicStaking {
				return nil
			},
		},
		PublicStakingAddressFunc: &ContractsPublicStakingAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		SnapshotsFunc: &ContractsSnapshotsFunc{
			defaultHook: func() bindings.ISnapshots {
				return nil
			},
		},
		SnapshotsAddressFunc: &ContractsSnapshotsAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		ValidatorPoolFunc: &ContractsValidatorPoolFunc{
			defaultHook: func() bindings.IValidatorPool {
				return nil
			},
		},
		ValidatorPoolAddressFunc: &ContractsValidatorPoolAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		ValidatorStakingFunc: &ContractsValidatorStakingFunc{
			defaultHook: func() bindings.IValidatorStaking {
				return nil
			},
		},
		ValidatorStakingAddressFunc: &ContractsValidatorStakingAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
	}
}

// NewStrictMockContracts creates a new mock of the Contracts interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockContracts() *MockContracts {
	return &MockContracts{
		ATokenFunc: &ContractsATokenFunc{
			defaultHook: func() bindings.IAToken {
				panic("unexpected invocation of MockContracts.AToken")
			},
		},
		ATokenAddressFunc: &ContractsATokenAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ATokenAddress")
			},
		},
		BTokenFunc: &ContractsBTokenFunc{
			defaultHook: func() bindings.IBToken {
				panic("unexpected invocation of MockContracts.BToken")
			},
		},
		BTokenAddressFunc: &ContractsBTokenAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.BTokenAddress")
			},
		},
		ContractFactoryFunc: &ContractsContractFactoryFunc{
			defaultHook: func() bindings.IAliceNetFactory {
				panic("unexpected invocation of MockContracts.ContractFactory")
			},
		},
		ContractFactoryAddressFunc: &ContractsContractFactoryAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ContractFactoryAddress")
			},
		},
		EthdkgFunc: &ContractsEthdkgFunc{
			defaultHook: func() bindings.IETHDKG {
				panic("unexpected invocation of MockContracts.Ethdkg")
			},
		},
		EthdkgAddressFunc: &ContractsEthdkgAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.EthdkgAddress")
			},
		},
		GovernanceFunc: &ContractsGovernanceFunc{
			defaultHook: func() bindings.IGovernance {
				panic("unexpected invocation of MockContracts.Governance")
			},
		},
		GovernanceAddressFunc: &ContractsGovernanceAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.GovernanceAddress")
			},
		},
		LookupContractsFunc: &ContractsLookupContractsFunc{
			defaultHook: func(context.Context, common.Address) error {
				panic("unexpected invocation of MockContracts.LookupContracts")
			},
		},
		PublicStakingFunc: &ContractsPublicStakingFunc{
			defaultHook: func() bindings.IPublicStaking {
				panic("unexpected invocation of MockContracts.PublicStaking")
			},
		},
		PublicStakingAddressFunc: &ContractsPublicStakingAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.PublicStakingAddress")
			},
		},
		SnapshotsFunc: &ContractsSnapshotsFunc{
			defaultHook: func() bindings.ISnapshots {
				panic("unexpected invocation of MockContracts.Snapshots")
			},
		},
		SnapshotsAddressFunc: &ContractsSnapshotsAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.SnapshotsAddress")
			},
		},
		ValidatorPoolFunc: &ContractsValidatorPoolFunc{
			defaultHook: func() bindings.IValidatorPool {
				panic("unexpected invocation of MockContracts.ValidatorPool")
			},
		},
		ValidatorPoolAddressFunc: &ContractsValidatorPoolAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ValidatorPoolAddress")
			},
		},
		ValidatorStakingFunc: &ContractsValidatorStakingFunc{
			defaultHook: func() bindings.IValidatorStaking {
				panic("unexpected invocation of MockContracts.ValidatorStaking")
			},
		},
		ValidatorStakingAddressFunc: &ContractsValidatorStakingAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockContracts.ValidatorStakingAddress")
			},
		},
	}
}

// NewMockContractsFrom creates a new mock of the MockContracts interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockContractsFrom(i ethereum.Contracts) *MockContracts {
	return &MockContracts{
		ATokenFunc: &ContractsATokenFunc{
			defaultHook: i.AToken,
		},
		ATokenAddressFunc: &ContractsATokenAddressFunc{
			defaultHook: i.ATokenAddress,
		},
		BTokenFunc: &ContractsBTokenFunc{
			defaultHook: i.BToken,
		},
		BTokenAddressFunc: &ContractsBTokenAddressFunc{
			defaultHook: i.BTokenAddress,
		},
		ContractFactoryFunc: &ContractsContractFactoryFunc{
			defaultHook: i.ContractFactory,
		},
		ContractFactoryAddressFunc: &ContractsContractFactoryAddressFunc{
			defaultHook: i.ContractFactoryAddress,
		},
		EthdkgFunc: &ContractsEthdkgFunc{
			defaultHook: i.Ethdkg,
		},
		EthdkgAddressFunc: &ContractsEthdkgAddressFunc{
			defaultHook: i.EthdkgAddress,
		},
		GovernanceFunc: &ContractsGovernanceFunc{
			defaultHook: i.Governance,
		},
		GovernanceAddressFunc: &ContractsGovernanceAddressFunc{
			defaultHook: i.GovernanceAddress,
		},
		LookupContractsFunc: &ContractsLookupContractsFunc{
			defaultHook: i.LookupContracts,
		},
		PublicStakingFunc: &ContractsPublicStakingFunc{
			defaultHook: i.PublicStaking,
		},
		PublicStakingAddressFunc: &ContractsPublicStakingAddressFunc{
			defaultHook: i.PublicStakingAddress,
		},
		SnapshotsFunc: &ContractsSnapshotsFunc{
			defaultHook: i.Snapshots,
		},
		SnapshotsAddressFunc: &ContractsSnapshotsAddressFunc{
			defaultHook: i.SnapshotsAddress,
		},
		ValidatorPoolFunc: &ContractsValidatorPoolFunc{
			defaultHook: i.ValidatorPool,
		},
		ValidatorPoolAddressFunc: &ContractsValidatorPoolAddressFunc{
			defaultHook: i.ValidatorPoolAddress,
		},
		ValidatorStakingFunc: &ContractsValidatorStakingFunc{
			defaultHook: i.ValidatorStaking,
		},
		ValidatorStakingAddressFunc: &ContractsValidatorStakingAddressFunc{
			defaultHook: i.ValidatorStakingAddress,
		},
	}
}

// ContractsATokenFunc describes the behavior when the AToken method of the
// parent MockContracts instance is invoked.
type ContractsATokenFunc struct {
	defaultHook func() bindings.IAToken
	hooks       []func() bindings.IAToken
	history     []ContractsATokenFuncCall
	mutex       sync.Mutex
}

// AToken delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) AToken() bindings.IAToken {
	r0 := m.ATokenFunc.nextHook()()
	m.ATokenFunc.appendCall(ContractsATokenFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AToken method of the
// parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsATokenFunc) SetDefaultHook(hook func() bindings.IAToken) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AToken method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsATokenFunc) PushHook(hook func() bindings.IAToken) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsATokenFunc) SetDefaultReturn(r0 bindings.IAToken) {
	f.SetDefaultHook(func() bindings.IAToken {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsATokenFunc) PushReturn(r0 bindings.IAToken) {
	f.PushHook(func() bindings.IAToken {
		return r0
	})
}

func (f *ContractsATokenFunc) nextHook() func() bindings.IAToken {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsATokenFunc) appendCall(r0 ContractsATokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsATokenFuncCall objects describing
// the invocations of this function.
func (f *ContractsATokenFunc) History() []ContractsATokenFuncCall {
	f.mutex.Lock()
	history := make([]ContractsATokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsATokenFuncCall is an object that describes an invocation of
// method AToken on an instance of MockContracts.
type ContractsATokenFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IAToken
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsATokenFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsATokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsATokenAddressFunc describes the behavior when the ATokenAddress
// method of the parent MockContracts instance is invoked.
type ContractsATokenAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsATokenAddressFuncCall
	mutex       sync.Mutex
}

// ATokenAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) ATokenAddress() common.Address {
	r0 := m.ATokenAddressFunc.nextHook()()
	m.ATokenAddressFunc.appendCall(ContractsATokenAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ATokenAddress method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsATokenAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ATokenAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsATokenAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsATokenAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsATokenAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsATokenAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsATokenAddressFunc) appendCall(r0 ContractsATokenAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsATokenAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsATokenAddressFunc) History() []ContractsATokenAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsATokenAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsATokenAddressFuncCall is an object that describes an invocation
// of method ATokenAddress on an instance of MockContracts.
type ContractsATokenAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsATokenAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsATokenAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsBTokenFunc describes the behavior when the BToken method of the
// parent MockContracts instance is invoked.
type ContractsBTokenFunc struct {
	defaultHook func() bindings.IBToken
	hooks       []func() bindings.IBToken
	history     []ContractsBTokenFuncCall
	mutex       sync.Mutex
}

// BToken delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) BToken() bindings.IBToken {
	r0 := m.BTokenFunc.nextHook()()
	m.BTokenFunc.appendCall(ContractsBTokenFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the BToken method of the
// parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsBTokenFunc) SetDefaultHook(hook func() bindings.IBToken) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BToken method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsBTokenFunc) PushHook(hook func() bindings.IBToken) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsBTokenFunc) SetDefaultReturn(r0 bindings.IBToken) {
	f.SetDefaultHook(func() bindings.IBToken {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsBTokenFunc) PushReturn(r0 bindings.IBToken) {
	f.PushHook(func() bindings.IBToken {
		return r0
	})
}

func (f *ContractsBTokenFunc) nextHook() func() bindings.IBToken {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsBTokenFunc) appendCall(r0 ContractsBTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsBTokenFuncCall objects describing
// the invocations of this function.
func (f *ContractsBTokenFunc) History() []ContractsBTokenFuncCall {
	f.mutex.Lock()
	history := make([]ContractsBTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsBTokenFuncCall is an object that describes an invocation of
// method BToken on an instance of MockContracts.
type ContractsBTokenFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IBToken
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsBTokenFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsBTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsBTokenAddressFunc describes the behavior when the BTokenAddress
// method of the parent MockContracts instance is invoked.
type ContractsBTokenAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsBTokenAddressFuncCall
	mutex       sync.Mutex
}

// BTokenAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) BTokenAddress() common.Address {
	r0 := m.BTokenAddressFunc.nextHook()()
	m.BTokenAddressFunc.appendCall(ContractsBTokenAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the BTokenAddress method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsBTokenAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BTokenAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsBTokenAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsBTokenAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsBTokenAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsBTokenAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsBTokenAddressFunc) appendCall(r0 ContractsBTokenAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsBTokenAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsBTokenAddressFunc) History() []ContractsBTokenAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsBTokenAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsBTokenAddressFuncCall is an object that describes an invocation
// of method BTokenAddress on an instance of MockContracts.
type ContractsBTokenAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsBTokenAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsBTokenAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsContractFactoryFunc describes the behavior when the
// ContractFactory method of the parent MockContracts instance is invoked.
type ContractsContractFactoryFunc struct {
	defaultHook func() bindings.IAliceNetFactory
	hooks       []func() bindings.IAliceNetFactory
	history     []ContractsContractFactoryFuncCall
	mutex       sync.Mutex
}

// ContractFactory delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) ContractFactory() bindings.IAliceNetFactory {
	r0 := m.ContractFactoryFunc.nextHook()()
	m.ContractFactoryFunc.appendCall(ContractsContractFactoryFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ContractFactory
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsContractFactoryFunc) SetDefaultHook(hook func() bindings.IAliceNetFactory) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContractFactory method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsContractFactoryFunc) PushHook(hook func() bindings.IAliceNetFactory) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsContractFactoryFunc) SetDefaultReturn(r0 bindings.IAliceNetFactory) {
	f.SetDefaultHook(func() bindings.IAliceNetFactory {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsContractFactoryFunc) PushReturn(r0 bindings.IAliceNetFactory) {
	f.PushHook(func() bindings.IAliceNetFactory {
		return r0
	})
}

func (f *ContractsContractFactoryFunc) nextHook() func() bindings.IAliceNetFactory {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsContractFactoryFunc) appendCall(r0 ContractsContractFactoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsContractFactoryFuncCall objects
// describing the invocations of this function.
func (f *ContractsContractFactoryFunc) History() []ContractsContractFactoryFuncCall {
	f.mutex.Lock()
	history := make([]ContractsContractFactoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsContractFactoryFuncCall is an object that describes an
// invocation of method ContractFactory on an instance of MockContracts.
type ContractsContractFactoryFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IAliceNetFactory
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsContractFactoryFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsContractFactoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsContractFactoryAddressFunc describes the behavior when the
// ContractFactoryAddress method of the parent MockContracts instance is
// invoked.
type ContractsContractFactoryAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsContractFactoryAddressFuncCall
	mutex       sync.Mutex
}

// ContractFactoryAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockContracts) ContractFactoryAddress() common.Address {
	r0 := m.ContractFactoryAddressFunc.nextHook()()
	m.ContractFactoryAddressFunc.appendCall(ContractsContractFactoryAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ContractFactoryAddress method of the parent MockContracts instance is
// invoked and the hook queue is empty.
func (f *ContractsContractFactoryAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContractFactoryAddress method of the parent MockContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ContractsContractFactoryAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsContractFactoryAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsContractFactoryAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsContractFactoryAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsContractFactoryAddressFunc) appendCall(r0 ContractsContractFactoryAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsContractFactoryAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsContractFactoryAddressFunc) History() []ContractsContractFactoryAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsContractFactoryAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsContractFactoryAddressFuncCall is an object that describes an
// invocation of method ContractFactoryAddress on an instance of
// MockContracts.
type ContractsContractFactoryAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsContractFactoryAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsContractFactoryAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsEthdkgFunc describes the behavior when the Ethdkg method of the
// parent MockContracts instance is invoked.
type ContractsEthdkgFunc struct {
	defaultHook func() bindings.IETHDKG
	hooks       []func() bindings.IETHDKG
	history     []ContractsEthdkgFuncCall
	mutex       sync.Mutex
}

// Ethdkg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) Ethdkg() bindings.IETHDKG {
	r0 := m.EthdkgFunc.nextHook()()
	m.EthdkgFunc.appendCall(ContractsEthdkgFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Ethdkg method of the
// parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsEthdkgFunc) SetDefaultHook(hook func() bindings.IETHDKG) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ethdkg method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsEthdkgFunc) PushHook(hook func() bindings.IETHDKG) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsEthdkgFunc) SetDefaultReturn(r0 bindings.IETHDKG) {
	f.SetDefaultHook(func() bindings.IETHDKG {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsEthdkgFunc) PushReturn(r0 bindings.IETHDKG) {
	f.PushHook(func() bindings.IETHDKG {
		return r0
	})
}

func (f *ContractsEthdkgFunc) nextHook() func() bindings.IETHDKG {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsEthdkgFunc) appendCall(r0 ContractsEthdkgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsEthdkgFuncCall objects describing
// the invocations of this function.
func (f *ContractsEthdkgFunc) History() []ContractsEthdkgFuncCall {
	f.mutex.Lock()
	history := make([]ContractsEthdkgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsEthdkgFuncCall is an object that describes an invocation of
// method Ethdkg on an instance of MockContracts.
type ContractsEthdkgFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IETHDKG
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsEthdkgFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsEthdkgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsEthdkgAddressFunc describes the behavior when the EthdkgAddress
// method of the parent MockContracts instance is invoked.
type ContractsEthdkgAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsEthdkgAddressFuncCall
	mutex       sync.Mutex
}

// EthdkgAddress delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) EthdkgAddress() common.Address {
	r0 := m.EthdkgAddressFunc.nextHook()()
	m.EthdkgAddressFunc.appendCall(ContractsEthdkgAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EthdkgAddress method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsEthdkgAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EthdkgAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsEthdkgAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsEthdkgAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsEthdkgAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsEthdkgAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsEthdkgAddressFunc) appendCall(r0 ContractsEthdkgAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsEthdkgAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsEthdkgAddressFunc) History() []ContractsEthdkgAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsEthdkgAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsEthdkgAddressFuncCall is an object that describes an invocation
// of method EthdkgAddress on an instance of MockContracts.
type ContractsEthdkgAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsEthdkgAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsEthdkgAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsGovernanceFunc describes the behavior when the Governance method
// of the parent MockContracts instance is invoked.
type ContractsGovernanceFunc struct {
	defaultHook func() bindings.IGovernance
	hooks       []func() bindings.IGovernance
	history     []ContractsGovernanceFuncCall
	mutex       sync.Mutex
}

// Governance delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) Governance() bindings.IGovernance {
	r0 := m.GovernanceFunc.nextHook()()
	m.GovernanceFunc.appendCall(ContractsGovernanceFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Governance method of
// the parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsGovernanceFunc) SetDefaultHook(hook func() bindings.IGovernance) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Governance method of the parent MockContracts instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsGovernanceFunc) PushHook(hook func() bindings.IGovernance) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsGovernanceFunc) SetDefaultReturn(r0 bindings.IGovernance) {
	f.SetDefaultHook(func() bindings.IGovernance {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsGovernanceFunc) PushReturn(r0 bindings.IGovernance) {
	f.PushHook(func() bindings.IGovernance {
		return r0
	})
}

func (f *ContractsGovernanceFunc) nextHook() func() bindings.IGovernance {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsGovernanceFunc) appendCall(r0 ContractsGovernanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsGovernanceFuncCall objects
// describing the invocations of this function.
func (f *ContractsGovernanceFunc) History() []ContractsGovernanceFuncCall {
	f.mutex.Lock()
	history := make([]ContractsGovernanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsGovernanceFuncCall is an object that describes an invocation of
// method Governance on an instance of MockContracts.
type ContractsGovernanceFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IGovernance
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsGovernanceFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsGovernanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsGovernanceAddressFunc describes the behavior when the
// GovernanceAddress method of the parent MockContracts instance is invoked.
type ContractsGovernanceAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsGovernanceAddressFuncCall
	mutex       sync.Mutex
}

// GovernanceAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) GovernanceAddress() common.Address {
	r0 := m.GovernanceAddressFunc.nextHook()()
	m.GovernanceAddressFunc.appendCall(ContractsGovernanceAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GovernanceAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsGovernanceAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GovernanceAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsGovernanceAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsGovernanceAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsGovernanceAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsGovernanceAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsGovernanceAddressFunc) appendCall(r0 ContractsGovernanceAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsGovernanceAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsGovernanceAddressFunc) History() []ContractsGovernanceAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsGovernanceAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsGovernanceAddressFuncCall is an object that describes an
// invocation of method GovernanceAddress on an instance of MockContracts.
type ContractsGovernanceAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsGovernanceAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsGovernanceAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsLookupContractsFunc describes the behavior when the
// LookupContracts method of the parent MockContracts instance is invoked.
type ContractsLookupContractsFunc struct {
	defaultHook func(context.Context, common.Address) error
	hooks       []func(context.Context, common.Address) error
	history     []ContractsLookupContractsFuncCall
	mutex       sync.Mutex
}

// LookupContracts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) LookupContracts(v0 context.Context, v1 common.Address) error {
	r0 := m.LookupContractsFunc.nextHook()(v0, v1)
	m.LookupContractsFunc.appendCall(ContractsLookupContractsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LookupContracts
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsLookupContractsFunc) SetDefaultHook(hook func(context.Context, common.Address) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LookupContracts method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsLookupContractsFunc) PushHook(hook func(context.Context, common.Address) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsLookupContractsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, common.Address) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsLookupContractsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, common.Address) error {
		return r0
	})
}

func (f *ContractsLookupContractsFunc) nextHook() func(context.Context, common.Address) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsLookupContractsFunc) appendCall(r0 ContractsLookupContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsLookupContractsFuncCall objects
// describing the invocations of this function.
func (f *ContractsLookupContractsFunc) History() []ContractsLookupContractsFuncCall {
	f.mutex.Lock()
	history := make([]ContractsLookupContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsLookupContractsFuncCall is an object that describes an
// invocation of method LookupContracts on an instance of MockContracts.
type ContractsLookupContractsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsLookupContractsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsLookupContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsPublicStakingFunc describes the behavior when the PublicStaking
// method of the parent MockContracts instance is invoked.
type ContractsPublicStakingFunc struct {
	defaultHook func() bindings.IPublicStaking
	hooks       []func() bindings.IPublicStaking
	history     []ContractsPublicStakingFuncCall
	mutex       sync.Mutex
}

// PublicStaking delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) PublicStaking() bindings.IPublicStaking {
	r0 := m.PublicStakingFunc.nextHook()()
	m.PublicStakingFunc.appendCall(ContractsPublicStakingFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PublicStaking method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsPublicStakingFunc) SetDefaultHook(hook func() bindings.IPublicStaking) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PublicStaking method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsPublicStakingFunc) PushHook(hook func() bindings.IPublicStaking) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsPublicStakingFunc) SetDefaultReturn(r0 bindings.IPublicStaking) {
	f.SetDefaultHook(func() bindings.IPublicStaking {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsPublicStakingFunc) PushReturn(r0 bindings.IPublicStaking) {
	f.PushHook(func() bindings.IPublicStaking {
		return r0
	})
}

func (f *ContractsPublicStakingFunc) nextHook() func() bindings.IPublicStaking {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsPublicStakingFunc) appendCall(r0 ContractsPublicStakingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsPublicStakingFuncCall objects
// describing the invocations of this function.
func (f *ContractsPublicStakingFunc) History() []ContractsPublicStakingFuncCall {
	f.mutex.Lock()
	history := make([]ContractsPublicStakingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsPublicStakingFuncCall is an object that describes an invocation
// of method PublicStaking on an instance of MockContracts.
type ContractsPublicStakingFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IPublicStaking
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsPublicStakingFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsPublicStakingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsPublicStakingAddressFunc describes the behavior when the
// PublicStakingAddress method of the parent MockContracts instance is
// invoked.
type ContractsPublicStakingAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsPublicStakingAddressFuncCall
	mutex       sync.Mutex
}

// PublicStakingAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) PublicStakingAddress() common.Address {
	r0 := m.PublicStakingAddressFunc.nextHook()()
	m.PublicStakingAddressFunc.appendCall(ContractsPublicStakingAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PublicStakingAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsPublicStakingAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PublicStakingAddress method of the parent MockContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ContractsPublicStakingAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsPublicStakingAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsPublicStakingAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsPublicStakingAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsPublicStakingAddressFunc) appendCall(r0 ContractsPublicStakingAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsPublicStakingAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsPublicStakingAddressFunc) History() []ContractsPublicStakingAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsPublicStakingAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsPublicStakingAddressFuncCall is an object that describes an
// invocation of method PublicStakingAddress on an instance of
// MockContracts.
type ContractsPublicStakingAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsPublicStakingAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsPublicStakingAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsSnapshotsFunc describes the behavior when the Snapshots method
// of the parent MockContracts instance is invoked.
type ContractsSnapshotsFunc struct {
	defaultHook func() bindings.ISnapshots
	hooks       []func() bindings.ISnapshots
	history     []ContractsSnapshotsFuncCall
	mutex       sync.Mutex
}

// Snapshots delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContracts) Snapshots() bindings.ISnapshots {
	r0 := m.SnapshotsFunc.nextHook()()
	m.SnapshotsFunc.appendCall(ContractsSnapshotsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Snapshots method of
// the parent MockContracts instance is invoked and the hook queue is empty.
func (f *ContractsSnapshotsFunc) SetDefaultHook(hook func() bindings.ISnapshots) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Snapshots method of the parent MockContracts instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContractsSnapshotsFunc) PushHook(hook func() bindings.ISnapshots) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsSnapshotsFunc) SetDefaultReturn(r0 bindings.ISnapshots) {
	f.SetDefaultHook(func() bindings.ISnapshots {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsSnapshotsFunc) PushReturn(r0 bindings.ISnapshots) {
	f.PushHook(func() bindings.ISnapshots {
		return r0
	})
}

func (f *ContractsSnapshotsFunc) nextHook() func() bindings.ISnapshots {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsSnapshotsFunc) appendCall(r0 ContractsSnapshotsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsSnapshotsFuncCall objects
// describing the invocations of this function.
func (f *ContractsSnapshotsFunc) History() []ContractsSnapshotsFuncCall {
	f.mutex.Lock()
	history := make([]ContractsSnapshotsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsSnapshotsFuncCall is an object that describes an invocation of
// method Snapshots on an instance of MockContracts.
type ContractsSnapshotsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.ISnapshots
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsSnapshotsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsSnapshotsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsSnapshotsAddressFunc describes the behavior when the
// SnapshotsAddress method of the parent MockContracts instance is invoked.
type ContractsSnapshotsAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsSnapshotsAddressFuncCall
	mutex       sync.Mutex
}

// SnapshotsAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) SnapshotsAddress() common.Address {
	r0 := m.SnapshotsAddressFunc.nextHook()()
	m.SnapshotsAddressFunc.appendCall(ContractsSnapshotsAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SnapshotsAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsSnapshotsAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SnapshotsAddress method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsSnapshotsAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsSnapshotsAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsSnapshotsAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsSnapshotsAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsSnapshotsAddressFunc) appendCall(r0 ContractsSnapshotsAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsSnapshotsAddressFuncCall objects
// describing the invocations of this function.
func (f *ContractsSnapshotsAddressFunc) History() []ContractsSnapshotsAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsSnapshotsAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsSnapshotsAddressFuncCall is an object that describes an
// invocation of method SnapshotsAddress on an instance of MockContracts.
type ContractsSnapshotsAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsSnapshotsAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsSnapshotsAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorPoolFunc describes the behavior when the ValidatorPool
// method of the parent MockContracts instance is invoked.
type ContractsValidatorPoolFunc struct {
	defaultHook func() bindings.IValidatorPool
	hooks       []func() bindings.IValidatorPool
	history     []ContractsValidatorPoolFuncCall
	mutex       sync.Mutex
}

// ValidatorPool delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContracts) ValidatorPool() bindings.IValidatorPool {
	r0 := m.ValidatorPoolFunc.nextHook()()
	m.ValidatorPoolFunc.appendCall(ContractsValidatorPoolFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorPool method
// of the parent MockContracts instance is invoked and the hook queue is
// empty.
func (f *ContractsValidatorPoolFunc) SetDefaultHook(hook func() bindings.IValidatorPool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorPool method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsValidatorPoolFunc) PushHook(hook func() bindings.IValidatorPool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorPoolFunc) SetDefaultReturn(r0 bindings.IValidatorPool) {
	f.SetDefaultHook(func() bindings.IValidatorPool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorPoolFunc) PushReturn(r0 bindings.IValidatorPool) {
	f.PushHook(func() bindings.IValidatorPool {
		return r0
	})
}

func (f *ContractsValidatorPoolFunc) nextHook() func() bindings.IValidatorPool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorPoolFunc) appendCall(r0 ContractsValidatorPoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorPoolFuncCall objects
// describing the invocations of this function.
func (f *ContractsValidatorPoolFunc) History() []ContractsValidatorPoolFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorPoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorPoolFuncCall is an object that describes an invocation
// of method ValidatorPool on an instance of MockContracts.
type ContractsValidatorPoolFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IValidatorPool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorPoolFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorPoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorPoolAddressFunc describes the behavior when the
// ValidatorPoolAddress method of the parent MockContracts instance is
// invoked.
type ContractsValidatorPoolAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsValidatorPoolAddressFuncCall
	mutex       sync.Mutex
}

// ValidatorPoolAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) ValidatorPoolAddress() common.Address {
	r0 := m.ValidatorPoolAddressFunc.nextHook()()
	m.ValidatorPoolAddressFunc.appendCall(ContractsValidatorPoolAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorPoolAddress
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsValidatorPoolAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorPoolAddress method of the parent MockContracts instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ContractsValidatorPoolAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorPoolAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorPoolAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsValidatorPoolAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorPoolAddressFunc) appendCall(r0 ContractsValidatorPoolAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorPoolAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsValidatorPoolAddressFunc) History() []ContractsValidatorPoolAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorPoolAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorPoolAddressFuncCall is an object that describes an
// invocation of method ValidatorPoolAddress on an instance of
// MockContracts.
type ContractsValidatorPoolAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorPoolAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorPoolAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorStakingFunc describes the behavior when the
// ValidatorStaking method of the parent MockContracts instance is invoked.
type ContractsValidatorStakingFunc struct {
	defaultHook func() bindings.IValidatorStaking
	hooks       []func() bindings.IValidatorStaking
	history     []ContractsValidatorStakingFuncCall
	mutex       sync.Mutex
}

// ValidatorStaking delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContracts) ValidatorStaking() bindings.IValidatorStaking {
	r0 := m.ValidatorStakingFunc.nextHook()()
	m.ValidatorStakingFunc.appendCall(ContractsValidatorStakingFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ValidatorStaking
// method of the parent MockContracts instance is invoked and the hook queue
// is empty.
func (f *ContractsValidatorStakingFunc) SetDefaultHook(hook func() bindings.IValidatorStaking) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorStaking method of the parent MockContracts instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ContractsValidatorStakingFunc) PushHook(hook func() bindings.IValidatorStaking) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorStakingFunc) SetDefaultReturn(r0 bindings.IValidatorStaking) {
	f.SetDefaultHook(func() bindings.IValidatorStaking {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorStakingFunc) PushReturn(r0 bindings.IValidatorStaking) {
	f.PushHook(func() bindings.IValidatorStaking {
		return r0
	})
}

func (f *ContractsValidatorStakingFunc) nextHook() func() bindings.IValidatorStaking {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorStakingFunc) appendCall(r0 ContractsValidatorStakingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorStakingFuncCall objects
// describing the invocations of this function.
func (f *ContractsValidatorStakingFunc) History() []ContractsValidatorStakingFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorStakingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorStakingFuncCall is an object that describes an
// invocation of method ValidatorStaking on an instance of MockContracts.
type ContractsValidatorStakingFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bindings.IValidatorStaking
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorStakingFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorStakingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContractsValidatorStakingAddressFunc describes the behavior when the
// ValidatorStakingAddress method of the parent MockContracts instance is
// invoked.
type ContractsValidatorStakingAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []ContractsValidatorStakingAddressFuncCall
	mutex       sync.Mutex
}

// ValidatorStakingAddress delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockContracts) ValidatorStakingAddress() common.Address {
	r0 := m.ValidatorStakingAddressFunc.nextHook()()
	m.ValidatorStakingAddressFunc.appendCall(ContractsValidatorStakingAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidatorStakingAddress method of the parent MockContracts instance is
// invoked and the hook queue is empty.
func (f *ContractsValidatorStakingAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidatorStakingAddress method of the parent MockContracts instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ContractsValidatorStakingAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContractsValidatorStakingAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContractsValidatorStakingAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *ContractsValidatorStakingAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContractsValidatorStakingAddressFunc) appendCall(r0 ContractsValidatorStakingAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContractsValidatorStakingAddressFuncCall
// objects describing the invocations of this function.
func (f *ContractsValidatorStakingAddressFunc) History() []ContractsValidatorStakingAddressFuncCall {
	f.mutex.Lock()
	history := make([]ContractsValidatorStakingAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContractsValidatorStakingAddressFuncCall is an object that describes an
// invocation of method ValidatorStakingAddress on an instance of
// MockContracts.
type ContractsValidatorStakingAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContractsValidatorStakingAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContractsValidatorStakingAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockNetwork is a mock implementation of the Network interface (from the
// package github.com/MadBase/MadNet/blockchain/ethereum) used for unit
// testing.
type MockNetwork struct {
	// ChainIDFunc is an instance of a mock function object controlling the
	// behavior of the method ChainID.
	ChainIDFunc *NetworkChainIDFunc
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *NetworkCloseFunc
	// CommitFunc is an instance of a mock function object controlling the
	// behavior of the method Commit.
	CommitFunc *NetworkCommitFunc
	// ContractsFunc is an instance of a mock function object controlling
	// the behavior of the method Contracts.
	ContractsFunc *NetworkContractsFunc
	// GetAccountFunc is an instance of a mock function object controlling
	// the behavior of the method GetAccount.
	GetAccountFunc *NetworkGetAccountFunc
	// GetAccountKeysFunc is an instance of a mock function object
	// controlling the behavior of the method GetAccountKeys.
	GetAccountKeysFunc *NetworkGetAccountKeysFunc
	// GetBalanceFunc is an instance of a mock function object controlling
	// the behavior of the method GetBalance.
	GetBalanceFunc *NetworkGetBalanceFunc
	// GetCallOptsFunc is an instance of a mock function object controlling
	// the behavior of the method GetCallOpts.
	GetCallOptsFunc *NetworkGetCallOptsFunc
	// GetCallOptsLatestBlockFunc is an instance of a mock function object
	// controlling the behavior of the method GetCallOptsLatestBlock.
	GetCallOptsLatestBlockFunc *NetworkGetCallOptsLatestBlockFunc
	// GetClientFunc is an instance of a mock function object controlling
	// the behavior of the method GetClient.
	GetClientFunc *NetworkGetClientFunc
	// GetCoinbaseAddressFunc is an instance of a mock function object
	// controlling the behavior of the method GetCoinbaseAddress.
	GetCoinbaseAddressFunc *NetworkGetCoinbaseAddressFunc
	// GetCurrentHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetCurrentHeight.
	GetCurrentHeightFunc *NetworkGetCurrentHeightFunc
	// GetDefaultAccountFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefaultAccount.
	GetDefaultAccountFunc *NetworkGetDefaultAccountFunc
	// GetEndpointFunc is an instance of a mock function object controlling
	// the behavior of the method GetEndpoint.
	GetEndpointFunc *NetworkGetEndpointFunc
	// GetEventsFunc is an instance of a mock function object controlling
	// the behavior of the method GetEvents.
	GetEventsFunc *NetworkGetEventsFunc
	// GetFinalityDelayFunc is an instance of a mock function object
	// controlling the behavior of the method GetFinalityDelay.
	GetFinalityDelayFunc *NetworkGetFinalityDelayFunc
	// GetFinalizedHeightFunc is an instance of a mock function object
	// controlling the behavior of the method GetFinalizedHeight.
	GetFinalizedHeightFunc *NetworkGetFinalizedHeightFunc
	// GetKnownAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method GetKnownAccounts.
	GetKnownAccountsFunc *NetworkGetKnownAccountsFunc
	// GetPeerCountFunc is an instance of a mock function object controlling
	// the behavior of the method GetPeerCount.
	GetPeerCountFunc *NetworkGetPeerCountFunc
	// GetSnapshotFunc is an instance of a mock function object controlling
	// the behavior of the method GetSnapshot.
	GetSnapshotFunc *NetworkGetSnapshotFunc
	// GetSyncProgressFunc is an instance of a mock function object
	// controlling the behavior of the method GetSyncProgress.
	GetSyncProgressFunc *NetworkGetSyncProgressFunc
	// GetTimeoutContextFunc is an instance of a mock function object
	// controlling the behavior of the method GetTimeoutContext.
	GetTimeoutContextFunc *NetworkGetTimeoutContextFunc
	// GetTransactionOptsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTransactionOpts.
	GetTransactionOptsFunc *NetworkGetTransactionOptsFunc
	// GetTxFeePercentageToIncreaseFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetTxFeePercentageToIncrease.
	GetTxFeePercentageToIncreaseFunc *NetworkGetTxFeePercentageToIncreaseFunc
	// GetTxMaxGasFeeAllowedInGweiFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetTxMaxGasFeeAllowedInGwei.
	GetTxMaxGasFeeAllowedInGweiFunc *NetworkGetTxMaxGasFeeAllowedInGweiFunc
	// GetValidatorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetValidators.
	GetValidatorsFunc *NetworkGetValidatorsFunc
	// IsAccessibleFunc is an instance of a mock function object controlling
	// the behavior of the method IsAccessible.
	IsAccessibleFunc *NetworkIsAccessibleFunc
	// RetryCountFunc is an instance of a mock function object controlling
	// the behavior of the method RetryCount.
	RetryCountFunc *NetworkRetryCountFunc
	// RetryDelayFunc is an instance of a mock function object controlling
	// the behavior of the method RetryDelay.
	RetryDelayFunc *NetworkRetryDelayFunc
	// SetFinalityDelayFunc is an instance of a mock function object
	// controlling the behavior of the method SetFinalityDelay.
	SetFinalityDelayFunc *NetworkSetFinalityDelayFunc
	// TimeoutFunc is an instance of a mock function object controlling the
	// behavior of the method Timeout.
	TimeoutFunc *NetworkTimeoutFunc
	// TransferEtherFunc is an instance of a mock function object
	// controlling the behavior of the method TransferEther.
	TransferEtherFunc *NetworkTransferEtherFunc
	// UnlockAccountFunc is an instance of a mock function object
	// controlling the behavior of the method UnlockAccount.
	UnlockAccountFunc *NetworkUnlockAccountFunc
	// UnlockAccountWithPasscodeFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UnlockAccountWithPasscode.
	UnlockAccountWithPasscodeFunc *NetworkUnlockAccountWithPasscodeFunc
}

// NewMockNetwork creates a new mock of the Network interface. All methods
// return zero values for all results, unless overwritten.
func NewMockNetwork() *MockNetwork {
	return &MockNetwork{
		ChainIDFunc: &NetworkChainIDFunc{
			defaultHook: func() *big.Int {
				return nil
			},
		},
		CloseFunc: &NetworkCloseFunc{
			defaultHook: func() error {
				return nil
			},
		},
		CommitFunc: &NetworkCommitFunc{
			defaultHook: func() {
				return
			},
		},
		ContractsFunc: &NetworkContractsFunc{
			defaultHook: func() ethereum.Contracts {
				return nil
			},
		},
		GetAccountFunc: &NetworkGetAccountFunc{
			defaultHook: func(common.Address) (accounts.Account, error) {
				return accounts.Account{}, nil
			},
		},
		GetAccountKeysFunc: &NetworkGetAccountKeysFunc{
			defaultHook: func(common.Address) (*keystore.Key, error) {
				return nil, nil
			},
		},
		GetBalanceFunc: &NetworkGetBalanceFunc{
			defaultHook: func(common.Address) (*big.Int, error) {
				return nil, nil
			},
		},
		GetCallOptsFunc: &NetworkGetCallOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.CallOpts, error) {
				return nil, nil
			},
		},
		GetCallOptsLatestBlockFunc: &NetworkGetCallOptsLatestBlockFunc{
			defaultHook: func(context.Context, accounts.Account) *bind.CallOpts {
				return nil
			},
		},
		GetClientFunc: &NetworkGetClientFunc{
			defaultHook: func() ethereum.Client {
				return nil
			},
		},
		GetCoinbaseAddressFunc: &NetworkGetCoinbaseAddressFunc{
			defaultHook: func() common.Address {
				return common.Address{}
			},
		},
		GetCurrentHeightFunc: &NetworkGetCurrentHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				return 0, nil
			},
		},
		GetDefaultAccountFunc: &NetworkGetDefaultAccountFunc{
			defaultHook: func() accounts.Account {
				return accounts.Account{}
			},
		},
		GetEndpointFunc: &NetworkGetEndpointFunc{
			defaultHook: func() string {
				return ""
			},
		},
		GetEventsFunc: &NetworkGetEventsFunc{
			defaultHook: func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
				return nil, nil
			},
		},
		GetFinalityDelayFunc: &NetworkGetFinalityDelayFunc{
			defaultHook: func() uint64 {
				return 0
			},
		},
		GetFinalizedHeightFunc: &NetworkGetFinalizedHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				return 0, nil
			},
		},
		GetKnownAccountsFunc: &NetworkGetKnownAccountsFunc{
			defaultHook: func() []accounts.Account {
				return nil
			},
		},
		GetPeerCountFunc: &NetworkGetPeerCountFunc{
			defaultHook: func(context.Context) (uint64, error) {
				return 0, nil
			},
		},
		GetSnapshotFunc: &NetworkGetSnapshotFunc{
			defaultHook: func() ([]byte, error) {
				return nil, nil
			},
		},
		GetSyncProgressFunc: &NetworkGetSyncProgressFunc{
			defaultHook: func() (bool, *goethereum.SyncProgress, error) {
				return false, nil, nil
			},
		},
		GetTimeoutContextFunc: &NetworkGetTimeoutContextFunc{
			defaultHook: func() (context.Context, context.CancelFunc) {
				return nil, nil
			},
		},
		GetTransactionOptsFunc: &NetworkGetTransactionOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
				return nil, nil
			},
		},
		GetTxFeePercentageToIncreaseFunc: &NetworkGetTxFeePercentageToIncreaseFunc{
			defaultHook: func() int {
				return 0
			},
		},
		GetTxMaxGasFeeAllowedInGweiFunc: &NetworkGetTxMaxGasFeeAllowedInGweiFunc{
			defaultHook: func() uint64 {
				return 0
			},
		},
		GetValidatorsFunc: &NetworkGetValidatorsFunc{
			defaultHook: func(context.Context) ([]common.Address, error) {
				return nil, nil
			},
		},
		IsAccessibleFunc: &NetworkIsAccessibleFunc{
			defaultHook: func() bool {
				return false
			},
		},
		RetryCountFunc: &NetworkRetryCountFunc{
			defaultHook: func() int {
				return 0
			},
		},
		RetryDelayFunc: &NetworkRetryDelayFunc{
			defaultHook: func() time.Duration {
				return 0
			},
		},
		SetFinalityDelayFunc: &NetworkSetFinalityDelayFunc{
			defaultHook: func(uint64) {
				return
			},
		},
		TimeoutFunc: &NetworkTimeoutFunc{
			defaultHook: func() time.Duration {
				return 0
			},
		},
		TransferEtherFunc: &NetworkTransferEtherFunc{
			defaultHook: func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				return nil, nil
			},
		},
		UnlockAccountFunc: &NetworkUnlockAccountFunc{
			defaultHook: func(accounts.Account) error {
				return nil
			},
		},
		UnlockAccountWithPasscodeFunc: &NetworkUnlockAccountWithPasscodeFunc{
			defaultHook: func(accounts.Account, string) error {
				return nil
			},
		},
	}
}

// NewStrictMockNetwork creates a new mock of the Network interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockNetwork() *MockNetwork {
	return &MockNetwork{
		ChainIDFunc: &NetworkChainIDFunc{
			defaultHook: func() *big.Int {
				panic("unexpected invocation of MockNetwork.ChainID")
			},
		},
		CloseFunc: &NetworkCloseFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockNetwork.Close")
			},
		},
		CommitFunc: &NetworkCommitFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockNetwork.Commit")
			},
		},
		ContractsFunc: &NetworkContractsFunc{
			defaultHook: func() ethereum.Contracts {
				panic("unexpected invocation of MockNetwork.Contracts")
			},
		},
		GetAccountFunc: &NetworkGetAccountFunc{
			defaultHook: func(common.Address) (accounts.Account, error) {
				panic("unexpected invocation of MockNetwork.GetAccount")
			},
		},
		GetAccountKeysFunc: &NetworkGetAccountKeysFunc{
			defaultHook: func(common.Address) (*keystore.Key, error) {
				panic("unexpected invocation of MockNetwork.GetAccountKeys")
			},
		},
		GetBalanceFunc: &NetworkGetBalanceFunc{
			defaultHook: func(common.Address) (*big.Int, error) {
				panic("unexpected invocation of MockNetwork.GetBalance")
			},
		},
		GetCallOptsFunc: &NetworkGetCallOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.CallOpts, error) {
				panic("unexpected invocation of MockNetwork.GetCallOpts")
			},
		},
		GetCallOptsLatestBlockFunc: &NetworkGetCallOptsLatestBlockFunc{
			defaultHook: func(context.Context, accounts.Account) *bind.CallOpts {
				panic("unexpected invocation of MockNetwork.GetCallOptsLatestBlock")
			},
		},
		GetClientFunc: &NetworkGetClientFunc{
			defaultHook: func() ethereum.Client {
				panic("unexpected invocation of MockNetwork.GetClient")
			},
		},
		GetCoinbaseAddressFunc: &NetworkGetCoinbaseAddressFunc{
			defaultHook: func() common.Address {
				panic("unexpected invocation of MockNetwork.GetCoinbaseAddress")
			},
		},
		GetCurrentHeightFunc: &NetworkGetCurrentHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockNetwork.GetCurrentHeight")
			},
		},
		GetDefaultAccountFunc: &NetworkGetDefaultAccountFunc{
			defaultHook: func() accounts.Account {
				panic("unexpected invocation of MockNetwork.GetDefaultAccount")
			},
		},
		GetEndpointFunc: &NetworkGetEndpointFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockNetwork.GetEndpoint")
			},
		},
		GetEventsFunc: &NetworkGetEventsFunc{
			defaultHook: func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
				panic("unexpected invocation of MockNetwork.GetEvents")
			},
		},
		GetFinalityDelayFunc: &NetworkGetFinalityDelayFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockNetwork.GetFinalityDelay")
			},
		},
		GetFinalizedHeightFunc: &NetworkGetFinalizedHeightFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockNetwork.GetFinalizedHeight")
			},
		},
		GetKnownAccountsFunc: &NetworkGetKnownAccountsFunc{
			defaultHook: func() []accounts.Account {
				panic("unexpected invocation of MockNetwork.GetKnownAccounts")
			},
		},
		GetPeerCountFunc: &NetworkGetPeerCountFunc{
			defaultHook: func(context.Context) (uint64, error) {
				panic("unexpected invocation of MockNetwork.GetPeerCount")
			},
		},
		GetSnapshotFunc: &NetworkGetSnapshotFunc{
			defaultHook: func() ([]byte, error) {
				panic("unexpected invocation of MockNetwork.GetSnapshot")
			},
		},
		GetSyncProgressFunc: &NetworkGetSyncProgressFunc{
			defaultHook: func() (bool, *goethereum.SyncProgress, error) {
				panic("unexpected invocation of MockNetwork.GetSyncProgress")
			},
		},
		GetTimeoutContextFunc: &NetworkGetTimeoutContextFunc{
			defaultHook: func() (context.Context, context.CancelFunc) {
				panic("unexpected invocation of MockNetwork.GetTimeoutContext")
			},
		},
		GetTransactionOptsFunc: &NetworkGetTransactionOptsFunc{
			defaultHook: func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
				panic("unexpected invocation of MockNetwork.GetTransactionOpts")
			},
		},
		GetTxFeePercentageToIncreaseFunc: &NetworkGetTxFeePercentageToIncreaseFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockNetwork.GetTxFeePercentageToIncrease")
			},
		},
		GetTxMaxGasFeeAllowedInGweiFunc: &NetworkGetTxMaxGasFeeAllowedInGweiFunc{
			defaultHook: func() uint64 {
				panic("unexpected invocation of MockNetwork.GetTxMaxGasFeeAllowedInGwei")
			},
		},
		GetValidatorsFunc: &NetworkGetValidatorsFunc{
			defaultHook: func(context.Context) ([]common.Address, error) {
				panic("unexpected invocation of MockNetwork.GetValidators")
			},
		},
		IsAccessibleFunc: &NetworkIsAccessibleFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockNetwork.IsAccessible")
			},
		},
		RetryCountFunc: &NetworkRetryCountFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockNetwork.RetryCount")
			},
		},
		RetryDelayFunc: &NetworkRetryDelayFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockNetwork.RetryDelay")
			},
		},
		SetFinalityDelayFunc: &NetworkSetFinalityDelayFunc{
			defaultHook: func(uint64) {
				panic("unexpected invocation of MockNetwork.SetFinalityDelay")
			},
		},
		TimeoutFunc: &NetworkTimeoutFunc{
			defaultHook: func() time.Duration {
				panic("unexpected invocation of MockNetwork.Timeout")
			},
		},
		TransferEtherFunc: &NetworkTransferEtherFunc{
			defaultHook: func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
				panic("unexpected invocation of MockNetwork.TransferEther")
			},
		},
		UnlockAccountFunc: &NetworkUnlockAccountFunc{
			defaultHook: func(accounts.Account) error {
				panic("unexpected invocation of MockNetwork.UnlockAccount")
			},
		},
		UnlockAccountWithPasscodeFunc: &NetworkUnlockAccountWithPasscodeFunc{
			defaultHook: func(accounts.Account, string) error {
				panic("unexpected invocation of MockNetwork.UnlockAccountWithPasscode")
			},
		},
	}
}

// NewMockNetworkFrom creates a new mock of the MockNetwork interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockNetworkFrom(i ethereum.Network) *MockNetwork {
	return &MockNetwork{
		ChainIDFunc: &NetworkChainIDFunc{
			defaultHook: i.ChainID,
		},
		CloseFunc: &NetworkCloseFunc{
			defaultHook: i.Close,
		},
		CommitFunc: &NetworkCommitFunc{
			defaultHook: i.Commit,
		},
		ContractsFunc: &NetworkContractsFunc{
			defaultHook: i.Contracts,
		},
		GetAccountFunc: &NetworkGetAccountFunc{
			defaultHook: i.GetAccount,
		},
		GetAccountKeysFunc: &NetworkGetAccountKeysFunc{
			defaultHook: i.GetAccountKeys,
		},
		GetBalanceFunc: &NetworkGetBalanceFunc{
			defaultHook: i.GetBalance,
		},
		GetCallOptsFunc: &NetworkGetCallOptsFunc{
			defaultHook: i.GetCallOpts,
		},
		GetCallOptsLatestBlockFunc: &NetworkGetCallOptsLatestBlockFunc{
			defaultHook: i.GetCallOptsLatestBlock,
		},
		GetClientFunc: &NetworkGetClientFunc{
			defaultHook: i.GetClient,
		},
		GetCoinbaseAddressFunc: &NetworkGetCoinbaseAddressFunc{
			defaultHook: i.GetCoinbaseAddress,
		},
		GetCurrentHeightFunc: &NetworkGetCurrentHeightFunc{
			defaultHook: i.GetCurrentHeight,
		},
		GetDefaultAccountFunc: &NetworkGetDefaultAccountFunc{
			defaultHook: i.GetDefaultAccount,
		},
		GetEndpointFunc: &NetworkGetEndpointFunc{
			defaultHook: i.GetEndpoint,
		},
		GetEventsFunc: &NetworkGetEventsFunc{
			defaultHook: i.GetEvents,
		},
		GetFinalityDelayFunc: &NetworkGetFinalityDelayFunc{
			defaultHook: i.GetFinalityDelay,
		},
		GetFinalizedHeightFunc: &NetworkGetFinalizedHeightFunc{
			defaultHook: i.GetFinalizedHeight,
		},
		GetKnownAccountsFunc: &NetworkGetKnownAccountsFunc{
			defaultHook: i.GetKnownAccounts,
		},
		GetPeerCountFunc: &NetworkGetPeerCountFunc{
			defaultHook: i.GetPeerCount,
		},
		GetSnapshotFunc: &NetworkGetSnapshotFunc{
			defaultHook: i.GetSnapshot,
		},
		GetSyncProgressFunc: &NetworkGetSyncProgressFunc{
			defaultHook: i.GetSyncProgress,
		},
		GetTimeoutContextFunc: &NetworkGetTimeoutContextFunc{
			defaultHook: i.GetTimeoutContext,
		},
		GetTransactionOptsFunc: &NetworkGetTransactionOptsFunc{
			defaultHook: i.GetTransactionOpts,
		},
		GetTxFeePercentageToIncreaseFunc: &NetworkGetTxFeePercentageToIncreaseFunc{
			defaultHook: i.GetTxFeePercentageToIncrease,
		},
		GetTxMaxGasFeeAllowedInGweiFunc: &NetworkGetTxMaxGasFeeAllowedInGweiFunc{
			defaultHook: i.GetTxMaxGasFeeAllowedInGwei,
		},
		GetValidatorsFunc: &NetworkGetValidatorsFunc{
			defaultHook: i.GetValidators,
		},
		IsAccessibleFunc: &NetworkIsAccessibleFunc{
			defaultHook: i.IsAccessible,
		},
		RetryCountFunc: &NetworkRetryCountFunc{
			defaultHook: i.RetryCount,
		},
		RetryDelayFunc: &NetworkRetryDelayFunc{
			defaultHook: i.RetryDelay,
		},
		SetFinalityDelayFunc: &NetworkSetFinalityDelayFunc{
			defaultHook: i.SetFinalityDelay,
		},
		TimeoutFunc: &NetworkTimeoutFunc{
			defaultHook: i.Timeout,
		},
		TransferEtherFunc: &NetworkTransferEtherFunc{
			defaultHook: i.TransferEther,
		},
		UnlockAccountFunc: &NetworkUnlockAccountFunc{
			defaultHook: i.UnlockAccount,
		},
		UnlockAccountWithPasscodeFunc: &NetworkUnlockAccountWithPasscodeFunc{
			defaultHook: i.UnlockAccountWithPasscode,
		},
	}
}

// NetworkChainIDFunc describes the behavior when the ChainID method of the
// parent MockNetwork instance is invoked.
type NetworkChainIDFunc struct {
	defaultHook func() *big.Int
	hooks       []func() *big.Int
	history     []NetworkChainIDFuncCall
	mutex       sync.Mutex
}

// ChainID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) ChainID() *big.Int {
	r0 := m.ChainIDFunc.nextHook()()
	m.ChainIDFunc.appendCall(NetworkChainIDFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ChainID method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkChainIDFunc) SetDefaultHook(hook func() *big.Int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ChainID method of the parent MockNetwork instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *NetworkChainIDFunc) PushHook(hook func() *big.Int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkChainIDFunc) SetDefaultReturn(r0 *big.Int) {
	f.SetDefaultHook(func() *big.Int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkChainIDFunc) PushReturn(r0 *big.Int) {
	f.PushHook(func() *big.Int {
		return r0
	})
}

func (f *NetworkChainIDFunc) nextHook() func() *big.Int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkChainIDFunc) appendCall(r0 NetworkChainIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkChainIDFuncCall objects describing
// the invocations of this function.
func (f *NetworkChainIDFunc) History() []NetworkChainIDFuncCall {
	f.mutex.Lock()
	history := make([]NetworkChainIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkChainIDFuncCall is an object that describes an invocation of
// method ChainID on an instance of MockNetwork.
type NetworkChainIDFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkChainIDFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkChainIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkCloseFunc describes the behavior when the Close method of the
// parent MockNetwork instance is invoked.
type NetworkCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []NetworkCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(NetworkCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockNetwork instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *NetworkCloseFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *NetworkCloseFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkCloseFunc) appendCall(r0 NetworkCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkCloseFuncCall objects describing the
// invocations of this function.
func (f *NetworkCloseFunc) History() []NetworkCloseFuncCall {
	f.mutex.Lock()
	history := make([]NetworkCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockNetwork.
type NetworkCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkCommitFunc describes the behavior when the Commit method of the
// parent MockNetwork instance is invoked.
type NetworkCommitFunc struct {
	defaultHook func()
	hooks       []func()
	history     []NetworkCommitFuncCall
	mutex       sync.Mutex
}

// Commit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) Commit() {
	m.CommitFunc.nextHook()()
	m.CommitFunc.appendCall(NetworkCommitFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Commit method of the
// parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkCommitFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Commit method of the parent MockNetwork instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *NetworkCommitFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkCommitFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkCommitFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *NetworkCommitFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkCommitFunc) appendCall(r0 NetworkCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkCommitFuncCall objects describing
// the invocations of this function.
func (f *NetworkCommitFunc) History() []NetworkCommitFuncCall {
	f.mutex.Lock()
	history := make([]NetworkCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkCommitFuncCall is an object that describes an invocation of method
// Commit on an instance of MockNetwork.
type NetworkCommitFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkCommitFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkCommitFuncCall) Results() []interface{} {
	return []interface{}{}
}

// NetworkContractsFunc describes the behavior when the Contracts method of
// the parent MockNetwork instance is invoked.
type NetworkContractsFunc struct {
	defaultHook func() ethereum.Contracts
	hooks       []func() ethereum.Contracts
	history     []NetworkContractsFuncCall
	mutex       sync.Mutex
}

// Contracts delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) Contracts() ethereum.Contracts {
	r0 := m.ContractsFunc.nextHook()()
	m.ContractsFunc.appendCall(NetworkContractsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Contracts method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkContractsFunc) SetDefaultHook(hook func() ethereum.Contracts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Contracts method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkContractsFunc) PushHook(hook func() ethereum.Contracts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkContractsFunc) SetDefaultReturn(r0 ethereum.Contracts) {
	f.SetDefaultHook(func() ethereum.Contracts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkContractsFunc) PushReturn(r0 ethereum.Contracts) {
	f.PushHook(func() ethereum.Contracts {
		return r0
	})
}

func (f *NetworkContractsFunc) nextHook() func() ethereum.Contracts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkContractsFunc) appendCall(r0 NetworkContractsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkContractsFuncCall objects describing
// the invocations of this function.
func (f *NetworkContractsFunc) History() []NetworkContractsFuncCall {
	f.mutex.Lock()
	history := make([]NetworkContractsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkContractsFuncCall is an object that describes an invocation of
// method Contracts on an instance of MockNetwork.
type NetworkContractsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ethereum.Contracts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkContractsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkContractsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetAccountFunc describes the behavior when the GetAccount method
// of the parent MockNetwork instance is invoked.
type NetworkGetAccountFunc struct {
	defaultHook func(common.Address) (accounts.Account, error)
	hooks       []func(common.Address) (accounts.Account, error)
	history     []NetworkGetAccountFuncCall
	mutex       sync.Mutex
}

// GetAccount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetAccount(v0 common.Address) (accounts.Account, error) {
	r0, r1 := m.GetAccountFunc.nextHook()(v0)
	m.GetAccountFunc.appendCall(NetworkGetAccountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAccount method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkGetAccountFunc) SetDefaultHook(hook func(common.Address) (accounts.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccount method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetAccountFunc) PushHook(hook func(common.Address) (accounts.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetAccountFunc) SetDefaultReturn(r0 accounts.Account, r1 error) {
	f.SetDefaultHook(func(common.Address) (accounts.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetAccountFunc) PushReturn(r0 accounts.Account, r1 error) {
	f.PushHook(func(common.Address) (accounts.Account, error) {
		return r0, r1
	})
}

func (f *NetworkGetAccountFunc) nextHook() func(common.Address) (accounts.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetAccountFunc) appendCall(r0 NetworkGetAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetAccountFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetAccountFunc) History() []NetworkGetAccountFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetAccountFuncCall is an object that describes an invocation of
// method GetAccount on an instance of MockNetwork.
type NetworkGetAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accounts.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetAccountKeysFunc describes the behavior when the GetAccountKeys
// method of the parent MockNetwork instance is invoked.
type NetworkGetAccountKeysFunc struct {
	defaultHook func(common.Address) (*keystore.Key, error)
	hooks       []func(common.Address) (*keystore.Key, error)
	history     []NetworkGetAccountKeysFuncCall
	mutex       sync.Mutex
}

// GetAccountKeys delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetAccountKeys(v0 common.Address) (*keystore.Key, error) {
	r0, r1 := m.GetAccountKeysFunc.nextHook()(v0)
	m.GetAccountKeysFunc.appendCall(NetworkGetAccountKeysFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAccountKeys
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetAccountKeysFunc) SetDefaultHook(hook func(common.Address) (*keystore.Key, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAccountKeys method of the parent MockNetwork instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetAccountKeysFunc) PushHook(hook func(common.Address) (*keystore.Key, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetAccountKeysFunc) SetDefaultReturn(r0 *keystore.Key, r1 error) {
	f.SetDefaultHook(func(common.Address) (*keystore.Key, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetAccountKeysFunc) PushReturn(r0 *keystore.Key, r1 error) {
	f.PushHook(func(common.Address) (*keystore.Key, error) {
		return r0, r1
	})
}

func (f *NetworkGetAccountKeysFunc) nextHook() func(common.Address) (*keystore.Key, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetAccountKeysFunc) appendCall(r0 NetworkGetAccountKeysFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetAccountKeysFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetAccountKeysFunc) History() []NetworkGetAccountKeysFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetAccountKeysFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetAccountKeysFuncCall is an object that describes an invocation
// of method GetAccountKeys on an instance of MockNetwork.
type NetworkGetAccountKeysFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *keystore.Key
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetAccountKeysFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetAccountKeysFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetBalanceFunc describes the behavior when the GetBalance method
// of the parent MockNetwork instance is invoked.
type NetworkGetBalanceFunc struct {
	defaultHook func(common.Address) (*big.Int, error)
	hooks       []func(common.Address) (*big.Int, error)
	history     []NetworkGetBalanceFuncCall
	mutex       sync.Mutex
}

// GetBalance delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetBalance(v0 common.Address) (*big.Int, error) {
	r0, r1 := m.GetBalanceFunc.nextHook()(v0)
	m.GetBalanceFunc.appendCall(NetworkGetBalanceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBalance method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkGetBalanceFunc) SetDefaultHook(hook func(common.Address) (*big.Int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBalance method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetBalanceFunc) PushHook(hook func(common.Address) (*big.Int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetBalanceFunc) SetDefaultReturn(r0 *big.Int, r1 error) {
	f.SetDefaultHook(func(common.Address) (*big.Int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetBalanceFunc) PushReturn(r0 *big.Int, r1 error) {
	f.PushHook(func(common.Address) (*big.Int, error) {
		return r0, r1
	})
}

func (f *NetworkGetBalanceFunc) nextHook() func(common.Address) (*big.Int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetBalanceFunc) appendCall(r0 NetworkGetBalanceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetBalanceFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetBalanceFunc) History() []NetworkGetBalanceFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetBalanceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetBalanceFuncCall is an object that describes an invocation of
// method GetBalance on an instance of MockNetwork.
type NetworkGetBalanceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *big.Int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetBalanceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetBalanceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetCallOptsFunc describes the behavior when the GetCallOpts method
// of the parent MockNetwork instance is invoked.
type NetworkGetCallOptsFunc struct {
	defaultHook func(context.Context, accounts.Account) (*bind.CallOpts, error)
	hooks       []func(context.Context, accounts.Account) (*bind.CallOpts, error)
	history     []NetworkGetCallOptsFuncCall
	mutex       sync.Mutex
}

// GetCallOpts delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetCallOpts(v0 context.Context, v1 accounts.Account) (*bind.CallOpts, error) {
	r0, r1 := m.GetCallOptsFunc.nextHook()(v0, v1)
	m.GetCallOptsFunc.appendCall(NetworkGetCallOptsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCallOpts method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkGetCallOptsFunc) SetDefaultHook(hook func(context.Context, accounts.Account) (*bind.CallOpts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCallOpts method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetCallOptsFunc) PushHook(hook func(context.Context, accounts.Account) (*bind.CallOpts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetCallOptsFunc) SetDefaultReturn(r0 *bind.CallOpts, r1 error) {
	f.SetDefaultHook(func(context.Context, accounts.Account) (*bind.CallOpts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetCallOptsFunc) PushReturn(r0 *bind.CallOpts, r1 error) {
	f.PushHook(func(context.Context, accounts.Account) (*bind.CallOpts, error) {
		return r0, r1
	})
}

func (f *NetworkGetCallOptsFunc) nextHook() func(context.Context, accounts.Account) (*bind.CallOpts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetCallOptsFunc) appendCall(r0 NetworkGetCallOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetCallOptsFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetCallOptsFunc) History() []NetworkGetCallOptsFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetCallOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetCallOptsFuncCall is an object that describes an invocation of
// method GetCallOpts on an instance of MockNetwork.
type NetworkGetCallOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.CallOpts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetCallOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetCallOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetCallOptsLatestBlockFunc describes the behavior when the
// GetCallOptsLatestBlock method of the parent MockNetwork instance is
// invoked.
type NetworkGetCallOptsLatestBlockFunc struct {
	defaultHook func(context.Context, accounts.Account) *bind.CallOpts
	hooks       []func(context.Context, accounts.Account) *bind.CallOpts
	history     []NetworkGetCallOptsLatestBlockFuncCall
	mutex       sync.Mutex
}

// GetCallOptsLatestBlock delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockNetwork) GetCallOptsLatestBlock(v0 context.Context, v1 accounts.Account) *bind.CallOpts {
	r0 := m.GetCallOptsLatestBlockFunc.nextHook()(v0, v1)
	m.GetCallOptsLatestBlockFunc.appendCall(NetworkGetCallOptsLatestBlockFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetCallOptsLatestBlock method of the parent MockNetwork instance is
// invoked and the hook queue is empty.
func (f *NetworkGetCallOptsLatestBlockFunc) SetDefaultHook(hook func(context.Context, accounts.Account) *bind.CallOpts) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCallOptsLatestBlock method of the parent MockNetwork instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *NetworkGetCallOptsLatestBlockFunc) PushHook(hook func(context.Context, accounts.Account) *bind.CallOpts) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetCallOptsLatestBlockFunc) SetDefaultReturn(r0 *bind.CallOpts) {
	f.SetDefaultHook(func(context.Context, accounts.Account) *bind.CallOpts {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetCallOptsLatestBlockFunc) PushReturn(r0 *bind.CallOpts) {
	f.PushHook(func(context.Context, accounts.Account) *bind.CallOpts {
		return r0
	})
}

func (f *NetworkGetCallOptsLatestBlockFunc) nextHook() func(context.Context, accounts.Account) *bind.CallOpts {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetCallOptsLatestBlockFunc) appendCall(r0 NetworkGetCallOptsLatestBlockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetCallOptsLatestBlockFuncCall
// objects describing the invocations of this function.
func (f *NetworkGetCallOptsLatestBlockFunc) History() []NetworkGetCallOptsLatestBlockFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetCallOptsLatestBlockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetCallOptsLatestBlockFuncCall is an object that describes an
// invocation of method GetCallOptsLatestBlock on an instance of
// MockNetwork.
type NetworkGetCallOptsLatestBlockFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.CallOpts
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetCallOptsLatestBlockFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetCallOptsLatestBlockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetClientFunc describes the behavior when the GetClient method of
// the parent MockNetwork instance is invoked.
type NetworkGetClientFunc struct {
	defaultHook func() ethereum.Client
	hooks       []func() ethereum.Client
	history     []NetworkGetClientFuncCall
	mutex       sync.Mutex
}

// GetClient delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) GetClient() ethereum.Client {
	r0 := m.GetClientFunc.nextHook()()
	m.GetClientFunc.appendCall(NetworkGetClientFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetClient method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkGetClientFunc) SetDefaultHook(hook func() ethereum.Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetClient method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetClientFunc) PushHook(hook func() ethereum.Client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetClientFunc) SetDefaultReturn(r0 ethereum.Client) {
	f.SetDefaultHook(func() ethereum.Client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetClientFunc) PushReturn(r0 ethereum.Client) {
	f.PushHook(func() ethereum.Client {
		return r0
	})
}

func (f *NetworkGetClientFunc) nextHook() func() ethereum.Client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetClientFunc) appendCall(r0 NetworkGetClientFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetClientFuncCall objects describing
// the invocations of this function.
func (f *NetworkGetClientFunc) History() []NetworkGetClientFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetClientFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetClientFuncCall is an object that describes an invocation of
// method GetClient on an instance of MockNetwork.
type NetworkGetClientFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ethereum.Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetClientFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetClientFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetCoinbaseAddressFunc describes the behavior when the
// GetCoinbaseAddress method of the parent MockNetwork instance is invoked.
type NetworkGetCoinbaseAddressFunc struct {
	defaultHook func() common.Address
	hooks       []func() common.Address
	history     []NetworkGetCoinbaseAddressFuncCall
	mutex       sync.Mutex
}

// GetCoinbaseAddress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetCoinbaseAddress() common.Address {
	r0 := m.GetCoinbaseAddressFunc.nextHook()()
	m.GetCoinbaseAddressFunc.appendCall(NetworkGetCoinbaseAddressFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetCoinbaseAddress
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetCoinbaseAddressFunc) SetDefaultHook(hook func() common.Address) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCoinbaseAddress method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetCoinbaseAddressFunc) PushHook(hook func() common.Address) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetCoinbaseAddressFunc) SetDefaultReturn(r0 common.Address) {
	f.SetDefaultHook(func() common.Address {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetCoinbaseAddressFunc) PushReturn(r0 common.Address) {
	f.PushHook(func() common.Address {
		return r0
	})
}

func (f *NetworkGetCoinbaseAddressFunc) nextHook() func() common.Address {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetCoinbaseAddressFunc) appendCall(r0 NetworkGetCoinbaseAddressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetCoinbaseAddressFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetCoinbaseAddressFunc) History() []NetworkGetCoinbaseAddressFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetCoinbaseAddressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetCoinbaseAddressFuncCall is an object that describes an
// invocation of method GetCoinbaseAddress on an instance of MockNetwork.
type NetworkGetCoinbaseAddressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.Address
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetCoinbaseAddressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetCoinbaseAddressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetCurrentHeightFunc describes the behavior when the
// GetCurrentHeight method of the parent MockNetwork instance is invoked.
type NetworkGetCurrentHeightFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []NetworkGetCurrentHeightFuncCall
	mutex       sync.Mutex
}

// GetCurrentHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetCurrentHeight(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetCurrentHeightFunc.nextHook()(v0)
	m.GetCurrentHeightFunc.appendCall(NetworkGetCurrentHeightFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCurrentHeight
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetCurrentHeightFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCurrentHeight method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetCurrentHeightFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetCurrentHeightFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetCurrentHeightFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *NetworkGetCurrentHeightFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetCurrentHeightFunc) appendCall(r0 NetworkGetCurrentHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetCurrentHeightFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetCurrentHeightFunc) History() []NetworkGetCurrentHeightFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetCurrentHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetCurrentHeightFuncCall is an object that describes an invocation
// of method GetCurrentHeight on an instance of MockNetwork.
type NetworkGetCurrentHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetCurrentHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetCurrentHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetDefaultAccountFunc describes the behavior when the
// GetDefaultAccount method of the parent MockNetwork instance is invoked.
type NetworkGetDefaultAccountFunc struct {
	defaultHook func() accounts.Account
	hooks       []func() accounts.Account
	history     []NetworkGetDefaultAccountFuncCall
	mutex       sync.Mutex
}

// GetDefaultAccount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetDefaultAccount() accounts.Account {
	r0 := m.GetDefaultAccountFunc.nextHook()()
	m.GetDefaultAccountFunc.appendCall(NetworkGetDefaultAccountFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetDefaultAccount
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetDefaultAccountFunc) SetDefaultHook(hook func() accounts.Account) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultAccount method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetDefaultAccountFunc) PushHook(hook func() accounts.Account) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetDefaultAccountFunc) SetDefaultReturn(r0 accounts.Account) {
	f.SetDefaultHook(func() accounts.Account {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetDefaultAccountFunc) PushReturn(r0 accounts.Account) {
	f.PushHook(func() accounts.Account {
		return r0
	})
}

func (f *NetworkGetDefaultAccountFunc) nextHook() func() accounts.Account {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetDefaultAccountFunc) appendCall(r0 NetworkGetDefaultAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetDefaultAccountFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetDefaultAccountFunc) History() []NetworkGetDefaultAccountFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetDefaultAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetDefaultAccountFuncCall is an object that describes an
// invocation of method GetDefaultAccount on an instance of MockNetwork.
type NetworkGetDefaultAccountFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 accounts.Account
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetDefaultAccountFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetDefaultAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetEndpointFunc describes the behavior when the GetEndpoint method
// of the parent MockNetwork instance is invoked.
type NetworkGetEndpointFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []NetworkGetEndpointFuncCall
	mutex       sync.Mutex
}

// GetEndpoint delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetEndpoint() string {
	r0 := m.GetEndpointFunc.nextHook()()
	m.GetEndpointFunc.appendCall(NetworkGetEndpointFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetEndpoint method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkGetEndpointFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEndpoint method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetEndpointFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetEndpointFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetEndpointFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *NetworkGetEndpointFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetEndpointFunc) appendCall(r0 NetworkGetEndpointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetEndpointFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetEndpointFunc) History() []NetworkGetEndpointFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetEndpointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetEndpointFuncCall is an object that describes an invocation of
// method GetEndpoint on an instance of MockNetwork.
type NetworkGetEndpointFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetEndpointFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetEndpointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetEventsFunc describes the behavior when the GetEvents method of
// the parent MockNetwork instance is invoked.
type NetworkGetEventsFunc struct {
	defaultHook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)
	hooks       []func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)
	history     []NetworkGetEventsFuncCall
	mutex       sync.Mutex
}

// GetEvents delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) GetEvents(v0 context.Context, v1 uint64, v2 uint64, v3 []common.Address) ([]types.Log, error) {
	r0, r1 := m.GetEventsFunc.nextHook()(v0, v1, v2, v3)
	m.GetEventsFunc.appendCall(NetworkGetEventsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEvents method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkGetEventsFunc) SetDefaultHook(hook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEvents method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetEventsFunc) PushHook(hook func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetEventsFunc) SetDefaultReturn(r0 []types.Log, r1 error) {
	f.SetDefaultHook(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetEventsFunc) PushReturn(r0 []types.Log, r1 error) {
	f.PushHook(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
		return r0, r1
	})
}

func (f *NetworkGetEventsFunc) nextHook() func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetEventsFunc) appendCall(r0 NetworkGetEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetEventsFuncCall objects describing
// the invocations of this function.
func (f *NetworkGetEventsFunc) History() []NetworkGetEventsFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetEventsFuncCall is an object that describes an invocation of
// method GetEvents on an instance of MockNetwork.
type NetworkGetEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []common.Address
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Log
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetFinalityDelayFunc describes the behavior when the
// GetFinalityDelay method of the parent MockNetwork instance is invoked.
type NetworkGetFinalityDelayFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []NetworkGetFinalityDelayFuncCall
	mutex       sync.Mutex
}

// GetFinalityDelay delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetFinalityDelay() uint64 {
	r0 := m.GetFinalityDelayFunc.nextHook()()
	m.GetFinalityDelayFunc.appendCall(NetworkGetFinalityDelayFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetFinalityDelay
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetFinalityDelayFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFinalityDelay method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetFinalityDelayFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetFinalityDelayFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetFinalityDelayFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *NetworkGetFinalityDelayFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetFinalityDelayFunc) appendCall(r0 NetworkGetFinalityDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetFinalityDelayFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetFinalityDelayFunc) History() []NetworkGetFinalityDelayFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetFinalityDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetFinalityDelayFuncCall is an object that describes an invocation
// of method GetFinalityDelay on an instance of MockNetwork.
type NetworkGetFinalityDelayFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetFinalityDelayFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetFinalityDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetFinalizedHeightFunc describes the behavior when the
// GetFinalizedHeight method of the parent MockNetwork instance is invoked.
type NetworkGetFinalizedHeightFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []NetworkGetFinalizedHeightFuncCall
	mutex       sync.Mutex
}

// GetFinalizedHeight delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetFinalizedHeight(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetFinalizedHeightFunc.nextHook()(v0)
	m.GetFinalizedHeightFunc.appendCall(NetworkGetFinalizedHeightFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFinalizedHeight
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetFinalizedHeightFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFinalizedHeight method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetFinalizedHeightFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetFinalizedHeightFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetFinalizedHeightFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *NetworkGetFinalizedHeightFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetFinalizedHeightFunc) appendCall(r0 NetworkGetFinalizedHeightFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetFinalizedHeightFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetFinalizedHeightFunc) History() []NetworkGetFinalizedHeightFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetFinalizedHeightFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetFinalizedHeightFuncCall is an object that describes an
// invocation of method GetFinalizedHeight on an instance of MockNetwork.
type NetworkGetFinalizedHeightFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetFinalizedHeightFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetFinalizedHeightFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetKnownAccountsFunc describes the behavior when the
// GetKnownAccounts method of the parent MockNetwork instance is invoked.
type NetworkGetKnownAccountsFunc struct {
	defaultHook func() []accounts.Account
	hooks       []func() []accounts.Account
	history     []NetworkGetKnownAccountsFuncCall
	mutex       sync.Mutex
}

// GetKnownAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetKnownAccounts() []accounts.Account {
	r0 := m.GetKnownAccountsFunc.nextHook()()
	m.GetKnownAccountsFunc.appendCall(NetworkGetKnownAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetKnownAccounts
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetKnownAccountsFunc) SetDefaultHook(hook func() []accounts.Account) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetKnownAccounts method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetKnownAccountsFunc) PushHook(hook func() []accounts.Account) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetKnownAccountsFunc) SetDefaultReturn(r0 []accounts.Account) {
	f.SetDefaultHook(func() []accounts.Account {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetKnownAccountsFunc) PushReturn(r0 []accounts.Account) {
	f.PushHook(func() []accounts.Account {
		return r0
	})
}

func (f *NetworkGetKnownAccountsFunc) nextHook() func() []accounts.Account {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetKnownAccountsFunc) appendCall(r0 NetworkGetKnownAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetKnownAccountsFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetKnownAccountsFunc) History() []NetworkGetKnownAccountsFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetKnownAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetKnownAccountsFuncCall is an object that describes an invocation
// of method GetKnownAccounts on an instance of MockNetwork.
type NetworkGetKnownAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []accounts.Account
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetKnownAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetKnownAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetPeerCountFunc describes the behavior when the GetPeerCount
// method of the parent MockNetwork instance is invoked.
type NetworkGetPeerCountFunc struct {
	defaultHook func(context.Context) (uint64, error)
	hooks       []func(context.Context) (uint64, error)
	history     []NetworkGetPeerCountFuncCall
	mutex       sync.Mutex
}

// GetPeerCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetPeerCount(v0 context.Context) (uint64, error) {
	r0, r1 := m.GetPeerCountFunc.nextHook()(v0)
	m.GetPeerCountFunc.appendCall(NetworkGetPeerCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPeerCount method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkGetPeerCountFunc) SetDefaultHook(hook func(context.Context) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPeerCount method of the parent MockNetwork instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetPeerCountFunc) PushHook(hook func(context.Context) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetPeerCountFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetPeerCountFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context) (uint64, error) {
		return r0, r1
	})
}

func (f *NetworkGetPeerCountFunc) nextHook() func(context.Context) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetPeerCountFunc) appendCall(r0 NetworkGetPeerCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetPeerCountFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetPeerCountFunc) History() []NetworkGetPeerCountFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetPeerCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetPeerCountFuncCall is an object that describes an invocation of
// method GetPeerCount on an instance of MockNetwork.
type NetworkGetPeerCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetPeerCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetPeerCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetSnapshotFunc describes the behavior when the GetSnapshot method
// of the parent MockNetwork instance is invoked.
type NetworkGetSnapshotFunc struct {
	defaultHook func() ([]byte, error)
	hooks       []func() ([]byte, error)
	history     []NetworkGetSnapshotFuncCall
	mutex       sync.Mutex
}

// GetSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetSnapshot() ([]byte, error) {
	r0, r1 := m.GetSnapshotFunc.nextHook()()
	m.GetSnapshotFunc.appendCall(NetworkGetSnapshotFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSnapshot method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkGetSnapshotFunc) SetDefaultHook(hook func() ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSnapshot method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetSnapshotFunc) PushHook(hook func() ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetSnapshotFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func() ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetSnapshotFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func() ([]byte, error) {
		return r0, r1
	})
}

func (f *NetworkGetSnapshotFunc) nextHook() func() ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetSnapshotFunc) appendCall(r0 NetworkGetSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetSnapshotFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetSnapshotFunc) History() []NetworkGetSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetSnapshotFuncCall is an object that describes an invocation of
// method GetSnapshot on an instance of MockNetwork.
type NetworkGetSnapshotFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetSnapshotFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetSyncProgressFunc describes the behavior when the
// GetSyncProgress method of the parent MockNetwork instance is invoked.
type NetworkGetSyncProgressFunc struct {
	defaultHook func() (bool, *goethereum.SyncProgress, error)
	hooks       []func() (bool, *goethereum.SyncProgress, error)
	history     []NetworkGetSyncProgressFuncCall
	mutex       sync.Mutex
}

// GetSyncProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetSyncProgress() (bool, *goethereum.SyncProgress, error) {
	r0, r1, r2 := m.GetSyncProgressFunc.nextHook()()
	m.GetSyncProgressFunc.appendCall(NetworkGetSyncProgressFuncCall{r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetSyncProgress
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetSyncProgressFunc) SetDefaultHook(hook func() (bool, *goethereum.SyncProgress, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncProgress method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetSyncProgressFunc) PushHook(hook func() (bool, *goethereum.SyncProgress, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetSyncProgressFunc) SetDefaultReturn(r0 bool, r1 *goethereum.SyncProgress, r2 error) {
	f.SetDefaultHook(func() (bool, *goethereum.SyncProgress, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetSyncProgressFunc) PushReturn(r0 bool, r1 *goethereum.SyncProgress, r2 error) {
	f.PushHook(func() (bool, *goethereum.SyncProgress, error) {
		return r0, r1, r2
	})
}

func (f *NetworkGetSyncProgressFunc) nextHook() func() (bool, *goethereum.SyncProgress, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetSyncProgressFunc) appendCall(r0 NetworkGetSyncProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetSyncProgressFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetSyncProgressFunc) History() []NetworkGetSyncProgressFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetSyncProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetSyncProgressFuncCall is an object that describes an invocation
// of method GetSyncProgress on an instance of MockNetwork.
type NetworkGetSyncProgressFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *goethereum.SyncProgress
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetSyncProgressFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetSyncProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// NetworkGetTimeoutContextFunc describes the behavior when the
// GetTimeoutContext method of the parent MockNetwork instance is invoked.
type NetworkGetTimeoutContextFunc struct {
	defaultHook func() (context.Context, context.CancelFunc)
	hooks       []func() (context.Context, context.CancelFunc)
	history     []NetworkGetTimeoutContextFuncCall
	mutex       sync.Mutex
}

// GetTimeoutContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetTimeoutContext() (context.Context, context.CancelFunc) {
	r0, r1 := m.GetTimeoutContextFunc.nextHook()()
	m.GetTimeoutContextFunc.appendCall(NetworkGetTimeoutContextFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTimeoutContext
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetTimeoutContextFunc) SetDefaultHook(hook func() (context.Context, context.CancelFunc)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTimeoutContext method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetTimeoutContextFunc) PushHook(hook func() (context.Context, context.CancelFunc)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetTimeoutContextFunc) SetDefaultReturn(r0 context.Context, r1 context.CancelFunc) {
	f.SetDefaultHook(func() (context.Context, context.CancelFunc) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetTimeoutContextFunc) PushReturn(r0 context.Context, r1 context.CancelFunc) {
	f.PushHook(func() (context.Context, context.CancelFunc) {
		return r0, r1
	})
}

func (f *NetworkGetTimeoutContextFunc) nextHook() func() (context.Context, context.CancelFunc) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetTimeoutContextFunc) appendCall(r0 NetworkGetTimeoutContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetTimeoutContextFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetTimeoutContextFunc) History() []NetworkGetTimeoutContextFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetTimeoutContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetTimeoutContextFuncCall is an object that describes an
// invocation of method GetTimeoutContext on an instance of MockNetwork.
type NetworkGetTimeoutContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 context.CancelFunc
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetTimeoutContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetTimeoutContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetTransactionOptsFunc describes the behavior when the
// GetTransactionOpts method of the parent MockNetwork instance is invoked.
type NetworkGetTransactionOptsFunc struct {
	defaultHook func(context.Context, accounts.Account) (*bind.TransactOpts, error)
	hooks       []func(context.Context, accounts.Account) (*bind.TransactOpts, error)
	history     []NetworkGetTransactionOptsFuncCall
	mutex       sync.Mutex
}

// GetTransactionOpts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) GetTransactionOpts(v0 context.Context, v1 accounts.Account) (*bind.TransactOpts, error) {
	r0, r1 := m.GetTransactionOptsFunc.nextHook()(v0, v1)
	m.GetTransactionOptsFunc.appendCall(NetworkGetTransactionOptsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTransactionOpts
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkGetTransactionOptsFunc) SetDefaultHook(hook func(context.Context, accounts.Account) (*bind.TransactOpts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTransactionOpts method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkGetTransactionOptsFunc) PushHook(hook func(context.Context, accounts.Account) (*bind.TransactOpts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetTransactionOptsFunc) SetDefaultReturn(r0 *bind.TransactOpts, r1 error) {
	f.SetDefaultHook(func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetTransactionOptsFunc) PushReturn(r0 *bind.TransactOpts, r1 error) {
	f.PushHook(func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
		return r0, r1
	})
}

func (f *NetworkGetTransactionOptsFunc) nextHook() func(context.Context, accounts.Account) (*bind.TransactOpts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetTransactionOptsFunc) appendCall(r0 NetworkGetTransactionOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetTransactionOptsFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetTransactionOptsFunc) History() []NetworkGetTransactionOptsFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetTransactionOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetTransactionOptsFuncCall is an object that describes an
// invocation of method GetTransactionOpts on an instance of MockNetwork.
type NetworkGetTransactionOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bind.TransactOpts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetTransactionOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetTransactionOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkGetTxFeePercentageToIncreaseFunc describes the behavior when the
// GetTxFeePercentageToIncrease method of the parent MockNetwork instance is
// invoked.
type NetworkGetTxFeePercentageToIncreaseFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []NetworkGetTxFeePercentageToIncreaseFuncCall
	mutex       sync.Mutex
}

// GetTxFeePercentageToIncrease delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockNetwork) GetTxFeePercentageToIncrease() int {
	r0 := m.GetTxFeePercentageToIncreaseFunc.nextHook()()
	m.GetTxFeePercentageToIncreaseFunc.appendCall(NetworkGetTxFeePercentageToIncreaseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxFeePercentageToIncrease method of the parent MockNetwork instance is
// invoked and the hook queue is empty.
func (f *NetworkGetTxFeePercentageToIncreaseFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxFeePercentageToIncrease method of the parent MockNetwork instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *NetworkGetTxFeePercentageToIncreaseFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetTxFeePercentageToIncreaseFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetTxFeePercentageToIncreaseFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *NetworkGetTxFeePercentageToIncreaseFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetTxFeePercentageToIncreaseFunc) appendCall(r0 NetworkGetTxFeePercentageToIncreaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetTxFeePercentageToIncreaseFuncCall
// objects describing the invocations of this function.
func (f *NetworkGetTxFeePercentageToIncreaseFunc) History() []NetworkGetTxFeePercentageToIncreaseFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetTxFeePercentageToIncreaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetTxFeePercentageToIncreaseFuncCall is an object that describes
// an invocation of method GetTxFeePercentageToIncrease on an instance of
// MockNetwork.
type NetworkGetTxFeePercentageToIncreaseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetTxFeePercentageToIncreaseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetTxFeePercentageToIncreaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetTxMaxGasFeeAllowedInGweiFunc describes the behavior when the
// GetTxMaxGasFeeAllowedInGwei method of the parent MockNetwork instance is
// invoked.
type NetworkGetTxMaxGasFeeAllowedInGweiFunc struct {
	defaultHook func() uint64
	hooks       []func() uint64
	history     []NetworkGetTxMaxGasFeeAllowedInGweiFuncCall
	mutex       sync.Mutex
}

// GetTxMaxGasFeeAllowedInGwei delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockNetwork) GetTxMaxGasFeeAllowedInGwei() uint64 {
	r0 := m.GetTxMaxGasFeeAllowedInGweiFunc.nextHook()()
	m.GetTxMaxGasFeeAllowedInGweiFunc.appendCall(NetworkGetTxMaxGasFeeAllowedInGweiFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetTxMaxGasFeeAllowedInGwei method of the parent MockNetwork instance is
// invoked and the hook queue is empty.
func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) SetDefaultHook(hook func() uint64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTxMaxGasFeeAllowedInGwei method of the parent MockNetwork instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) PushHook(hook func() uint64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) SetDefaultReturn(r0 uint64) {
	f.SetDefaultHook(func() uint64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) PushReturn(r0 uint64) {
	f.PushHook(func() uint64 {
		return r0
	})
}

func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) nextHook() func() uint64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) appendCall(r0 NetworkGetTxMaxGasFeeAllowedInGweiFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetTxMaxGasFeeAllowedInGweiFuncCall
// objects describing the invocations of this function.
func (f *NetworkGetTxMaxGasFeeAllowedInGweiFunc) History() []NetworkGetTxMaxGasFeeAllowedInGweiFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetTxMaxGasFeeAllowedInGweiFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetTxMaxGasFeeAllowedInGweiFuncCall is an object that describes an
// invocation of method GetTxMaxGasFeeAllowedInGwei on an instance of
// MockNetwork.
type NetworkGetTxMaxGasFeeAllowedInGweiFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetTxMaxGasFeeAllowedInGweiFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetTxMaxGasFeeAllowedInGweiFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkGetValidatorsFunc describes the behavior when the GetValidators
// method of the parent MockNetwork instance is invoked.
type NetworkGetValidatorsFunc struct {
	defaultHook func(context.Context) ([]common.Address, error)
	hooks       []func(context.Context) ([]common.Address, error)
	history     []NetworkGetValidatorsFuncCall
	mutex       sync.Mutex
}

// GetValidators delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) GetValidators(v0 context.Context) ([]common.Address, error) {
	r0, r1 := m.GetValidatorsFunc.nextHook()(v0)
	m.GetValidatorsFunc.appendCall(NetworkGetValidatorsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetValidators method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkGetValidatorsFunc) SetDefaultHook(hook func(context.Context) ([]common.Address, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetValidators method of the parent MockNetwork instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkGetValidatorsFunc) PushHook(hook func(context.Context) ([]common.Address, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkGetValidatorsFunc) SetDefaultReturn(r0 []common.Address, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]common.Address, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkGetValidatorsFunc) PushReturn(r0 []common.Address, r1 error) {
	f.PushHook(func(context.Context) ([]common.Address, error) {
		return r0, r1
	})
}

func (f *NetworkGetValidatorsFunc) nextHook() func(context.Context) ([]common.Address, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkGetValidatorsFunc) appendCall(r0 NetworkGetValidatorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkGetValidatorsFuncCall objects
// describing the invocations of this function.
func (f *NetworkGetValidatorsFunc) History() []NetworkGetValidatorsFuncCall {
	f.mutex.Lock()
	history := make([]NetworkGetValidatorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkGetValidatorsFuncCall is an object that describes an invocation of
// method GetValidators on an instance of MockNetwork.
type NetworkGetValidatorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []common.Address
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkGetValidatorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkGetValidatorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkIsAccessibleFunc describes the behavior when the IsAccessible
// method of the parent MockNetwork instance is invoked.
type NetworkIsAccessibleFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []NetworkIsAccessibleFuncCall
	mutex       sync.Mutex
}

// IsAccessible delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) IsAccessible() bool {
	r0 := m.IsAccessibleFunc.nextHook()()
	m.IsAccessibleFunc.appendCall(NetworkIsAccessibleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsAccessible method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkIsAccessibleFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsAccessible method of the parent MockNetwork instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkIsAccessibleFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkIsAccessibleFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkIsAccessibleFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *NetworkIsAccessibleFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkIsAccessibleFunc) appendCall(r0 NetworkIsAccessibleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkIsAccessibleFuncCall objects
// describing the invocations of this function.
func (f *NetworkIsAccessibleFunc) History() []NetworkIsAccessibleFuncCall {
	f.mutex.Lock()
	history := make([]NetworkIsAccessibleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkIsAccessibleFuncCall is an object that describes an invocation of
// method IsAccessible on an instance of MockNetwork.
type NetworkIsAccessibleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkIsAccessibleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkIsAccessibleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkRetryCountFunc describes the behavior when the RetryCount method
// of the parent MockNetwork instance is invoked.
type NetworkRetryCountFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []NetworkRetryCountFuncCall
	mutex       sync.Mutex
}

// RetryCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) RetryCount() int {
	r0 := m.RetryCountFunc.nextHook()()
	m.RetryCountFunc.appendCall(NetworkRetryCountFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RetryCount method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkRetryCountFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RetryCount method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkRetryCountFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkRetryCountFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkRetryCountFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *NetworkRetryCountFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkRetryCountFunc) appendCall(r0 NetworkRetryCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkRetryCountFuncCall objects
// describing the invocations of this function.
func (f *NetworkRetryCountFunc) History() []NetworkRetryCountFuncCall {
	f.mutex.Lock()
	history := make([]NetworkRetryCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkRetryCountFuncCall is an object that describes an invocation of
// method RetryCount on an instance of MockNetwork.
type NetworkRetryCountFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkRetryCountFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkRetryCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkRetryDelayFunc describes the behavior when the RetryDelay method
// of the parent MockNetwork instance is invoked.
type NetworkRetryDelayFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []NetworkRetryDelayFuncCall
	mutex       sync.Mutex
}

// RetryDelay delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) RetryDelay() time.Duration {
	r0 := m.RetryDelayFunc.nextHook()()
	m.RetryDelayFunc.appendCall(NetworkRetryDelayFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RetryDelay method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkRetryDelayFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RetryDelay method of the parent MockNetwork instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkRetryDelayFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkRetryDelayFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkRetryDelayFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *NetworkRetryDelayFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkRetryDelayFunc) appendCall(r0 NetworkRetryDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkRetryDelayFuncCall objects
// describing the invocations of this function.
func (f *NetworkRetryDelayFunc) History() []NetworkRetryDelayFuncCall {
	f.mutex.Lock()
	history := make([]NetworkRetryDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkRetryDelayFuncCall is an object that describes an invocation of
// method RetryDelay on an instance of MockNetwork.
type NetworkRetryDelayFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkRetryDelayFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkRetryDelayFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkSetFinalityDelayFunc describes the behavior when the
// SetFinalityDelay method of the parent MockNetwork instance is invoked.
type NetworkSetFinalityDelayFunc struct {
	defaultHook func(uint64)
	hooks       []func(uint64)
	history     []NetworkSetFinalityDelayFuncCall
	mutex       sync.Mutex
}

// SetFinalityDelay delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockNetwork) SetFinalityDelay(v0 uint64) {
	m.SetFinalityDelayFunc.nextHook()(v0)
	m.SetFinalityDelayFunc.appendCall(NetworkSetFinalityDelayFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetFinalityDelay
// method of the parent MockNetwork instance is invoked and the hook queue
// is empty.
func (f *NetworkSetFinalityDelayFunc) SetDefaultHook(hook func(uint64)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetFinalityDelay method of the parent MockNetwork instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NetworkSetFinalityDelayFunc) PushHook(hook func(uint64)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkSetFinalityDelayFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(uint64) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkSetFinalityDelayFunc) PushReturn() {
	f.PushHook(func(uint64) {
		return
	})
}

func (f *NetworkSetFinalityDelayFunc) nextHook() func(uint64) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkSetFinalityDelayFunc) appendCall(r0 NetworkSetFinalityDelayFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkSetFinalityDelayFuncCall objects
// describing the invocations of this function.
func (f *NetworkSetFinalityDelayFunc) History() []NetworkSetFinalityDelayFuncCall {
	f.mutex.Lock()
	history := make([]NetworkSetFinalityDelayFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkSetFinalityDelayFuncCall is an object that describes an invocation
// of method SetFinalityDelay on an instance of MockNetwork.
type NetworkSetFinalityDelayFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 uint64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkSetFinalityDelayFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkSetFinalityDelayFuncCall) Results() []interface{} {
	return []interface{}{}
}

// NetworkTimeoutFunc describes the behavior when the Timeout method of the
// parent MockNetwork instance is invoked.
type NetworkTimeoutFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []NetworkTimeoutFuncCall
	mutex       sync.Mutex
}

// Timeout delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNetwork) Timeout() time.Duration {
	r0 := m.TimeoutFunc.nextHook()()
	m.TimeoutFunc.appendCall(NetworkTimeoutFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Timeout method of
// the parent MockNetwork instance is invoked and the hook queue is empty.
func (f *NetworkTimeoutFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Timeout method of the parent MockNetwork instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *NetworkTimeoutFunc) PushHook(hook func() time.Duration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkTimeoutFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkTimeoutFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *NetworkTimeoutFunc) nextHook() func() time.Duration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkTimeoutFunc) appendCall(r0 NetworkTimeoutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkTimeoutFuncCall objects describing
// the invocations of this function.
func (f *NetworkTimeoutFunc) History() []NetworkTimeoutFuncCall {
	f.mutex.Lock()
	history := make([]NetworkTimeoutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkTimeoutFuncCall is an object that describes an invocation of
// method Timeout on an instance of MockNetwork.
type NetworkTimeoutFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkTimeoutFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkTimeoutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkTransferEtherFunc describes the behavior when the TransferEther
// method of the parent MockNetwork instance is invoked.
type NetworkTransferEtherFunc struct {
	defaultHook func(common.Address, common.Address, *big.Int) (*types.Transaction, error)
	hooks       []func(common.Address, common.Address, *big.Int) (*types.Transaction, error)
	history     []NetworkTransferEtherFuncCall
	mutex       sync.Mutex
}

// TransferEther delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) TransferEther(v0 common.Address, v1 common.Address, v2 *big.Int) (*types.Transaction, error) {
	r0, r1 := m.TransferEtherFunc.nextHook()(v0, v1, v2)
	m.TransferEtherFunc.appendCall(NetworkTransferEtherFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransferEther method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkTransferEtherFunc) SetDefaultHook(hook func(common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransferEther method of the parent MockNetwork instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkTransferEtherFunc) PushHook(hook func(common.Address, common.Address, *big.Int) (*types.Transaction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkTransferEtherFunc) SetDefaultReturn(r0 *types.Transaction, r1 error) {
	f.SetDefaultHook(func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkTransferEtherFunc) PushReturn(r0 *types.Transaction, r1 error) {
	f.PushHook(func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
		return r0, r1
	})
}

func (f *NetworkTransferEtherFunc) nextHook() func(common.Address, common.Address, *big.Int) (*types.Transaction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkTransferEtherFunc) appendCall(r0 NetworkTransferEtherFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkTransferEtherFuncCall objects
// describing the invocations of this function.
func (f *NetworkTransferEtherFunc) History() []NetworkTransferEtherFuncCall {
	f.mutex.Lock()
	history := make([]NetworkTransferEtherFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkTransferEtherFuncCall is an object that describes an invocation of
// method TransferEther on an instance of MockNetwork.
type NetworkTransferEtherFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.Address
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 common.Address
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *big.Int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Transaction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkTransferEtherFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkTransferEtherFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NetworkUnlockAccountFunc describes the behavior when the UnlockAccount
// method of the parent MockNetwork instance is invoked.
type NetworkUnlockAccountFunc struct {
	defaultHook func(accounts.Account) error
	hooks       []func(accounts.Account) error
	history     []NetworkUnlockAccountFuncCall
	mutex       sync.Mutex
}

// UnlockAccount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNetwork) UnlockAccount(v0 accounts.Account) error {
	r0 := m.UnlockAccountFunc.nextHook()(v0)
	m.UnlockAccountFunc.appendCall(NetworkUnlockAccountFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UnlockAccount method
// of the parent MockNetwork instance is invoked and the hook queue is
// empty.
func (f *NetworkUnlockAccountFunc) SetDefaultHook(hook func(accounts.Account) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UnlockAccount method of the parent MockNetwork instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NetworkUnlockAccountFunc) PushHook(hook func(accounts.Account) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkUnlockAccountFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(accounts.Account) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkUnlockAccountFunc) PushReturn(r0 error) {
	f.PushHook(func(accounts.Account) error {
		return r0
	})
}

func (f *NetworkUnlockAccountFunc) nextHook() func(accounts.Account) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkUnlockAccountFunc) appendCall(r0 NetworkUnlockAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkUnlockAccountFuncCall objects
// describing the invocations of this function.
func (f *NetworkUnlockAccountFunc) History() []NetworkUnlockAccountFuncCall {
	f.mutex.Lock()
	history := make([]NetworkUnlockAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkUnlockAccountFuncCall is an object that describes an invocation of
// method UnlockAccount on an instance of MockNetwork.
type NetworkUnlockAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 accounts.Account
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkUnlockAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkUnlockAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NetworkUnlockAccountWithPasscodeFunc describes the behavior when the
// UnlockAccountWithPasscode method of the parent MockNetwork instance is
// invoked.
type NetworkUnlockAccountWithPasscodeFunc struct {
	defaultHook func(accounts.Account, string) error
	hooks       []func(accounts.Account, string) error
	history     []NetworkUnlockAccountWithPasscodeFuncCall
	mutex       sync.Mutex
}

// UnlockAccountWithPasscode delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockNetwork) UnlockAccountWithPasscode(v0 accounts.Account, v1 string) error {
	r0 := m.UnlockAccountWithPasscodeFunc.nextHook()(v0, v1)
	m.UnlockAccountWithPasscodeFunc.appendCall(NetworkUnlockAccountWithPasscodeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UnlockAccountWithPasscode method of the parent MockNetwork instance is
// invoked and the hook queue is empty.
func (f *NetworkUnlockAccountWithPasscodeFunc) SetDefaultHook(hook func(accounts.Account, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UnlockAccountWithPasscode method of the parent MockNetwork instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *NetworkUnlockAccountWithPasscodeFunc) PushHook(hook func(accounts.Account, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NetworkUnlockAccountWithPasscodeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(accounts.Account, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NetworkUnlockAccountWithPasscodeFunc) PushReturn(r0 error) {
	f.PushHook(func(accounts.Account, string) error {
		return r0
	})
}

func (f *NetworkUnlockAccountWithPasscodeFunc) nextHook() func(accounts.Account, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NetworkUnlockAccountWithPasscodeFunc) appendCall(r0 NetworkUnlockAccountWithPasscodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NetworkUnlockAccountWithPasscodeFuncCall
// objects describing the invocations of this function.
func (f *NetworkUnlockAccountWithPasscodeFunc) History() []NetworkUnlockAccountWithPasscodeFuncCall {
	f.mutex.Lock()
	history := make([]NetworkUnlockAccountWithPasscodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NetworkUnlockAccountWithPasscodeFuncCall is an object that describes an
// invocation of method UnlockAccountWithPasscode on an instance of
// MockNetwork.
type NetworkUnlockAccountWithPasscodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 accounts.Account
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NetworkUnlockAccountWithPasscodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NetworkUnlockAccountWithPasscodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
