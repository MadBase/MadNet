// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Constants defined in application.capnp.
var (
	DefaultDSPreImage   = DSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[0:144]).Struct()}
	DefaultDSLinker     = DSLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[144:312]).Struct()}
	DefaultVSPreImage   = VSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[312:416]).Struct()}
	DefaultASPreImage   = ASPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[416:528]).Struct()}
	DefaultTFPreImage   = TFPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[528:584]).Struct()}
	DefaultTXInPreImage = TXInPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[584:624]).Struct()}
	DefaultTXInLinker   = TXInLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[624:688]).Struct()}
)

func init() {
	// Set traversal limit for constants as Uint64Max since they're safe from amplification attacks.
	DefaultDSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultDSLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultVSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultASPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTFPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
}

type DSPreImage struct{ capnp.Struct }

// DSPreImage_TypeID is the unique identifier for the type DSPreImage.
const DSPreImage_TypeID = 0xd4eb3c212b8dbb26

func NewDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func NewRootDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func ReadRootDSPreImage(msg *capnp.Message) (DSPreImage, error) {
	root, err := msg.RootPtr()
	return DSPreImage{root.Struct()}, err
}

func (s DSPreImage) String() string {
	str, _ := text.Marshal(0xd4eb3c212b8dbb26, s.Struct)
	return str
}

func (s DSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s DSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DSPreImage) Index() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasIndex() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetIndex(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s DSPreImage) IssuedAt() uint32 {
	return s.Struct.Uint32(4)
}

func (s DSPreImage) SetIssuedAt(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s DSPreImage) RawData() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasRawData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetRawData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s DSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(12)
}

func (s DSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s DSPreImage) Deposit() uint32 {
	return s.Struct.Uint32(8)
}

func (s DSPreImage) SetDeposit(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DSPreImage) Deposit1() uint32 {
	return s.Struct.Uint32(16)
}

func (s DSPreImage) SetDeposit1(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DSPreImage) Deposit2() uint32 {
	return s.Struct.Uint32(20)
}

func (s DSPreImage) SetDeposit2(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s DSPreImage) Deposit3() uint32 {
	return s.Struct.Uint32(24)
}

func (s DSPreImage) SetDeposit3(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s DSPreImage) Deposit4() uint32 {
	return s.Struct.Uint32(28)
}

func (s DSPreImage) SetDeposit4(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s DSPreImage) Deposit5() uint32 {
	return s.Struct.Uint32(32)
}

func (s DSPreImage) SetDeposit5(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s DSPreImage) Deposit6() uint32 {
	return s.Struct.Uint32(36)
}

func (s DSPreImage) SetDeposit6(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s DSPreImage) Deposit7() uint32 {
	return s.Struct.Uint32(40)
}

func (s DSPreImage) SetDeposit7(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s DSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(44)
}

func (s DSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s DSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(48)
}

func (s DSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s DSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(52)
}

func (s DSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s DSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(56)
}

func (s DSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s DSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(60)
}

func (s DSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s DSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(64)
}

func (s DSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s DSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(68)
}

func (s DSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(68, v)
}

func (s DSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(72)
}

func (s DSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(72, v)
}

// DSPreImage_List is a list of DSPreImage.
type DSPreImage_List struct{ capnp.List }

// NewDSPreImage creates a new list of DSPreImage.
func NewDSPreImage_List(s *capnp.Segment, sz int32) (DSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3}, sz)
	return DSPreImage_List{l}, err
}

func (s DSPreImage_List) At(i int) DSPreImage { return DSPreImage{s.List.Struct(i)} }

func (s DSPreImage_List) Set(i int, v DSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s DSPreImage_List) String() string {
	str, _ := text.MarshalList(0xd4eb3c212b8dbb26, s.List)
	return str
}

// DSPreImage_Promise is a wrapper for a DSPreImage promised by a client call.
type DSPreImage_Promise struct{ *capnp.Pipeline }

func (p DSPreImage_Promise) Struct() (DSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return DSPreImage{s}, err
}

type DSLinker struct{ capnp.Struct }

// DSLinker_TypeID is the unique identifier for the type DSLinker.
const DSLinker_TypeID = 0x91989c51606be6c8

func NewDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func NewRootDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func ReadRootDSLinker(msg *capnp.Message) (DSLinker, error) {
	root, err := msg.RootPtr()
	return DSLinker{root.Struct()}, err
}

func (s DSLinker) String() string {
	str, _ := text.Marshal(0x91989c51606be6c8, s.Struct)
	return str
}

func (s DSLinker) DSPreImage() DSPreImage {
	if !s.HasDSPreImage() {
		s.NewDSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[688:832])
	return DSPreImage{Struct: ss}
}

func (s DSLinker) HasDSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetDSPreImage(v DSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSPreImage sets the dSPreImage field to a newly
// allocated DSPreImage struct, preferring placement in s's segment.
func (s DSLinker) NewDSPreImage() (DSPreImage, error) {
	ss, err := NewDSPreImage(s.Struct.Segment())
	if err != nil {
		return DSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DSLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DSLinker_List is a list of DSLinker.
type DSLinker_List struct{ capnp.List }

// NewDSLinker creates a new list of DSLinker.
func NewDSLinker_List(s *capnp.Segment, sz int32) (DSLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DSLinker_List{l}, err
}

func (s DSLinker_List) At(i int) DSLinker { return DSLinker{s.List.Struct(i)} }

func (s DSLinker_List) Set(i int, v DSLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s DSLinker_List) String() string {
	str, _ := text.MarshalList(0x91989c51606be6c8, s.List)
	return str
}

// DSLinker_Promise is a wrapper for a DSLinker promised by a client call.
type DSLinker_Promise struct{ *capnp.Pipeline }

func (p DSLinker_Promise) Struct() (DSLinker, error) {
	s, err := p.Pipeline.Struct()
	return DSLinker{s}, err
}

func (p DSLinker_Promise) DSPreImage() DSPreImage_Promise {
	return DSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[832:976])}
}

type DataStore struct{ capnp.Struct }

// DataStore_TypeID is the unique identifier for the type DataStore.
const DataStore_TypeID = 0x9843dfb8f1386b20

func NewDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func NewRootDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func ReadRootDataStore(msg *capnp.Message) (DataStore, error) {
	root, err := msg.RootPtr()
	return DataStore{root.Struct()}, err
}

func (s DataStore) String() string {
	str, _ := text.Marshal(0x9843dfb8f1386b20, s.Struct)
	return str
}

func (s DataStore) DSLinker() DSLinker {
	if !s.HasDSLinker() {
		s.NewDSLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[976:1144])
	return DSLinker{Struct: ss}
}

func (s DataStore) HasDSLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DataStore) SetDSLinker(v DSLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSLinker sets the dSLinker field to a newly
// allocated DSLinker struct, preferring placement in s's segment.
func (s DataStore) NewDSLinker() (DSLinker, error) {
	ss, err := NewDSLinker(s.Struct.Segment())
	if err != nil {
		return DSLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DataStore) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DataStore) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DataStore) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DataStore_List is a list of DataStore.
type DataStore_List struct{ capnp.List }

// NewDataStore creates a new list of DataStore.
func NewDataStore_List(s *capnp.Segment, sz int32) (DataStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DataStore_List{l}, err
}

func (s DataStore_List) At(i int) DataStore { return DataStore{s.List.Struct(i)} }

func (s DataStore_List) Set(i int, v DataStore) error { return s.List.SetStruct(i, v.Struct) }

func (s DataStore_List) String() string {
	str, _ := text.MarshalList(0x9843dfb8f1386b20, s.List)
	return str
}

// DataStore_Promise is a wrapper for a DataStore promised by a client call.
type DataStore_Promise struct{ *capnp.Pipeline }

func (p DataStore_Promise) Struct() (DataStore, error) {
	s, err := p.Pipeline.Struct()
	return DataStore{s}, err
}

func (p DataStore_Promise) DSLinker() DSLinker_Promise {
	return DSLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1144:1312])}
}

type VSPreImage struct{ capnp.Struct }

// VSPreImage_TypeID is the unique identifier for the type VSPreImage.
const VSPreImage_TypeID = 0xf8c203f305398e1b

func NewVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func NewRootVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func ReadRootVSPreImage(msg *capnp.Message) (VSPreImage, error) {
	root, err := msg.RootPtr()
	return VSPreImage{root.Struct()}, err
}

func (s VSPreImage) String() string {
	str, _ := text.Marshal(0xf8c203f305398e1b, s.Struct)
	return str
}

func (s VSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s VSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s VSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(8)
}

func (s VSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s VSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s VSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s VSPreImage) Value() uint32 {
	return s.Struct.Uint32(4)
}

func (s VSPreImage) SetValue(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s VSPreImage) Value1() uint32 {
	return s.Struct.Uint32(12)
}

func (s VSPreImage) SetValue1(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s VSPreImage) Value2() uint32 {
	return s.Struct.Uint32(16)
}

func (s VSPreImage) SetValue2(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s VSPreImage) Value3() uint32 {
	return s.Struct.Uint32(20)
}

func (s VSPreImage) SetValue3(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s VSPreImage) Value4() uint32 {
	return s.Struct.Uint32(24)
}

func (s VSPreImage) SetValue4(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s VSPreImage) Value5() uint32 {
	return s.Struct.Uint32(28)
}

func (s VSPreImage) SetValue5(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s VSPreImage) Value6() uint32 {
	return s.Struct.Uint32(32)
}

func (s VSPreImage) SetValue6(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s VSPreImage) Value7() uint32 {
	return s.Struct.Uint32(36)
}

func (s VSPreImage) SetValue7(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s VSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(40)
}

func (s VSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s VSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(44)
}

func (s VSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s VSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(48)
}

func (s VSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s VSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(52)
}

func (s VSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s VSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(56)
}

func (s VSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s VSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(60)
}

func (s VSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s VSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(64)
}

func (s VSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s VSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(68)
}

func (s VSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(68, v)
}

// VSPreImage_List is a list of VSPreImage.
type VSPreImage_List struct{ capnp.List }

// NewVSPreImage creates a new list of VSPreImage.
func NewVSPreImage_List(s *capnp.Segment, sz int32) (VSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return VSPreImage_List{l}, err
}

func (s VSPreImage_List) At(i int) VSPreImage { return VSPreImage{s.List.Struct(i)} }

func (s VSPreImage_List) Set(i int, v VSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s VSPreImage_List) String() string {
	str, _ := text.MarshalList(0xf8c203f305398e1b, s.List)
	return str
}

// VSPreImage_Promise is a wrapper for a VSPreImage promised by a client call.
type VSPreImage_Promise struct{ *capnp.Pipeline }

func (p VSPreImage_Promise) Struct() (VSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return VSPreImage{s}, err
}

type ValueStore struct{ capnp.Struct }

// ValueStore_TypeID is the unique identifier for the type ValueStore.
const ValueStore_TypeID = 0xa031328fb2fcc743

func NewValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func NewRootValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func ReadRootValueStore(msg *capnp.Message) (ValueStore, error) {
	root, err := msg.RootPtr()
	return ValueStore{root.Struct()}, err
}

func (s ValueStore) String() string {
	str, _ := text.Marshal(0xa031328fb2fcc743, s.Struct)
	return str
}

func (s ValueStore) VSPreImage() VSPreImage {
	if !s.HasVSPreImage() {
		s.NewVSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1312:1416])
	return VSPreImage{Struct: ss}
}

func (s ValueStore) HasVSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetVSPreImage(v VSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVSPreImage sets the vSPreImage field to a newly
// allocated VSPreImage struct, preferring placement in s's segment.
func (s ValueStore) NewVSPreImage() (VSPreImage, error) {
	ss, err := NewVSPreImage(s.Struct.Segment())
	if err != nil {
		return VSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s ValueStore) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ValueStore) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// ValueStore_List is a list of ValueStore.
type ValueStore_List struct{ capnp.List }

// NewValueStore creates a new list of ValueStore.
func NewValueStore_List(s *capnp.Segment, sz int32) (ValueStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ValueStore_List{l}, err
}

func (s ValueStore_List) At(i int) ValueStore { return ValueStore{s.List.Struct(i)} }

func (s ValueStore_List) Set(i int, v ValueStore) error { return s.List.SetStruct(i, v.Struct) }

func (s ValueStore_List) String() string {
	str, _ := text.MarshalList(0xa031328fb2fcc743, s.List)
	return str
}

// ValueStore_Promise is a wrapper for a ValueStore promised by a client call.
type ValueStore_Promise struct{ *capnp.Pipeline }

func (p ValueStore_Promise) Struct() (ValueStore, error) {
	s, err := p.Pipeline.Struct()
	return ValueStore{s}, err
}

func (p ValueStore_Promise) VSPreImage() VSPreImage_Promise {
	return VSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1416:1520])}
}

type ASPreImage struct{ capnp.Struct }

// ASPreImage_TypeID is the unique identifier for the type ASPreImage.
const ASPreImage_TypeID = 0xa6bc62ab6b339789

func NewASPreImage(s *capnp.Segment) (ASPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return ASPreImage{st}, err
}

func NewRootASPreImage(s *capnp.Segment) (ASPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return ASPreImage{st}, err
}

func ReadRootASPreImage(msg *capnp.Message) (ASPreImage, error) {
	root, err := msg.RootPtr()
	return ASPreImage{root.Struct()}, err
}

func (s ASPreImage) String() string {
	str, _ := text.Marshal(0xa6bc62ab6b339789, s.Struct)
	return str
}

func (s ASPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s ASPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ASPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(8)
}

func (s ASPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s ASPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ASPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s ASPreImage) IssuedAt() uint32 {
	return s.Struct.Uint32(12)
}

func (s ASPreImage) SetIssuedAt(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s ASPreImage) Exp() uint32 {
	return s.Struct.Uint32(16)
}

func (s ASPreImage) SetExp(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s ASPreImage) Value() uint32 {
	return s.Struct.Uint32(4)
}

func (s ASPreImage) SetValue(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ASPreImage) Value1() uint32 {
	return s.Struct.Uint32(20)
}

func (s ASPreImage) SetValue1(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s ASPreImage) Value2() uint32 {
	return s.Struct.Uint32(24)
}

func (s ASPreImage) SetValue2(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s ASPreImage) Value3() uint32 {
	return s.Struct.Uint32(28)
}

func (s ASPreImage) SetValue3(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s ASPreImage) Value4() uint32 {
	return s.Struct.Uint32(32)
}

func (s ASPreImage) SetValue4(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s ASPreImage) Value5() uint32 {
	return s.Struct.Uint32(36)
}

func (s ASPreImage) SetValue5(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s ASPreImage) Value6() uint32 {
	return s.Struct.Uint32(40)
}

func (s ASPreImage) SetValue6(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s ASPreImage) Value7() uint32 {
	return s.Struct.Uint32(44)
}

func (s ASPreImage) SetValue7(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s ASPreImage) Fee0() uint32 {
	return s.Struct.Uint32(48)
}

func (s ASPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s ASPreImage) Fee1() uint32 {
	return s.Struct.Uint32(52)
}

func (s ASPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s ASPreImage) Fee2() uint32 {
	return s.Struct.Uint32(56)
}

func (s ASPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s ASPreImage) Fee3() uint32 {
	return s.Struct.Uint32(60)
}

func (s ASPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s ASPreImage) Fee4() uint32 {
	return s.Struct.Uint32(64)
}

func (s ASPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s ASPreImage) Fee5() uint32 {
	return s.Struct.Uint32(68)
}

func (s ASPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(68, v)
}

func (s ASPreImage) Fee6() uint32 {
	return s.Struct.Uint32(72)
}

func (s ASPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(72, v)
}

func (s ASPreImage) Fee7() uint32 {
	return s.Struct.Uint32(76)
}

func (s ASPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(76, v)
}

// ASPreImage_List is a list of ASPreImage.
type ASPreImage_List struct{ capnp.List }

// NewASPreImage creates a new list of ASPreImage.
func NewASPreImage_List(s *capnp.Segment, sz int32) (ASPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return ASPreImage_List{l}, err
}

func (s ASPreImage_List) At(i int) ASPreImage { return ASPreImage{s.List.Struct(i)} }

func (s ASPreImage_List) Set(i int, v ASPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s ASPreImage_List) String() string {
	str, _ := text.MarshalList(0xa6bc62ab6b339789, s.List)
	return str
}

// ASPreImage_Promise is a wrapper for a ASPreImage promised by a client call.
type ASPreImage_Promise struct{ *capnp.Pipeline }

func (p ASPreImage_Promise) Struct() (ASPreImage, error) {
	s, err := p.Pipeline.Struct()
	return ASPreImage{s}, err
}

type AtomicSwap struct{ capnp.Struct }

// AtomicSwap_TypeID is the unique identifier for the type AtomicSwap.
const AtomicSwap_TypeID = 0xc9c165c236a1bd53

func NewAtomicSwap(s *capnp.Segment) (AtomicSwap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AtomicSwap{st}, err
}

func NewRootAtomicSwap(s *capnp.Segment) (AtomicSwap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AtomicSwap{st}, err
}

func ReadRootAtomicSwap(msg *capnp.Message) (AtomicSwap, error) {
	root, err := msg.RootPtr()
	return AtomicSwap{root.Struct()}, err
}

func (s AtomicSwap) String() string {
	str, _ := text.Marshal(0xc9c165c236a1bd53, s.Struct)
	return str
}

func (s AtomicSwap) ASPreImage() ASPreImage {
	if !s.HasASPreImage() {
		s.NewASPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1520:1632])
	return ASPreImage{Struct: ss}
}

func (s AtomicSwap) HasASPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AtomicSwap) SetASPreImage(v ASPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewASPreImage sets the aSPreImage field to a newly
// allocated ASPreImage struct, preferring placement in s's segment.
func (s AtomicSwap) NewASPreImage() (ASPreImage, error) {
	ss, err := NewASPreImage(s.Struct.Segment())
	if err != nil {
		return ASPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s AtomicSwap) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s AtomicSwap) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AtomicSwap) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// AtomicSwap_List is a list of AtomicSwap.
type AtomicSwap_List struct{ capnp.List }

// NewAtomicSwap creates a new list of AtomicSwap.
func NewAtomicSwap_List(s *capnp.Segment, sz int32) (AtomicSwap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return AtomicSwap_List{l}, err
}

func (s AtomicSwap_List) At(i int) AtomicSwap { return AtomicSwap{s.List.Struct(i)} }

func (s AtomicSwap_List) Set(i int, v AtomicSwap) error { return s.List.SetStruct(i, v.Struct) }

func (s AtomicSwap_List) String() string {
	str, _ := text.MarshalList(0xc9c165c236a1bd53, s.List)
	return str
}

// AtomicSwap_Promise is a wrapper for a AtomicSwap promised by a client call.
type AtomicSwap_Promise struct{ *capnp.Pipeline }

func (p AtomicSwap_Promise) Struct() (AtomicSwap, error) {
	s, err := p.Pipeline.Struct()
	return AtomicSwap{s}, err
}

func (p AtomicSwap_Promise) ASPreImage() ASPreImage_Promise {
	return ASPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1632:1744])}
}

type TFPreImage struct{ capnp.Struct }

// TFPreImage_TypeID is the unique identifier for the type TFPreImage.
const TFPreImage_TypeID = 0x828d564f51f7af4e

func NewTFPreImage(s *capnp.Segment) (TFPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TFPreImage{st}, err
}

func NewRootTFPreImage(s *capnp.Segment) (TFPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TFPreImage{st}, err
}

func ReadRootTFPreImage(msg *capnp.Message) (TFPreImage, error) {
	root, err := msg.RootPtr()
	return TFPreImage{root.Struct()}, err
}

func (s TFPreImage) String() string {
	str, _ := text.Marshal(0x828d564f51f7af4e, s.Struct)
	return str
}

func (s TFPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s TFPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TFPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(4)
}

func (s TFPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s TFPreImage) Fee0() uint32 {
	return s.Struct.Uint32(8)
}

func (s TFPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s TFPreImage) Fee1() uint32 {
	return s.Struct.Uint32(12)
}

func (s TFPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s TFPreImage) Fee2() uint32 {
	return s.Struct.Uint32(16)
}

func (s TFPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s TFPreImage) Fee3() uint32 {
	return s.Struct.Uint32(20)
}

func (s TFPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s TFPreImage) Fee4() uint32 {
	return s.Struct.Uint32(24)
}

func (s TFPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s TFPreImage) Fee5() uint32 {
	return s.Struct.Uint32(28)
}

func (s TFPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s TFPreImage) Fee6() uint32 {
	return s.Struct.Uint32(32)
}

func (s TFPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s TFPreImage) Fee7() uint32 {
	return s.Struct.Uint32(36)
}

func (s TFPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(36, v)
}

// TFPreImage_List is a list of TFPreImage.
type TFPreImage_List struct{ capnp.List }

// NewTFPreImage creates a new list of TFPreImage.
func NewTFPreImage_List(s *capnp.Segment, sz int32) (TFPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return TFPreImage_List{l}, err
}

func (s TFPreImage_List) At(i int) TFPreImage { return TFPreImage{s.List.Struct(i)} }

func (s TFPreImage_List) Set(i int, v TFPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s TFPreImage_List) String() string {
	str, _ := text.MarshalList(0x828d564f51f7af4e, s.List)
	return str
}

// TFPreImage_Promise is a wrapper for a TFPreImage promised by a client call.
type TFPreImage_Promise struct{ *capnp.Pipeline }

func (p TFPreImage_Promise) Struct() (TFPreImage, error) {
	s, err := p.Pipeline.Struct()
	return TFPreImage{s}, err
}

type TxFee struct{ capnp.Struct }

// TxFee_TypeID is the unique identifier for the type TxFee.
const TxFee_TypeID = 0x89c736f29fb5bda4

func NewTxFee(s *capnp.Segment) (TxFee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxFee{st}, err
}

func NewRootTxFee(s *capnp.Segment) (TxFee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxFee{st}, err
}

func ReadRootTxFee(msg *capnp.Message) (TxFee, error) {
	root, err := msg.RootPtr()
	return TxFee{root.Struct()}, err
}

func (s TxFee) String() string {
	str, _ := text.Marshal(0x89c736f29fb5bda4, s.Struct)
	return str
}

func (s TxFee) TFPreImage() TFPreImage {
	if !s.HasTFPreImage() {
		s.NewTFPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1744:1800])
	return TFPreImage{Struct: ss}
}

func (s TxFee) HasTFPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxFee) SetTFPreImage(v TFPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTFPreImage sets the tFPreImage field to a newly
// allocated TFPreImage struct, preferring placement in s's segment.
func (s TxFee) NewTFPreImage() (TFPreImage, error) {
	ss, err := NewTFPreImage(s.Struct.Segment())
	if err != nil {
		return TFPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TxFee) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TxFee) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxFee) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TxFee_List is a list of TxFee.
type TxFee_List struct{ capnp.List }

// NewTxFee creates a new list of TxFee.
func NewTxFee_List(s *capnp.Segment, sz int32) (TxFee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TxFee_List{l}, err
}

func (s TxFee_List) At(i int) TxFee { return TxFee{s.List.Struct(i)} }

func (s TxFee_List) Set(i int, v TxFee) error { return s.List.SetStruct(i, v.Struct) }

func (s TxFee_List) String() string {
	str, _ := text.MarshalList(0x89c736f29fb5bda4, s.List)
	return str
}

// TxFee_Promise is a wrapper for a TxFee promised by a client call.
type TxFee_Promise struct{ *capnp.Pipeline }

func (p TxFee_Promise) Struct() (TxFee, error) {
	s, err := p.Pipeline.Struct()
	return TxFee{s}, err
}

func (p TxFee_Promise) TFPreImage() TFPreImage_Promise {
	return TFPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1800:1856])}
}

type TXInPreImage struct{ capnp.Struct }

// TXInPreImage_TypeID is the unique identifier for the type TXInPreImage.
const TXInPreImage_TypeID = 0xbb0225ef96e5ba9f

func NewTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func NewRootTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func ReadRootTXInPreImage(msg *capnp.Message) (TXInPreImage, error) {
	root, err := msg.RootPtr()
	return TXInPreImage{root.Struct()}, err
}

func (s TXInPreImage) String() string {
	str, _ := text.Marshal(0xbb0225ef96e5ba9f, s.Struct)
	return str
}

func (s TXInPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s TXInPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TXInPreImage) ConsumedTxIdx() uint32 {
	return s.Struct.Uint32(4)
}

func (s TXInPreImage) SetConsumedTxIdx(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s TXInPreImage) ConsumedTxHash() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInPreImage) HasConsumedTxHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInPreImage) SetConsumedTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}

// TXInPreImage_List is a list of TXInPreImage.
type TXInPreImage_List struct{ capnp.List }

// NewTXInPreImage creates a new list of TXInPreImage.
func NewTXInPreImage_List(s *capnp.Segment, sz int32) (TXInPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXInPreImage_List{l}, err
}

func (s TXInPreImage_List) At(i int) TXInPreImage { return TXInPreImage{s.List.Struct(i)} }

func (s TXInPreImage_List) Set(i int, v TXInPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInPreImage_List) String() string {
	str, _ := text.MarshalList(0xbb0225ef96e5ba9f, s.List)
	return str
}

// TXInPreImage_Promise is a wrapper for a TXInPreImage promised by a client call.
type TXInPreImage_Promise struct{ *capnp.Pipeline }

func (p TXInPreImage_Promise) Struct() (TXInPreImage, error) {
	s, err := p.Pipeline.Struct()
	return TXInPreImage{s}, err
}

type TXInLinker struct{ capnp.Struct }

// TXInLinker_TypeID is the unique identifier for the type TXInLinker.
const TXInLinker_TypeID = 0x958c34c871381d2c

func NewTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func NewRootTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func ReadRootTXInLinker(msg *capnp.Message) (TXInLinker, error) {
	root, err := msg.RootPtr()
	return TXInLinker{root.Struct()}, err
}

func (s TXInLinker) String() string {
	str, _ := text.Marshal(0x958c34c871381d2c, s.Struct)
	return str
}

func (s TXInLinker) TXInPreImage() TXInPreImage {
	if !s.HasTXInPreImage() {
		s.NewTXInPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1856:1896])
	return TXInPreImage{Struct: ss}
}

func (s TXInLinker) HasTXInPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTXInPreImage(v TXInPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInPreImage sets the tXInPreImage field to a newly
// allocated TXInPreImage struct, preferring placement in s's segment.
func (s TXInLinker) NewTXInPreImage() (TXInPreImage, error) {
	ss, err := NewTXInPreImage(s.Struct.Segment())
	if err != nil {
		return TXInPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXInLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXInLinker_List is a list of TXInLinker.
type TXInLinker_List struct{ capnp.List }

// NewTXInLinker creates a new list of TXInLinker.
func NewTXInLinker_List(s *capnp.Segment, sz int32) (TXInLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXInLinker_List{l}, err
}

func (s TXInLinker_List) At(i int) TXInLinker { return TXInLinker{s.List.Struct(i)} }

func (s TXInLinker_List) Set(i int, v TXInLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInLinker_List) String() string {
	str, _ := text.MarshalList(0x958c34c871381d2c, s.List)
	return str
}

// TXInLinker_Promise is a wrapper for a TXInLinker promised by a client call.
type TXInLinker_Promise struct{ *capnp.Pipeline }

func (p TXInLinker_Promise) Struct() (TXInLinker, error) {
	s, err := p.Pipeline.Struct()
	return TXInLinker{s}, err
}

func (p TXInLinker_Promise) TXInPreImage() TXInPreImage_Promise {
	return TXInPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1896:1936])}
}

type TXIn struct{ capnp.Struct }

// TXIn_TypeID is the unique identifier for the type TXIn.
const TXIn_TypeID = 0xb105e7dd5c44b39c

func NewTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func NewRootTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func ReadRootTXIn(msg *capnp.Message) (TXIn, error) {
	root, err := msg.RootPtr()
	return TXIn{root.Struct()}, err
}

func (s TXIn) String() string {
	str, _ := text.Marshal(0xb105e7dd5c44b39c, s.Struct)
	return str
}

func (s TXIn) TXInLinker() TXInLinker {
	if !s.HasTXInLinker() {
		s.NewTXInLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1936:2000])
	return TXInLinker{Struct: ss}
}

func (s TXIn) HasTXInLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXIn) SetTXInLinker(v TXInLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInLinker sets the tXInLinker field to a newly
// allocated TXInLinker struct, preferring placement in s's segment.
func (s TXIn) NewTXInLinker() (TXInLinker, error) {
	ss, err := NewTXInLinker(s.Struct.Segment())
	if err != nil {
		return TXInLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXIn) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXIn) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXIn) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXIn_List is a list of TXIn.
type TXIn_List struct{ capnp.List }

// NewTXIn creates a new list of TXIn.
func NewTXIn_List(s *capnp.Segment, sz int32) (TXIn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXIn_List{l}, err
}

func (s TXIn_List) At(i int) TXIn { return TXIn{s.List.Struct(i)} }

func (s TXIn_List) Set(i int, v TXIn) error { return s.List.SetStruct(i, v.Struct) }

func (s TXIn_List) String() string {
	str, _ := text.MarshalList(0xb105e7dd5c44b39c, s.List)
	return str
}

// TXIn_Promise is a wrapper for a TXIn promised by a client call.
type TXIn_Promise struct{ *capnp.Pipeline }

func (p TXIn_Promise) Struct() (TXIn, error) {
	s, err := p.Pipeline.Struct()
	return TXIn{s}, err
}

func (p TXIn_Promise) TXInLinker() TXInLinker_Promise {
	return TXInLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[2000:2064])}
}

type TXOut struct{ capnp.Struct }
type TXOut_Which uint16

const (
	TXOut_Which_dataStore  TXOut_Which = 0
	TXOut_Which_valueStore TXOut_Which = 1
	TXOut_Which_atomicSwap TXOut_Which = 2
	TXOut_Which_txFee      TXOut_Which = 3
)

func (w TXOut_Which) String() string {
	const s = "dataStorevalueStoreatomicSwaptxFee"
	switch w {
	case TXOut_Which_dataStore:
		return s[0:9]
	case TXOut_Which_valueStore:
		return s[9:19]
	case TXOut_Which_atomicSwap:
		return s[19:29]
	case TXOut_Which_txFee:
		return s[29:34]

	}
	return "TXOut_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TXOut_TypeID is the unique identifier for the type TXOut.
const TXOut_TypeID = 0xfb4425cca53d7224

func NewTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func NewRootTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func ReadRootTXOut(msg *capnp.Message) (TXOut, error) {
	root, err := msg.RootPtr()
	return TXOut{root.Struct()}, err
}

func (s TXOut) String() string {
	str, _ := text.Marshal(0xfb4425cca53d7224, s.Struct)
	return str
}

func (s TXOut) Which() TXOut_Which {
	return TXOut_Which(s.Struct.Uint16(0))
}
func (s TXOut) DataStore() (DataStore, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return DataStore{}, err
	}
	return DataStore{Struct: p.Struct()}, err
}

func (s TXOut) HasDataStore() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetDataStore(v DataStore) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDataStore sets the dataStore field to a newly
// allocated DataStore struct, preferring placement in s's segment.
func (s TXOut) NewDataStore() (DataStore, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewDataStore(s.Struct.Segment())
	if err != nil {
		return DataStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) ValueStore() (ValueStore, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != valueStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return ValueStore{}, err
	}
	return ValueStore{Struct: p.Struct()}, err
}

func (s TXOut) HasValueStore() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetValueStore(v ValueStore) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValueStore sets the valueStore field to a newly
// allocated ValueStore struct, preferring placement in s's segment.
func (s TXOut) NewValueStore() (ValueStore, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewValueStore(s.Struct.Segment())
	if err != nil {
		return ValueStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) AtomicSwap() (AtomicSwap, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != atomicSwap")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return AtomicSwap{}, err
	}
	return AtomicSwap{Struct: p.Struct()}, err
}

func (s TXOut) HasAtomicSwap() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetAtomicSwap(v AtomicSwap) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAtomicSwap sets the atomicSwap field to a newly
// allocated AtomicSwap struct, preferring placement in s's segment.
func (s TXOut) NewAtomicSwap() (AtomicSwap, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewAtomicSwap(s.Struct.Segment())
	if err != nil {
		return AtomicSwap{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) TxFee() (TxFee, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != txFee")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return TxFee{}, err
	}
	return TxFee{Struct: p.Struct()}, err
}

func (s TXOut) HasTxFee() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetTxFee(v TxFee) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTxFee sets the txFee field to a newly
// allocated TxFee struct, preferring placement in s's segment.
func (s TXOut) NewTxFee() (TxFee, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewTxFee(s.Struct.Segment())
	if err != nil {
		return TxFee{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// TXOut_List is a list of TXOut.
type TXOut_List struct{ capnp.List }

// NewTXOut creates a new list of TXOut.
func NewTXOut_List(s *capnp.Segment, sz int32) (TXOut_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXOut_List{l}, err
}

func (s TXOut_List) At(i int) TXOut { return TXOut{s.List.Struct(i)} }

func (s TXOut_List) Set(i int, v TXOut) error { return s.List.SetStruct(i, v.Struct) }

func (s TXOut_List) String() string {
	str, _ := text.MarshalList(0xfb4425cca53d7224, s.List)
	return str
}

// TXOut_Promise is a wrapper for a TXOut promised by a client call.
type TXOut_Promise struct{ *capnp.Pipeline }

func (p TXOut_Promise) Struct() (TXOut, error) {
	s, err := p.Pipeline.Struct()
	return TXOut{s}, err
}

func (p TXOut_Promise) DataStore() DataStore_Promise {
	return DataStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) ValueStore() ValueStore_Promise {
	return ValueStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) AtomicSwap() AtomicSwap_Promise {
	return AtomicSwap_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) TxFee() TxFee_Promise {
	return TxFee_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0x97ffa3012c4f6a3e

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0x97ffa3012c4f6a3e, s.Struct)
	return str
}

func (s Tx) Vin() (TXIn_List, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return TXIn_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[2064:2088])
	return TXIn_List{List: l}, err
}

func (s Tx) HasVin() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetVin(v TXIn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVin sets the vin field to a newly
// allocated TXIn_List, preferring placement in s's segment.
func (s Tx) NewVin(n int32) (TXIn_List, error) {
	l, err := NewTXIn_List(s.Struct.Segment(), n)
	if err != nil {
		return TXIn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Tx) Vout() (TXOut_List, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return TXOut_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[2088:2112])
	return TXOut_List{List: l}, err
}

func (s Tx) HasVout() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetVout(v TXOut_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewVout sets the vout field to a newly
// allocated TXOut_List, preferring placement in s's segment.
func (s Tx) NewVout(n int32) (TXOut_List, error) {
	l, err := NewTXOut_List(s.Struct.Segment(), n)
	if err != nil {
		return TXOut_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0x97ffa3012c4f6a3e, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

const schema_b99093b7d2518300 = "x\xda\xdc\x98kl\x14\xd7\x15\xc7\xef\x99\xbb\xbb\xb3\xbb" +
	"x\xbd\xb3\xbe\x83Ey\x08\xb0Le\xa8i\xb1\xbd6" +
	"\x06\xe1\xdaNl\xc4F\xa6x2\x1bj*\x90\xd8\xb2" +
	"\x13\xbc\xc1^/\xebYX*P\xa0\x04\x09$\xa0\xa0" +
	"\x90\x86H$\x10\xe5\xa1\xa6i\x9b\xa6\x0f5\x0f\"\x15" +
	"\x946 \x81\x14*P\xa0*mZ5\x89\xe2~H" +
	"\x1f\x1f\xfa\xa2Lu\xce\xec\xee\xcc>\x00W\xaa\x14)" +
	"\x92?\xec\xfd\xf9\xcc\x9ds\xe6\xde\xfb?\xff\x99e\x1f" +
	"\xcb}R\x9b\xb7WfL\x8b{}\xd6W^\xf9\xbb" +
	"\xb6n\xfd\x91o2\xad\x01\xbc\xb7\xf7k\xbf\xfa\xd9\xe3" +
	"\xc7^\xf7\xc8\x8c\x89\x03|J\x1c\xe72c\x1dG\xf8" +
	"r\x89\x81\xf5\xfc[?=\xfd\xd7\xaew\x0e\xb1H\x03" +
	"\x14#\xbd\x12\x86^\xf6\x9e\x17\xd7\xbc\xf8\xeb\x8aw'" +
	"\x03+\xdf\xf0\xdb\xe7\x16/\xcf\x1ce\x91\x06O1\x92" +
	"AG\xcc\xd7\x04b\x83OfL\x8f\xfb8\xe8\x9b}" +
	"\x120f]\xf8p\xdbf\xed\xd4\xc9\xe3\xd5\xf3\xee\xf3" +
	"\xfdZ\x1c\xc1xq\xc8\x87\xf3\xb6\xce\xeb\xde~!z" +
	"\xf8\x89\xea\xc8\xa5\xf2\x94X!\xe3\xafN\x19#\xbf\xfc" +
	"\xc8\xbaVx\xcez\xb2:\xf2\x05\xf9\xbb\xe2\xfb\x14\xf9" +
	"\x12E\x1e^\xf5\xe1\xd3\xd1\xc7\x1bOV\xe4\xba\xd4\xdf" +
	"\x04\xa2\xc7\x8f\xb9v\xfb9\xe8\x03~\xcau\xc1\xb6\xee" +
	"\xbf\xbc\xf6\xbb\xfbOV\xcf\x9b\xf3\xffA\xec\xc3x\xb1" +
	"\xc7\x8f\xf3\xde\xff\xce\xad\x1f}\xab\xbd\xedLud[" +
	"`J\xf4\x04\xf0\xd7\x8a\x00F.I\xde~\xb9\xef\xab" +
	"\xfb\xcfTdp1\xd0\x00\xe2\x06\xc6\xe9W\x03\x1c\xf4" +
	"\xf7\x03\x94\xc1\x89\xc1\x9e\xf7\xf6\xff9\xfabE\xf4\xbc" +
	"`\x13\x88\xa5A\x8cn\x09r\xd0\xa3A\x8a>\xf4d" +
	"\xc7\xb6\x97\xbf~\xf6E\\\xde`)\x0d\xc0\x9bk\xc1" +
	")\xb1\x09/\xe8\xd8\x10<\xeda`}\xbc\xb8\xeb\x99" +
	"_\x1e\xdd\xf5\x83\x8a\x99;\xc3\xed \x06\xc38s_" +
	"\x98\x83>\x14\xa6\x99O\xfdx`\xe3\xcd\x8f\xbc\xafV" +
	"\xd7\x17\x0b\xbf!4\x8c\x17k\xc3X\xdf\xe97>\xf8" +
	"\xf6'\x8b\xa471\x07(\xcf\xe1r\xf8_\xe2\x06\x85" +
	"^\x0b\xbf\xc2\xc0\xd2\xdfz\xb6\xeb\xbcq\xeeb\xf5\xa4" +
	"\xbb\x94)q@\xa1M\xa1\xe0\xa4\x9f\x7f\xf3\xc8\x17\x16" +
	"\xae\xfa\xd3\xd5\xf2\xc2p\xbb\x8a\x99\x91)\xb10\x82\x85" +
	"\xcd\x8b\xbc\x87\x85\xdd\x8a|\xf2\xcf\xa7\x07z\xaeU\x14" +
	"\xb6\xa1\xb1\x09D\xaa\x11\x0bK6r\xd03\x8dT\xd8" +
	"\x9c\xa3+\xbc\x7f\xe3\xe7\xff\x813\x07\xca\xd3\xcd5N" +
	"\x89}xA\xc7\x9e\xc6/\xe1\xcc\xcd\xd9\x9e\x17.-" +
	"\x1a\xf8wYi\x83 {\x18\x137g\x9f\x17\x1f\xcc" +
	"\xc6\xcb~?\xfb#\x06\xd6\xc2kg\x8f\xad\xbd\xf0\x8c" +
	"U\x91\xc5\xb99M \xae\xcc\xc1,.\xcd\xe1\xa0_" +
	"\x9fCY$2\x99\xb1\xd4\x96\x84)\xa5&\xd2_\xdc" +
	"\x92\xc8\xa43+\xe3\xab\x87\xb3F,<\x9e\xd8j\x0c" +
	"\x03h-\xdc\xc3\x98\x07\x00D\x00\xeecL\xf7\x00\x07" +
	"]\x01\x09\"\x00* \x0f\xc1\x03\x8c\xe9u\xc8g!" +
	"\x97$\x15$\x001\x13\x960\xa6+\xc8\xe7\"\xe7\\" +
	"\x05\x0e >G\x1c\x7f\xeb\x0b\x90{<*x\x00\xc4" +
	"<\xe2\xb3\x907#\xf7zU\xf0\x02\x88\x85\xc4\xe7\"" +
	"oA\xee\xf3\xa9\xe0\x03\x10\x8b\x88/@\xde\x8a\\\x96" +
	"U\x90\x01\xc4b\xe2\xcd\xc8\x97!\xf7\xfbU\xf0\x03\x88" +
	"\xa5\xc4[\x90G\x91\x07\x02*\x04\x00D\x1b\xf1V\xe4" +
	"\xdd \xc1\xa3[F\x13\xa9tl\x00\xfcL\x02?\x03" +
	"\xcb\x1cY\x973c\xc9<c\xac\xc8\xc2\x0f\x1b\xc62" +
	"\xf7\xa0\xcd=hw\x0f:\xdc\x83\xa8{\xd0\xe9\x1et" +
	"\xb9\x07\xcbK\xf7\xae\xb5>\xf9\xd5\x86\xc1pi\xfc\xc5" +
	"\xa5\x89,\xfe\x1acZ\x0b\x07-\xea\xacKdp%" +
	"cZ\x1f\x07mH\x02\xcb\xa4U\x1dO0\xbe\xd5\x00" +
	"\xc5\xd1c\x06\xa00\xa6x\x99\xa7\xd7\xcc\xafIL\x8e" +
	"B\x88I\x10b,\x02A\xd7\xfe\xe0\xce\xfd\x93\xc6\xc3" +
	"\x89\xdc\x98\xd9\xaf\xd3\x84\xb2\xbdM@q4\xc0\x9er" +
	"8\x08,P>\x89\xab\x88\x01}(\x95\xde\xc6\x8d\xec" +
	"4\xea\xd8\x8eu\x8cq\xd0\xf2\x12XI\xbd\xac\x8e\xd2" +
	"\xf9,\xde\x94\xb3@$\x10\xb4\xff\x98t\xd7\x9a\xdc\xcf" +
	"t$\x96\x1eJ\x85\xd3\xdb\xaa\x12z\xa4FB=\x98" +
	"P7\x07m\x00\x1f\xecH,\x8d)1:1\xa08" +
	":TH\x09\xa0p\xe3\xbb&\x03\xc5d\xc2\xb8\xc2\x15" +
	"I41\xa65s\xd0\xfa\\I\xf4/aL[\xc5" +
	"A\x1b\x91@\xde\x91JC=\x83a\x8e\x0bQ\x92L" +
	"\x06P\x8f\xf7\x91\xfb\xa4\xf0\x8e\x89\x9c\xe9\x84\x94\x04\xa5" +
	"\x142\x0cp\x97\xc5\x1e\xa8\\\xec{<\xf7\x9aK\x9e" +
	"0\x13\xba)Od\x8d\x8a\xea\x1e\xa8\xf1\x88\xf7<\xc8" +
	"\x98\xb6\x9b\x83v\x90\xd6\x1c7\x8b\x91\xc5\x03\xa88}" +
	"\xdc\xbeu\x9f\xa4y\x82<\xd2\x1ft'\xc0\xad\xc9\xd4" +
	"\xd6t\xc2\xcce\x19\x18\xf7\\\xfd\xf5\x89\xb1\x9c\xa1\x87" +
	"\xcd\xea\xd4jm\xc7M\xb8\xfa#\x1c\xb4\xa4\x04\xd6\x8e" +
	"\xf2\xedX\x12\xf5\xc2c\x09\x00\xf3\xdf{\xedk=o" +
	"\xaa\x18\xb2\xf6\xd3\x9e^\xc9w\x9en}\xe5\xf2\xdd1" +
	"\xcfZ\x8f\xc7>\xe9\xa5\x86\x10/5\x84\x1e\x09\x1bB" +
	"\xb7\x84\xbeEB\xc1.4\x84~\xa9\x9d1}\x15\xf2" +
	"5\xc8\xa1\xd0\x10\x06%l\x14\x03\xc8\x87%\x09\x10c" +
	"?XK\xe1k\x10\xc7\xa5B\x9f\xc0~\xf0\x10\x85\xc7" +
	"\x91o\x96\x0a}\x02\xfb\xc1&\xa9\x891}\x04y\x12" +
	"\xb9\xcfk\xf7\x83\x84\xb4\x921}#\xf2Q\xe4\xb2\xcf" +
	"\xee\x07\x06\xf1\xcd\xc8\xc7\x90\xfbe\xbb\x1f\xa4\x88'\x91" +
	"g\x90\x07\xfcv?\x18'>\x8a\xdcD\x1e\x0c\xa8\x10" +
	"\x04\x10\xdb\x89\x8f!\xcf#\x9f\x11Ta\x06\x80\xc8\x11" +
	"\xcf \xdf\x8d\xbcn\x86\x0au\x00b\x17q\x13\xf9^" +
	"\xe4\xa1:\x15B\x00b\x8f\x84\xfd&\x8f\xfc1\xe4\xf5" +
	"!\x15\xea\x01\xc4>\xe2\xbb\x91\x1fD\x1e\xaeW!\x0c" +
	" \x0e\x10\xdf\x8b\xfc0r%\xac\x82\x02 \x0e\x11\x7f" +
	"\x0c\xf91\xe4\x11E\xc5]*\x8e\x10?\x88\xfc\x04\xf2" +
	"\x86\x88\x0a\x0d\x00\xe28\xf1\xc3\xc8O\"\x17\x0d*\x08" +
	"\x00\xf1\x04\xf1c\xc8O!W\x85\x8a\x0b)\x9e\"~" +
	"\x02\xf9\x19\xa9\xba/\xce\xdf\x81\xc7\xe6n]r\xfe\xc4" +
	"\xce\xb4\x91-\xdf\xf3\xa9\xc9\xc9\x9c\x91\xec7]a\xb2" +
	"\x91\xcf\x14\x7f\xf7\xd2\xa4m\xe5\xc3\xf6\xf2aG\xf90" +
	"Z>\xec,\x1fv\x95\x0f\x97\x7fj\x1d\xbc\xfaT\xc6" +
	"\xed\xce1?6^:\x97w\xec\x1d\xd5}\xa2\xd7\xee" +
	"Z\xd3\x10\xac\x18j\xe9\x1a\x0eZ\xbc\xd0\xaeP[\x18" +
	"7\xb2\xa08\xaf:\x8e\xb2\x00DBA\xfb\xb6\xf0?" +
	"\xc9\xa8]O\xafQ\xacG\xab+\xe55x\x9fcE" +
	"\x9c\xbc\xb2N^\x05\x89\x88h\xdf`L\x1b\xe6\xa0m" +
	"\xaca\xc4\xb6L\xa4's\xe3F\x92\xcd\x8f\xe7c\xc9" +
	"|5\xef\x8dO\xaf\xdd\xf7\x9b\x13\xe3\xa9-a}g" +
	"\"3\x8d\xe7\x97@\xc1\xdf\xc8A\x1b\x95\xc0J\x94\x0b" +
	"\xfe\x1dM\xcft\x9d\xc7@\xb9\xb8\x8e\x94\xc4u\x03\x89" +
	"kI\xfd\x8af{\x13\x89\xa5#~\x12\xd8\xdaj\x90" +
	"X:b\xe6+\x88\xeb8M\xe3\x88\x19\x07[\\\xb7" +
	"\x13w\xc4\xcc\xc3mq\xddE\xf38\xe2\xe4\x95lq" +
	"\xddG\xf7u\xc4I\xf6\xd8\xe2z\x88\xe2\x1d\xb1\xf1{" +
	"mq=N\xdc\x11\x95\x80\xcf\x16\xd7\xa7\x88\x9fD\xfe" +
	"<\x89\xabl\x8b\xeb\xb3\xc4\xcf \xff\x1e\x89\xab\xdf\x16" +
	"\xd7\x97\x88\x7f\x07\xf9OH\\\x03\xb6\xb8\xbeJ\xfc\x87" +
	"\xc8\xcf\x92\xb8\x06mq}\x9d\xf8k\xc8\xdf&q\x9d" +
	"a\x8b\xeb9\x12\xb3\xb3\xc8/\x90\xb8\xd6\xd9\xe2\xfa\x0b" +
	"\xe2?G~\x89\xc45d\x8b\xebE\xe2o#\x7f\x97" +
	"\xc4\xb5\xde\x16\xd7\xcb\xc4/ \xbfJ\xe2\x1a\xb6\xc5\xf5" +
	"\x0a\xf1K\xc8\xaf\x93\xb8*\xb6\xb8^#\xfe.\xf2\xdf" +
	"\x90\xb8Flq\xbdA\xfc*\xf2\xf7\x91\xcflPa" +
	"&\x80\xb8I\xfc:\xf2?\xd6\x12\xddT:i\xe4\xef" +
	")\xa9\x8f&\x8d\xcc\xc4d\xca,\x8d\xb3\x89\x9d\xe8\xbf" +
	"\xca/\x9c\xa6d\x17\xe6js\x85\x15Y{\x0d\xd6Q" +
	"\x83Ek\xb0\xce\x1a\xac\xab\x06[\xfei\xbew\xd5P" +
	"\xed\xd5\x15^\xaa\xc6\xabTM\x93Y~\xd0\x87J\x07" +
	"\xdd\x8b'\xf1A\\\xf0\xba\xe2\x01\xa5\xb7m:p\x1e" +
	"\xe4\x8a\xdbD\x85h\x83\xd7!\x9f\xe52Q3)\\" +
	"A<\xb7x\x9e\xe9\xa5\x9aL\xc8,\xe4\xcdt\x9e\x0b" +
	"&j!\xf1\xb9\xc8[\xdc&j\x11\xf1\x05\xc8[\xdd" +
	"&j1\xf1f\xe4\xcb\xdc&j)\xf1\x16\xe4Q\xb7" +
	"\x89j#\xde\x8a\xbc\xdbm\xa2:\x89/C\xbe\xcam" +
	"\xa2V\xd0\xbe\x8f\"\xefs\x9b\xa8\x1e\xe2\x8e\xc7,\x9a" +
	"\xa8~\xe2\x8e\xc7,\x9a\xa8A\xe2}\xc8\x87\xdc&*" +
	"F\xbc\xe4=K&j-q\xc7|\x16M\x94F|" +
	"\x08\xf9\x88\xdbD=D|\x18\xf9\xc6\xff\x97)\xfa\xec" +
	"\x9a\x9e2w\xb0.g\xd2g\x0b\x85{\xea,\xcb\x83" +
	"\xd6&\x81\xd6d3\x07mL\x82\x10\xdc\xb6T2<" +
	")\xec\xc2\xa3\x1c4S\x82\x90\xf4\x1fK\x05\x89\xb1\xc8" +
	"v\xa4\x19\x0e\xdan\x09B\xfc\x96\xa5\x02g,\xb2\xab" +
	"\x9d1\xcd\xe4\xa0\xed\xc5\x17Ez\xc5\x9c \xb7\xa28" +
	"\x1fQ\xe9`\x82E\xcfB7'\x18\xcf\xe2\xbfK_" +
	"N\x0b\xffN\x90)\xd0w2\x9e\xc8\x80\xe2|#\xb4" +
	"\xff=\xdf\xcc\xaf6\xf0\xb2\xd2\xe7\xe9\xe2ew\xf5w" +
	"C\xa9\xb4l\x7fT\xb8\xb7\xd9\xfao\x00\x00\x00\xff\xff" +
	"Z\xbe\x9cC"

func init() {
	schemas.Register(schema_b99093b7d2518300,
		0x828d564f51f7af4e,
		0x89c736f29fb5bda4,
		0x8e703729a3de1278,
		0x91989c51606be6c8,
		0x958c34c871381d2c,
		0x97ffa3012c4f6a3e,
		0x981693349de63c8c,
		0x9843dfb8f1386b20,
		0xa031328fb2fcc743,
		0xa0835740abfe642a,
		0xa634f083d73d4594,
		0xa6bc62ab6b339789,
		0xae798ec69e3629e9,
		0xb105e7dd5c44b39c,
		0xbb0225ef96e5ba9f,
		0xc9c165c236a1bd53,
		0xd4eb3c212b8dbb26,
		0xd53d449df9ef11fc,
		0xf8c203f305398e1b,
		0xfb4425cca53d7224,
		0xff9ec84d90bcd521)
}

var x_b99093b7d2518300 = []byte{
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 6, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 6, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 6, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
}
