// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	capnp "github.com/MadBase/go-capnproto2/v2"
	text "github.com/MadBase/go-capnproto2/v2/encoding/text"
	schemas "github.com/MadBase/go-capnproto2/v2/schemas"
	strconv "strconv"
)

// Constants defined in application.capnp.
var (
	DefaultDSPreImage   = DSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[0:144]).Struct()}
	DefaultDSLinker     = DSLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[144:312]).Struct()}
	DefaultVSPreImage   = VSPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[312:416]).Struct()}
	DefaultASPreImage   = ASPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[416:528]).Struct()}
	DefaultTXInPreImage = TXInPreImage{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[528:568]).Struct()}
	DefaultTXInLinker   = TXInLinker{Struct: capnp.MustUnmarshalRootPtr(x_b99093b7d2518300[568:632]).Struct()}
)

func init() {
	// Set traversal limit for constants as Uint64Max since they're safe from amplification attacks.
	DefaultDSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultDSLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultVSPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultASPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInPreImage.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultTXInLinker.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
}

type DSPreImage struct{ capnp.Struct }

// DSPreImage_TypeID is the unique identifier for the type DSPreImage.
const DSPreImage_TypeID = 0xd4eb3c212b8dbb26

func NewDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func NewRootDSPreImage(s *capnp.Segment) (DSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3})
	return DSPreImage{st}, err
}

func ReadRootDSPreImage(msg *capnp.Message) (DSPreImage, error) {
	root, err := msg.RootPtr()
	return DSPreImage{root.Struct()}, err
}

func (s DSPreImage) String() string {
	str, _ := text.Marshal(0xd4eb3c212b8dbb26, s.Struct)
	return str
}

func (s DSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s DSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DSPreImage) Index() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasIndex() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetIndex(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s DSPreImage) IssuedAt() uint32 {
	return s.Struct.Uint32(4)
}

func (s DSPreImage) SetIssuedAt(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s DSPreImage) RawData() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasRawData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetRawData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s DSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(12)
}

func (s DSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s DSPreImage) Deposit() uint32 {
	return s.Struct.Uint32(8)
}

func (s DSPreImage) SetDeposit(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DSPreImage) Deposit1() uint32 {
	return s.Struct.Uint32(16)
}

func (s DSPreImage) SetDeposit1(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DSPreImage) Deposit2() uint32 {
	return s.Struct.Uint32(20)
}

func (s DSPreImage) SetDeposit2(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s DSPreImage) Deposit3() uint32 {
	return s.Struct.Uint32(24)
}

func (s DSPreImage) SetDeposit3(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s DSPreImage) Deposit4() uint32 {
	return s.Struct.Uint32(28)
}

func (s DSPreImage) SetDeposit4(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s DSPreImage) Deposit5() uint32 {
	return s.Struct.Uint32(32)
}

func (s DSPreImage) SetDeposit5(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s DSPreImage) Deposit6() uint32 {
	return s.Struct.Uint32(36)
}

func (s DSPreImage) SetDeposit6(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s DSPreImage) Deposit7() uint32 {
	return s.Struct.Uint32(40)
}

func (s DSPreImage) SetDeposit7(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s DSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(44)
}

func (s DSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s DSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(48)
}

func (s DSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s DSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(52)
}

func (s DSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s DSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(56)
}

func (s DSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s DSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(60)
}

func (s DSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s DSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(64)
}

func (s DSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s DSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(68)
}

func (s DSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(68, v)
}

func (s DSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(72)
}

func (s DSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(72, v)
}

// DSPreImage_List is a list of DSPreImage.
type DSPreImage_List struct{ capnp.List }

// NewDSPreImage creates a new list of DSPreImage.
func NewDSPreImage_List(s *capnp.Segment, sz int32) (DSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 3}, sz)
	return DSPreImage_List{l}, err
}

func (s DSPreImage_List) At(i int) DSPreImage { return DSPreImage{s.List.Struct(i)} }

func (s DSPreImage_List) Set(i int, v DSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s DSPreImage_List) String() string {
	str, _ := text.MarshalList(0xd4eb3c212b8dbb26, s.List)
	return str
}

// DSPreImage_Promise is a wrapper for a DSPreImage promised by a client call.
type DSPreImage_Promise struct{ *capnp.Pipeline }

func (p DSPreImage_Promise) Struct() (DSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return DSPreImage{s}, err
}

type DSLinker struct{ capnp.Struct }

// DSLinker_TypeID is the unique identifier for the type DSLinker.
const DSLinker_TypeID = 0x91989c51606be6c8

func NewDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func NewRootDSLinker(s *capnp.Segment) (DSLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DSLinker{st}, err
}

func ReadRootDSLinker(msg *capnp.Message) (DSLinker, error) {
	root, err := msg.RootPtr()
	return DSLinker{root.Struct()}, err
}

func (s DSLinker) String() string {
	str, _ := text.Marshal(0x91989c51606be6c8, s.Struct)
	return str
}

func (s DSLinker) DSPreImage() DSPreImage {
	if !s.HasDSPreImage() {
		s.NewDSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[632:776])
	return DSPreImage{Struct: ss}
}

func (s DSLinker) HasDSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetDSPreImage(v DSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSPreImage sets the dSPreImage field to a newly
// allocated DSPreImage struct, preferring placement in s's segment.
func (s DSLinker) NewDSPreImage() (DSPreImage, error) {
	ss, err := NewDSPreImage(s.Struct.Segment())
	if err != nil {
		return DSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DSLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DSLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DSLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DSLinker_List is a list of DSLinker.
type DSLinker_List struct{ capnp.List }

// NewDSLinker creates a new list of DSLinker.
func NewDSLinker_List(s *capnp.Segment, sz int32) (DSLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DSLinker_List{l}, err
}

func (s DSLinker_List) At(i int) DSLinker { return DSLinker{s.List.Struct(i)} }

func (s DSLinker_List) Set(i int, v DSLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s DSLinker_List) String() string {
	str, _ := text.MarshalList(0x91989c51606be6c8, s.List)
	return str
}

// DSLinker_Promise is a wrapper for a DSLinker promised by a client call.
type DSLinker_Promise struct{ *capnp.Pipeline }

func (p DSLinker_Promise) Struct() (DSLinker, error) {
	s, err := p.Pipeline.Struct()
	return DSLinker{s}, err
}

func (p DSLinker_Promise) DSPreImage() DSPreImage_Promise {
	return DSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[776:920])}
}

type DataStore struct{ capnp.Struct }

// DataStore_TypeID is the unique identifier for the type DataStore.
const DataStore_TypeID = 0x9843dfb8f1386b20

func NewDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func NewRootDataStore(s *capnp.Segment) (DataStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DataStore{st}, err
}

func ReadRootDataStore(msg *capnp.Message) (DataStore, error) {
	root, err := msg.RootPtr()
	return DataStore{root.Struct()}, err
}

func (s DataStore) String() string {
	str, _ := text.Marshal(0x9843dfb8f1386b20, s.Struct)
	return str
}

func (s DataStore) DSLinker() DSLinker {
	if !s.HasDSLinker() {
		s.NewDSLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[920:1088])
	return DSLinker{Struct: ss}
}

func (s DataStore) HasDSLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DataStore) SetDSLinker(v DSLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDSLinker sets the dSLinker field to a newly
// allocated DSLinker struct, preferring placement in s's segment.
func (s DataStore) NewDSLinker() (DSLinker, error) {
	ss, err := NewDSLinker(s.Struct.Segment())
	if err != nil {
		return DSLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s DataStore) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s DataStore) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DataStore) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// DataStore_List is a list of DataStore.
type DataStore_List struct{ capnp.List }

// NewDataStore creates a new list of DataStore.
func NewDataStore_List(s *capnp.Segment, sz int32) (DataStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DataStore_List{l}, err
}

func (s DataStore_List) At(i int) DataStore { return DataStore{s.List.Struct(i)} }

func (s DataStore_List) Set(i int, v DataStore) error { return s.List.SetStruct(i, v.Struct) }

func (s DataStore_List) String() string {
	str, _ := text.MarshalList(0x9843dfb8f1386b20, s.List)
	return str
}

// DataStore_Promise is a wrapper for a DataStore promised by a client call.
type DataStore_Promise struct{ *capnp.Pipeline }

func (p DataStore_Promise) Struct() (DataStore, error) {
	s, err := p.Pipeline.Struct()
	return DataStore{s}, err
}

func (p DataStore_Promise) DSLinker() DSLinker_Promise {
	return DSLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1088:1256])}
}

type VSPreImage struct{ capnp.Struct }

// VSPreImage_TypeID is the unique identifier for the type VSPreImage.
const VSPreImage_TypeID = 0xf8c203f305398e1b

func NewVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func NewRootVSPreImage(s *capnp.Segment) (VSPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return VSPreImage{st}, err
}

func ReadRootVSPreImage(msg *capnp.Message) (VSPreImage, error) {
	root, err := msg.RootPtr()
	return VSPreImage{root.Struct()}, err
}

func (s VSPreImage) String() string {
	str, _ := text.Marshal(0xf8c203f305398e1b, s.Struct)
	return str
}

func (s VSPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s VSPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s VSPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(8)
}

func (s VSPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s VSPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s VSPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VSPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s VSPreImage) Value() uint32 {
	return s.Struct.Uint32(4)
}

func (s VSPreImage) SetValue(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s VSPreImage) Value1() uint32 {
	return s.Struct.Uint32(12)
}

func (s VSPreImage) SetValue1(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s VSPreImage) Value2() uint32 {
	return s.Struct.Uint32(16)
}

func (s VSPreImage) SetValue2(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s VSPreImage) Value3() uint32 {
	return s.Struct.Uint32(20)
}

func (s VSPreImage) SetValue3(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s VSPreImage) Value4() uint32 {
	return s.Struct.Uint32(24)
}

func (s VSPreImage) SetValue4(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s VSPreImage) Value5() uint32 {
	return s.Struct.Uint32(28)
}

func (s VSPreImage) SetValue5(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s VSPreImage) Value6() uint32 {
	return s.Struct.Uint32(32)
}

func (s VSPreImage) SetValue6(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s VSPreImage) Value7() uint32 {
	return s.Struct.Uint32(36)
}

func (s VSPreImage) SetValue7(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s VSPreImage) Fee0() uint32 {
	return s.Struct.Uint32(40)
}

func (s VSPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s VSPreImage) Fee1() uint32 {
	return s.Struct.Uint32(44)
}

func (s VSPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s VSPreImage) Fee2() uint32 {
	return s.Struct.Uint32(48)
}

func (s VSPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s VSPreImage) Fee3() uint32 {
	return s.Struct.Uint32(52)
}

func (s VSPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s VSPreImage) Fee4() uint32 {
	return s.Struct.Uint32(56)
}

func (s VSPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s VSPreImage) Fee5() uint32 {
	return s.Struct.Uint32(60)
}

func (s VSPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s VSPreImage) Fee6() uint32 {
	return s.Struct.Uint32(64)
}

func (s VSPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s VSPreImage) Fee7() uint32 {
	return s.Struct.Uint32(68)
}

func (s VSPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(68, v)
}

// VSPreImage_List is a list of VSPreImage.
type VSPreImage_List struct{ capnp.List }

// NewVSPreImage creates a new list of VSPreImage.
func NewVSPreImage_List(s *capnp.Segment, sz int32) (VSPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return VSPreImage_List{l}, err
}

func (s VSPreImage_List) At(i int) VSPreImage { return VSPreImage{s.List.Struct(i)} }

func (s VSPreImage_List) Set(i int, v VSPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s VSPreImage_List) String() string {
	str, _ := text.MarshalList(0xf8c203f305398e1b, s.List)
	return str
}

// VSPreImage_Promise is a wrapper for a VSPreImage promised by a client call.
type VSPreImage_Promise struct{ *capnp.Pipeline }

func (p VSPreImage_Promise) Struct() (VSPreImage, error) {
	s, err := p.Pipeline.Struct()
	return VSPreImage{s}, err
}

type ValueStore struct{ capnp.Struct }

// ValueStore_TypeID is the unique identifier for the type ValueStore.
const ValueStore_TypeID = 0xa031328fb2fcc743

func NewValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func NewRootValueStore(s *capnp.Segment) (ValueStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ValueStore{st}, err
}

func ReadRootValueStore(msg *capnp.Message) (ValueStore, error) {
	root, err := msg.RootPtr()
	return ValueStore{root.Struct()}, err
}

func (s ValueStore) String() string {
	str, _ := text.Marshal(0xa031328fb2fcc743, s.Struct)
	return str
}

func (s ValueStore) VSPreImage() VSPreImage {
	if !s.HasVSPreImage() {
		s.NewVSPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1256:1360])
	return VSPreImage{Struct: ss}
}

func (s ValueStore) HasVSPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetVSPreImage(v VSPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVSPreImage sets the vSPreImage field to a newly
// allocated VSPreImage struct, preferring placement in s's segment.
func (s ValueStore) NewVSPreImage() (VSPreImage, error) {
	ss, err := NewVSPreImage(s.Struct.Segment())
	if err != nil {
		return VSPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s ValueStore) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ValueStore) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ValueStore) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// ValueStore_List is a list of ValueStore.
type ValueStore_List struct{ capnp.List }

// NewValueStore creates a new list of ValueStore.
func NewValueStore_List(s *capnp.Segment, sz int32) (ValueStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ValueStore_List{l}, err
}

func (s ValueStore_List) At(i int) ValueStore { return ValueStore{s.List.Struct(i)} }

func (s ValueStore_List) Set(i int, v ValueStore) error { return s.List.SetStruct(i, v.Struct) }

func (s ValueStore_List) String() string {
	str, _ := text.MarshalList(0xa031328fb2fcc743, s.List)
	return str
}

// ValueStore_Promise is a wrapper for a ValueStore promised by a client call.
type ValueStore_Promise struct{ *capnp.Pipeline }

func (p ValueStore_Promise) Struct() (ValueStore, error) {
	s, err := p.Pipeline.Struct()
	return ValueStore{s}, err
}

func (p ValueStore_Promise) VSPreImage() VSPreImage_Promise {
	return VSPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1360:1464])}
}

type ASPreImage struct{ capnp.Struct }

// ASPreImage_TypeID is the unique identifier for the type ASPreImage.
const ASPreImage_TypeID = 0xa6bc62ab6b339789

func NewASPreImage(s *capnp.Segment) (ASPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return ASPreImage{st}, err
}

func NewRootASPreImage(s *capnp.Segment) (ASPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return ASPreImage{st}, err
}

func ReadRootASPreImage(msg *capnp.Message) (ASPreImage, error) {
	root, err := msg.RootPtr()
	return ASPreImage{root.Struct()}, err
}

func (s ASPreImage) String() string {
	str, _ := text.Marshal(0xa6bc62ab6b339789, s.Struct)
	return str
}

func (s ASPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s ASPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ASPreImage) TXOutIdx() uint32 {
	return s.Struct.Uint32(8)
}

func (s ASPreImage) SetTXOutIdx(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s ASPreImage) Owner() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ASPreImage) HasOwner() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASPreImage) SetOwner(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s ASPreImage) IssuedAt() uint32 {
	return s.Struct.Uint32(12)
}

func (s ASPreImage) SetIssuedAt(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s ASPreImage) Exp() uint32 {
	return s.Struct.Uint32(16)
}

func (s ASPreImage) SetExp(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s ASPreImage) Value() uint32 {
	return s.Struct.Uint32(4)
}

func (s ASPreImage) SetValue(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ASPreImage) Value1() uint32 {
	return s.Struct.Uint32(20)
}

func (s ASPreImage) SetValue1(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s ASPreImage) Value2() uint32 {
	return s.Struct.Uint32(24)
}

func (s ASPreImage) SetValue2(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s ASPreImage) Value3() uint32 {
	return s.Struct.Uint32(28)
}

func (s ASPreImage) SetValue3(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s ASPreImage) Value4() uint32 {
	return s.Struct.Uint32(32)
}

func (s ASPreImage) SetValue4(v uint32) {
	s.Struct.SetUint32(32, v)
}

func (s ASPreImage) Value5() uint32 {
	return s.Struct.Uint32(36)
}

func (s ASPreImage) SetValue5(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s ASPreImage) Value6() uint32 {
	return s.Struct.Uint32(40)
}

func (s ASPreImage) SetValue6(v uint32) {
	s.Struct.SetUint32(40, v)
}

func (s ASPreImage) Value7() uint32 {
	return s.Struct.Uint32(44)
}

func (s ASPreImage) SetValue7(v uint32) {
	s.Struct.SetUint32(44, v)
}

func (s ASPreImage) Fee0() uint32 {
	return s.Struct.Uint32(48)
}

func (s ASPreImage) SetFee0(v uint32) {
	s.Struct.SetUint32(48, v)
}

func (s ASPreImage) Fee1() uint32 {
	return s.Struct.Uint32(52)
}

func (s ASPreImage) SetFee1(v uint32) {
	s.Struct.SetUint32(52, v)
}

func (s ASPreImage) Fee2() uint32 {
	return s.Struct.Uint32(56)
}

func (s ASPreImage) SetFee2(v uint32) {
	s.Struct.SetUint32(56, v)
}

func (s ASPreImage) Fee3() uint32 {
	return s.Struct.Uint32(60)
}

func (s ASPreImage) SetFee3(v uint32) {
	s.Struct.SetUint32(60, v)
}

func (s ASPreImage) Fee4() uint32 {
	return s.Struct.Uint32(64)
}

func (s ASPreImage) SetFee4(v uint32) {
	s.Struct.SetUint32(64, v)
}

func (s ASPreImage) Fee5() uint32 {
	return s.Struct.Uint32(68)
}

func (s ASPreImage) SetFee5(v uint32) {
	s.Struct.SetUint32(68, v)
}

func (s ASPreImage) Fee6() uint32 {
	return s.Struct.Uint32(72)
}

func (s ASPreImage) SetFee6(v uint32) {
	s.Struct.SetUint32(72, v)
}

func (s ASPreImage) Fee7() uint32 {
	return s.Struct.Uint32(76)
}

func (s ASPreImage) SetFee7(v uint32) {
	s.Struct.SetUint32(76, v)
}

// ASPreImage_List is a list of ASPreImage.
type ASPreImage_List struct{ capnp.List }

// NewASPreImage creates a new list of ASPreImage.
func NewASPreImage_List(s *capnp.Segment, sz int32) (ASPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return ASPreImage_List{l}, err
}

func (s ASPreImage_List) At(i int) ASPreImage { return ASPreImage{s.List.Struct(i)} }

func (s ASPreImage_List) Set(i int, v ASPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s ASPreImage_List) String() string {
	str, _ := text.MarshalList(0xa6bc62ab6b339789, s.List)
	return str
}

// ASPreImage_Promise is a wrapper for a ASPreImage promised by a client call.
type ASPreImage_Promise struct{ *capnp.Pipeline }

func (p ASPreImage_Promise) Struct() (ASPreImage, error) {
	s, err := p.Pipeline.Struct()
	return ASPreImage{s}, err
}

type AtomicSwap struct{ capnp.Struct }

// AtomicSwap_TypeID is the unique identifier for the type AtomicSwap.
const AtomicSwap_TypeID = 0xc9c165c236a1bd53

func NewAtomicSwap(s *capnp.Segment) (AtomicSwap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AtomicSwap{st}, err
}

func NewRootAtomicSwap(s *capnp.Segment) (AtomicSwap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AtomicSwap{st}, err
}

func ReadRootAtomicSwap(msg *capnp.Message) (AtomicSwap, error) {
	root, err := msg.RootPtr()
	return AtomicSwap{root.Struct()}, err
}

func (s AtomicSwap) String() string {
	str, _ := text.Marshal(0xc9c165c236a1bd53, s.Struct)
	return str
}

func (s AtomicSwap) ASPreImage() ASPreImage {
	if !s.HasASPreImage() {
		s.NewASPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1464:1576])
	return ASPreImage{Struct: ss}
}

func (s AtomicSwap) HasASPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AtomicSwap) SetASPreImage(v ASPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewASPreImage sets the aSPreImage field to a newly
// allocated ASPreImage struct, preferring placement in s's segment.
func (s AtomicSwap) NewASPreImage() (ASPreImage, error) {
	ss, err := NewASPreImage(s.Struct.Segment())
	if err != nil {
		return ASPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s AtomicSwap) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s AtomicSwap) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AtomicSwap) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// AtomicSwap_List is a list of AtomicSwap.
type AtomicSwap_List struct{ capnp.List }

// NewAtomicSwap creates a new list of AtomicSwap.
func NewAtomicSwap_List(s *capnp.Segment, sz int32) (AtomicSwap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return AtomicSwap_List{l}, err
}

func (s AtomicSwap_List) At(i int) AtomicSwap { return AtomicSwap{s.List.Struct(i)} }

func (s AtomicSwap_List) Set(i int, v AtomicSwap) error { return s.List.SetStruct(i, v.Struct) }

func (s AtomicSwap_List) String() string {
	str, _ := text.MarshalList(0xc9c165c236a1bd53, s.List)
	return str
}

// AtomicSwap_Promise is a wrapper for a AtomicSwap promised by a client call.
type AtomicSwap_Promise struct{ *capnp.Pipeline }

func (p AtomicSwap_Promise) Struct() (AtomicSwap, error) {
	s, err := p.Pipeline.Struct()
	return AtomicSwap{s}, err
}

func (p AtomicSwap_Promise) ASPreImage() ASPreImage_Promise {
	return ASPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1576:1688])}
}

type TXInPreImage struct{ capnp.Struct }

// TXInPreImage_TypeID is the unique identifier for the type TXInPreImage.
const TXInPreImage_TypeID = 0xbb0225ef96e5ba9f

func NewTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func NewRootTXInPreImage(s *capnp.Segment) (TXInPreImage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXInPreImage{st}, err
}

func ReadRootTXInPreImage(msg *capnp.Message) (TXInPreImage, error) {
	root, err := msg.RootPtr()
	return TXInPreImage{root.Struct()}, err
}

func (s TXInPreImage) String() string {
	str, _ := text.Marshal(0xbb0225ef96e5ba9f, s.Struct)
	return str
}

func (s TXInPreImage) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s TXInPreImage) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TXInPreImage) ConsumedTxIdx() uint32 {
	return s.Struct.Uint32(4)
}

func (s TXInPreImage) SetConsumedTxIdx(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s TXInPreImage) ConsumedTxHash() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInPreImage) HasConsumedTxHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInPreImage) SetConsumedTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}

// TXInPreImage_List is a list of TXInPreImage.
type TXInPreImage_List struct{ capnp.List }

// NewTXInPreImage creates a new list of TXInPreImage.
func NewTXInPreImage_List(s *capnp.Segment, sz int32) (TXInPreImage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXInPreImage_List{l}, err
}

func (s TXInPreImage_List) At(i int) TXInPreImage { return TXInPreImage{s.List.Struct(i)} }

func (s TXInPreImage_List) Set(i int, v TXInPreImage) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInPreImage_List) String() string {
	str, _ := text.MarshalList(0xbb0225ef96e5ba9f, s.List)
	return str
}

// TXInPreImage_Promise is a wrapper for a TXInPreImage promised by a client call.
type TXInPreImage_Promise struct{ *capnp.Pipeline }

func (p TXInPreImage_Promise) Struct() (TXInPreImage, error) {
	s, err := p.Pipeline.Struct()
	return TXInPreImage{s}, err
}

type TXInLinker struct{ capnp.Struct }

// TXInLinker_TypeID is the unique identifier for the type TXInLinker.
const TXInLinker_TypeID = 0x958c34c871381d2c

func NewTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func NewRootTXInLinker(s *capnp.Segment) (TXInLinker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXInLinker{st}, err
}

func ReadRootTXInLinker(msg *capnp.Message) (TXInLinker, error) {
	root, err := msg.RootPtr()
	return TXInLinker{root.Struct()}, err
}

func (s TXInLinker) String() string {
	str, _ := text.Marshal(0x958c34c871381d2c, s.Struct)
	return str
}

func (s TXInLinker) TXInPreImage() TXInPreImage {
	if !s.HasTXInPreImage() {
		s.NewTXInPreImage()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1688:1728])
	return TXInPreImage{Struct: ss}
}

func (s TXInLinker) HasTXInPreImage() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTXInPreImage(v TXInPreImage) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInPreImage sets the tXInPreImage field to a newly
// allocated TXInPreImage struct, preferring placement in s's segment.
func (s TXInLinker) NewTXInPreImage() (TXInPreImage, error) {
	ss, err := NewTXInPreImage(s.Struct.Segment())
	if err != nil {
		return TXInPreImage{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXInLinker) TxHash() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXInLinker) HasTxHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXInLinker) SetTxHash(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXInLinker_List is a list of TXInLinker.
type TXInLinker_List struct{ capnp.List }

// NewTXInLinker creates a new list of TXInLinker.
func NewTXInLinker_List(s *capnp.Segment, sz int32) (TXInLinker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXInLinker_List{l}, err
}

func (s TXInLinker_List) At(i int) TXInLinker { return TXInLinker{s.List.Struct(i)} }

func (s TXInLinker_List) Set(i int, v TXInLinker) error { return s.List.SetStruct(i, v.Struct) }

func (s TXInLinker_List) String() string {
	str, _ := text.MarshalList(0x958c34c871381d2c, s.List)
	return str
}

// TXInLinker_Promise is a wrapper for a TXInLinker promised by a client call.
type TXInLinker_Promise struct{ *capnp.Pipeline }

func (p TXInLinker_Promise) Struct() (TXInLinker, error) {
	s, err := p.Pipeline.Struct()
	return TXInLinker{s}, err
}

func (p TXInLinker_Promise) TXInPreImage() TXInPreImage_Promise {
	return TXInPreImage_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1728:1768])}
}

type TXIn struct{ capnp.Struct }

// TXIn_TypeID is the unique identifier for the type TXIn.
const TXIn_TypeID = 0xb105e7dd5c44b39c

func NewTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func NewRootTXIn(s *capnp.Segment) (TXIn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TXIn{st}, err
}

func ReadRootTXIn(msg *capnp.Message) (TXIn, error) {
	root, err := msg.RootPtr()
	return TXIn{root.Struct()}, err
}

func (s TXIn) String() string {
	str, _ := text.Marshal(0xb105e7dd5c44b39c, s.Struct)
	return str
}

func (s TXIn) TXInLinker() TXInLinker {
	if !s.HasTXInLinker() {
		s.NewTXInLinker()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_b99093b7d2518300[1768:1832])
	return TXInLinker{Struct: ss}
}

func (s TXIn) HasTXInLinker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXIn) SetTXInLinker(v TXInLinker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTXInLinker sets the tXInLinker field to a newly
// allocated TXInLinker struct, preferring placement in s's segment.
func (s TXIn) NewTXInLinker() (TXInLinker, error) {
	ss, err := NewTXInLinker(s.Struct.Segment())
	if err != nil {
		return TXInLinker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXIn) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s TXIn) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TXIn) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// TXIn_List is a list of TXIn.
type TXIn_List struct{ capnp.List }

// NewTXIn creates a new list of TXIn.
func NewTXIn_List(s *capnp.Segment, sz int32) (TXIn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TXIn_List{l}, err
}

func (s TXIn_List) At(i int) TXIn { return TXIn{s.List.Struct(i)} }

func (s TXIn_List) Set(i int, v TXIn) error { return s.List.SetStruct(i, v.Struct) }

func (s TXIn_List) String() string {
	str, _ := text.MarshalList(0xb105e7dd5c44b39c, s.List)
	return str
}

// TXIn_Promise is a wrapper for a TXIn promised by a client call.
type TXIn_Promise struct{ *capnp.Pipeline }

func (p TXIn_Promise) Struct() (TXIn, error) {
	s, err := p.Pipeline.Struct()
	return TXIn{s}, err
}

func (p TXIn_Promise) TXInLinker() TXInLinker_Promise {
	return TXInLinker_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_b99093b7d2518300[1832:1896])}
}

type TXOut struct{ capnp.Struct }
type TXOut_Which uint16

const (
	TXOut_Which_dataStore  TXOut_Which = 0
	TXOut_Which_valueStore TXOut_Which = 1
	TXOut_Which_atomicSwap TXOut_Which = 2
)

func (w TXOut_Which) String() string {
	const s = "dataStorevalueStoreatomicSwap"
	switch w {
	case TXOut_Which_dataStore:
		return s[0:9]
	case TXOut_Which_valueStore:
		return s[9:19]
	case TXOut_Which_atomicSwap:
		return s[19:29]

	}
	return "TXOut_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TXOut_TypeID is the unique identifier for the type TXOut.
const TXOut_TypeID = 0xfb4425cca53d7224

func NewTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func NewRootTXOut(s *capnp.Segment) (TXOut, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TXOut{st}, err
}

func ReadRootTXOut(msg *capnp.Message) (TXOut, error) {
	root, err := msg.RootPtr()
	return TXOut{root.Struct()}, err
}

func (s TXOut) String() string {
	str, _ := text.Marshal(0xfb4425cca53d7224, s.Struct)
	return str
}

func (s TXOut) Which() TXOut_Which {
	return TXOut_Which(s.Struct.Uint16(0))
}
func (s TXOut) DataStore() (DataStore, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return DataStore{}, err
	}
	return DataStore{Struct: p.Struct()}, err
}

func (s TXOut) HasDataStore() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetDataStore(v DataStore) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDataStore sets the dataStore field to a newly
// allocated DataStore struct, preferring placement in s's segment.
func (s TXOut) NewDataStore() (DataStore, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewDataStore(s.Struct.Segment())
	if err != nil {
		return DataStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) ValueStore() (ValueStore, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != valueStore")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return ValueStore{}, err
	}
	return ValueStore{Struct: p.Struct()}, err
}

func (s TXOut) HasValueStore() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetValueStore(v ValueStore) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValueStore sets the valueStore field to a newly
// allocated ValueStore struct, preferring placement in s's segment.
func (s TXOut) NewValueStore() (ValueStore, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewValueStore(s.Struct.Segment())
	if err != nil {
		return ValueStore{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s TXOut) AtomicSwap() (AtomicSwap, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != atomicSwap")
	}
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return AtomicSwap{}, err
	}
	return AtomicSwap{Struct: p.Struct()}, err
}

func (s TXOut) HasAtomicSwap() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TXOut) SetAtomicSwap(v AtomicSwap) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAtomicSwap sets the atomicSwap field to a newly
// allocated AtomicSwap struct, preferring placement in s's segment.
func (s TXOut) NewAtomicSwap() (AtomicSwap, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewAtomicSwap(s.Struct.Segment())
	if err != nil {
		return AtomicSwap{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// TXOut_List is a list of TXOut.
type TXOut_List struct{ capnp.List }

// NewTXOut creates a new list of TXOut.
func NewTXOut_List(s *capnp.Segment, sz int32) (TXOut_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return TXOut_List{l}, err
}

func (s TXOut_List) At(i int) TXOut { return TXOut{s.List.Struct(i)} }

func (s TXOut_List) Set(i int, v TXOut) error { return s.List.SetStruct(i, v.Struct) }

func (s TXOut_List) String() string {
	str, _ := text.MarshalList(0xfb4425cca53d7224, s.List)
	return str
}

// TXOut_Promise is a wrapper for a TXOut promised by a client call.
type TXOut_Promise struct{ *capnp.Pipeline }

func (p TXOut_Promise) Struct() (TXOut, error) {
	s, err := p.Pipeline.Struct()
	return TXOut{s}, err
}

func (p TXOut_Promise) DataStore() DataStore_Promise {
	return DataStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) ValueStore() ValueStore_Promise {
	return ValueStore_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p TXOut_Promise) AtomicSwap() AtomicSwap_Promise {
	return AtomicSwap_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0x97ffa3012c4f6a3e

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0x97ffa3012c4f6a3e, s.Struct)
	return str
}

func (s Tx) Vin() (TXIn_List, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return TXIn_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[1896:1920])
	return TXIn_List{List: l}, err
}

func (s Tx) HasVin() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetVin(v TXIn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVin sets the vin field to a newly
// allocated TXIn_List, preferring placement in s's segment.
func (s Tx) NewVin(n int32) (TXIn_List, error) {
	l, err := NewTXIn_List(s.Struct.Segment(), n)
	if err != nil {
		return TXIn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Tx) Vout() (TXOut_List, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return TXOut_List{}, err
	}
	l, err := p.ListDefault(x_b99093b7d2518300[1920:1944])
	return TXOut_List{List: l}, err
}

func (s Tx) HasVout() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetVout(v TXOut_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewVout sets the vout field to a newly
// allocated TXOut_List, preferring placement in s's segment.
func (s Tx) NewVout(n int32) (TXOut_List, error) {
	l, err := NewTXOut_List(s.Struct.Segment(), n)
	if err != nil {
		return TXOut_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Tx) Fee0() uint32 {
	return s.Struct.Uint32(0)
}

func (s Tx) SetFee0(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Tx) Fee1() uint32 {
	return s.Struct.Uint32(4)
}

func (s Tx) SetFee1(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Tx) Fee2() uint32 {
	return s.Struct.Uint32(8)
}

func (s Tx) SetFee2(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s Tx) Fee3() uint32 {
	return s.Struct.Uint32(12)
}

func (s Tx) SetFee3(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Tx) Fee4() uint32 {
	return s.Struct.Uint32(16)
}

func (s Tx) SetFee4(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s Tx) Fee5() uint32 {
	return s.Struct.Uint32(20)
}

func (s Tx) SetFee5(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s Tx) Fee6() uint32 {
	return s.Struct.Uint32(24)
}

func (s Tx) SetFee6(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s Tx) Fee7() uint32 {
	return s.Struct.Uint32(28)
}

func (s Tx) SetFee7(v uint32) {
	s.Struct.SetUint32(28, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0x97ffa3012c4f6a3e, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

const schema_b99093b7d2518300 = "x\xda\xdc\x98\x0dlS\xd7\x15\xc7\xefy\xf7\xd9\xcf6" +
	"ql\xe7>&` >\x04\x13tl#\x89!\x01" +
	"\x91\x91PG\x8a+G\xf8\xd5\xa6s\xa7 \xf1\x16\xbf" +
	"\x127\x89\xe38\x0e1\x13U[\xd1I Q\x06*" +
	"]S\x89\xb5T\xdd\xaam\xddW\xb7U+-\x93Z" +
	"T\xb6 Q\x89N\xa0\xb2\xa9\xecKm'2M\x1b" +
	"\x9a&\xed\xab\xbc\xe9\x9cg\xfb\xbd\x17;$\x93\xa6M" +
	"\xaa\x84\x90\xef\xcf'\xf7\x9d{}\xff\xff\xfb\xb7\xb7d" +
	"\x94n\xa9\xd5\xd3\xe1eL\xeb\xf3x\xcdr\xcb\xaf\x9e" +
	"\xdf\xd4Q8\xc1\"-\xf2\xed#\xda\xcf\x7f\xfc\xc4\xc9" +
	"s\x0c\xda\x81\xaf\x03\x11\xe1\x0ac\xa9&\xce!\xb5\x8c" +
	"K\xc0\x989\xf3\xc1\xf0~\xed\xcc\xf4)\x16i\x81j" +
	"\xb5GR\x18\x13\xdb\xf9/E/\xd6\x8b\x1e>\xc5\xc0" +
	"\xdc\xbc\xaas|&z\xfc\xc9\xfa\xca\xf7\xf9\xac\xb8E" +
	"\x95\x7f\xa4\xca\xcf>\xb8g3<o>\xc5\xb4\x16\x90" +
	"\xdd\xa5\xfb\xe4o\x09CV\x18k\xd7\xe5\x0e\x89\x81y" +
	"|\xe7\x07_\x8d>\xf1\xb1\xe99\xdd^\xf4\xae\x03q" +
	"\xcd\x8b\xdd^\xf1rH\xbd\xeb\xa5n\xd7\x0cw\xdez" +
	"\xe5\xd7wO\xd7\xf7\x10T~'\x96+\xf8j\xa9\x82" +
	"=\xdc\xfd\xb3\x7f\xfd\xe0\xcbm\xadg\xeb+/)\xb3" +
	"\xe2\x1aU\xbeM\x95weo\xbf\xd8\xfd\xb9#g\xe7" +
	"t\xa0\xfbZ@\x8c\xfb\xb0\x83\x11\x1f\x87T\xd9G\x1d" +
	"\x9c\xee\xedz\xe7\xc8\x9f\xa3/\xcc\xa9~\xd9\xb7\x0e\xc4" +
	"E\xaa~\x1d\xab/[\xd5\xc7\x9ej\x1f~\xf1\x0b\xe7" +
	"_\xc0\x9d\x08\xd4\xda\x00|\xf8M\xdf\xac\xf8+\xfeA" +
	"\xfb-\xdf\xb32\x03\xf3\xe6\xa6m\xcf\xfc\xf4\xc4\xa1\xef" +
	"\xce\x99\xf9\xad`\x1b\x88\x1bA\x9c\xf9z\x90C\xea\xbd" +
	" \xcd|\xe6\x87\xb1\x81\x1b\xbf\xf7\xbcT\xbf\xbe\xdf\x06" +
	"_\x157\x83\xf4\xb9\x04q}\xcf\xbe\xfa\xfeW\xfe\xb4" +
	"Az\x0d{\x00w\x0fF\xf3?\xc4x3\xbe\x1am" +
	"\xfe\x1e\x033\xf5\x93\xe7\xb6]0\xde\xb8T?i$" +
	"4+V\x85\xf0\xd5\xf2\x10N\xfa\x89\xd7\x1e\xff\xe4\xda" +
	"\x9d\x7f\xb8\xea^\x18\x9d\x81\xef\x84f\xc59,m\x7f" +
	"9\xf4\x0e.\xec\xe3'\xb6{\xfe\xc2/\xfc\x0dk\xfd" +
	"\xee\x06n\xa9\xb3\xe2C\x15k\xff\xae~\x06k\xd7\x17" +
	"\xbb\xbe~yC\xec\x9f\xaef{A\xe1\x8c\x89\xfb\x97" +
	"_\x10\xfar:E\xcb\xb1\xdb\xb5\xd7\xce\x9f\xec\x9fy" +
	"\xc6\x9c{\xd0W\xe0A_A\x07}\x05\x1e\xf4\x15\xb4" +
	"az\xa10\x92\x1b\xd4K<7\x96\xff\xf4\xa0^\xc8" +
	"\x17vd\x8d\x07\xf4\xc9\x91RO*Y4\xe2\xa3\x8a" +
	"~\xc0H\x02@\xd8\xfe\xd4\x18@\x98\xb1d\x00\x98?" +
	"\x02\x01\xc7$\x92=I,\x95\xc8\xe5\x87\xb9QL\x02" +
	"h>.3&\x03@d\xd3\xe7\x19\xd36r\xd0\xa2" +
	"\x12D\x00T@8\xbe\x831m\x84\x83V\x96\xc0\xcc" +
	"Z\x8f\xd5\x19?`@\xd8\xde\xd1\xeaC9\xf3G\xfc" +
	"\x01\xeb\x1f\x93v\x95\xca}\xfa\xc4\x10\x04\x99\x04A\xc6" +
	"\xe6m'\x9d\x89\xe7\x13\xb9P~\xb8\xae\xa1\x07\x1b4" +
	"\xd4\x85\x0dur\xd0b\x12\x98\xa5L<\x8f-\xb1\xd0" +
	"\xa8N-\xd5NN\xa5%\x80\xca\x83\xef\xd8\x0cT\x9b" +
	"\x09\x15v\xa4\xcb\xd8\xc4\xc6j\x13\xc2\x0f\xeb\x18K\xc9" +
	"\xc0!\xb5\x06\xec>\xc4Z\xb8\x8b\xb1\xd4J\xe4\x9d " +
	"\x01H*\xfe/\xb6\x13\x8e\"\xee\xc6r\x0e*p\x00" +
	"\xd1E\xbc\x13y\x0c\xb9,\xa9 \x03\x88\x1e\xe2;\x91" +
	"\xf7!\xf7p\x15<\x00\xa2\x97x7\xf2\x04r\xaf\xac" +
	"\x82\x17@\xc4\x89\xc7\x90'\x91+\x1e\x15\x14\x00\xd1O" +
	"\xbc\x0fy\x1a\xb9\xcf\xab\x82\x0f@h\xc4\x13\xc83\xc8" +
	"\xfd\x8a\x0a~\x00\xb1\x97x\x12\xf9\x00H\xa0\x1c\xcc\xe5" +
	"\xa1\x99A\x92\xe3i\xaa)\x95\x014\xe3f)\xddR" +
	"\xe8\xe0\xd8d\xc9.\xa9\x9d\xfaZI\x12 \xf4\x80a" +
	"l\x01\x1f\x93\xc0\xc7h\xd0\xea\x1c\xb49\x07\xed\xceA" +
	"\xd49\xd8\xea\x1cls\x0e:\xaa\x83;(#6W" +
	"\x19\x0b\x1c\xd2\x86\xfa\xd0Kz\xaa\xa4\x8c\x15\x8d9\xe7" +
	"\xf1\x9e\x06\xe7\xf1\xa1{\x19\xd3\x0es\xd0\x8e\x92@P" +
	"YF\x911\x06a\xfb\xa2\xb2\x1e\xdd-ir\x80G" +
	"z\x02\xce\x06\xb89\x91;\x90\xd7K\x93E\x06\xc6\x82" +
	"R\xb9O\x1f\x994R\xa1R}k\x8d\xb4\xbb\x0f\xa5" +
	"\x92\xe1\xa0e%0\x0f\xba\xb5[s\xb8\xca\xb6\xf8\x81" +
	"\xf9\x16\x16J\xa3\xfd\xa6\x15C\xd1\xda\xed\xc5-y\xfe" +
	"\xe9\xee\x9b\xfb\xf1\xcd\xdbg\xa3\xed\xb1l\x91\xbc\x00\xb7" +
	"']\x13q\x97\xb4\x1b\xd5'\xa1\xfa$TYE\xc4" +
	"=R\x1b\xaa\x0fy\x1f\xf2\xaa\x8a{\xa5{Pe\xc8" +
	"\x93\x92%n\x14q?\x95\xf7!Nc9\xe7\x96\x88" +
	"\xf7Ry\x1a\xf9~\xe4\xb2l\x89x\x9f\x84\xde\x91A" +
	"\x9eE\xee\xf5X\"\xd6\xa5\x1d\x8c\xa5\x06\x90\x0f!W" +
	"\xbc\x96\x88\x0d\xe2\xfb\x91\x8f \xf7)\x96\x88s\xc4\xb3" +
	"\xc8\x0b\xc8\xfd>K\xc4\xa3\xc4\x87\x90\x97\x90\x07\xfc*" +
	"\x04\x00\xc48\xf1\x11\xe4e\xe4K\x02*,\x01\x10\x93" +
	"\xc4\x0b\xc8\x0f#oZ\xa2B\x13\x808D\xbc\x84\xfc" +
	"\x11\xe4\xc1&\x15\x82\x00\xe2!\x09M\xa2\x8c\xfc1\xe4" +
	"\xcdA\x15\x9a\x01\xc4\xa3\xc4\x0f#?\x8a<\xd4\xacB" +
	"\x08@|\x89\xf8#\xc8\x8f#\x0f\x87T\x08\x03\x88c" +
	"\xc4\x1fC~\x12y$\xac\xe2)\x15\x8f\x13?\x8a\xfc" +
	"4\xf2\x96\x88\x0a-\x00\xe2\x14\xf1\xe3\xc8\xa7\x91\x8b\x16" +
	"\x15\x04\x80x\x92\xf8I\xe4g\x90\xabB\xc5\x0fR<" +
	"M\xfc4\xf2\xb3\x92\x04\x0f\x0f\x0e\xe9\xb9|<V\xb5" +
	"\x8b\xd5\x07Q65\xf3(e\xf6L\x96\xe2\xd92\x8a" +
	"\xb4Z16\x957\x8a\xee3\x9f\x9b\x98\x984\xb2=" +
	"%G\x99b\x94\x0b\xd5\xd7\xbbh\xd2V\xf7\xb0\xcd=" +
	"lw\x0f\xa3\xee\xe1V\xf7p\x9b{\xd8\xe1t\xbe\xff" +
	"\xb3\xa9\xa6\xadkvu|\xb4\xa6\xcby/\xda\xfaK" +
	"u\x97u\xc5/\xc2\xb0\xe2\xe8\xa5}\x1c\xb4t\xe5n" +
	"Goa\xdc(B\xd8\xce\xf2\xb6\xb3\x00D\x82\x01\xeb" +
	"\xb1\xf0\x1f\xd9\xa8\xb5\x9e]Fu=ZS\xad\xaf\xde" +
	"\xdd\x8ci\xdd\x1c\xb4\x84\xb3\xaf\xa2\xddW\xc5\"\"\xda" +
	"\x17\x19\xd3\x92\x1c\xb4\x81\xfa\x03g\x0e\x8e\xe5'&G" +
	"\x8d,[\x9d.\xc7\xb3\xe5z\xbe+\xbd\xb8l\xd4S" +
	"\x1a\x1b\xcd\x0d\x86RSza\x11\xfb\xa7\xa3\xe1\x0fp" +
	"\xd0\x86$0u\xb7\xe1\xcf\x9b\x10\x17\x1b\xd3bns" +
	"\xcd\xd4\xcc\xf5~2\xd7\x9a\xfbU\x03\xd2>2K\xdb" +
	"\xfc$\xb0\xbc\xd5 \xb3\xb4\xcd\xcc[1\xd7Q\x9a\xc6" +
	"63LN2\x99\xd9n\x97\x99\xc9\x95\x84t\x88\xe6" +
	"\xb1\xcd\xc9#Y\xe6\xfa(=\xd76'E\xb6\xcc\xf5" +
	"\x18\xd5\xdbf\xe3\xf3X\xe6z\x8a\xb8m*~\xafe" +
	"\xaeO\x13\x9fF\xfe52W\xc52\xd7\xe7\x88\x9fE" +
	"\xfem2W\x9fe\xae\xdf$\xfe\x0d\xe4?\"s\xf5" +
	"[\xe6\xfa\x12\xf1\xef#?O\xe6\x1a\xb0\xcc\xf5\x1c\xf1" +
	"W\x90\xbfI\xe6\xba\xc42\xd77\xc8\xcc\xce#\x9f!" +
	"sm\xb2\xcc\xf5\"\xf1\xd7\x91_&s\x0dZ\xe6z" +
	"\x89\xf8\x9b\xc8\xaf\x90\xb96[\xe6\xfa\x16\xf1\x19\xe4W" +
	"\xc9\\C\x96\xb9\xbeM\xfc2\xf2\xebd\xaea\xcb\\" +
	"\xaf\x11\xbf\x82\xfc]2\xd7\x88e\xae\xbf ~\x15\xf9" +
	"o\x90/mQa)\x80\xb8A\xfc:\xf2\xf7\x1a\x99" +
	"n.\x9f5\xca\x0bZ\xea\xc3Y\xa306\x91+\xd5" +
	"\xc6E}\x0a\xf3\x97\xfb\x0f\x17i\xd9\x95\xb9Z\x1de" +
	"U\xd6\xd6\x80\xb57`\xd1\x06lk\x03\xb6\xad\x01\xeb" +
	"p\xb0\xff\xb9k;S\xa2[\xa9\x89\x9aR=(\xa5" +
	"{\xf1\x13k\xaa*\x8c\xbe\xe2\x90bd\xe4ag\x0a" +
	"\x0a\xd2\x09mB\xbe\xcc\x91\x82\x96Ry\x18\xf1\xca\xaa" +
	" Q\xa8\xab(E,C\xbe\x9e\x04YIAk\x89" +
	"\xafD\xbe\xd1\x99\x826\x10_\x83|\xb33\x05m\"" +
	"\xbe\x1e\xf9\x16g\x0a\xfa\x14\xf1\x8d\xc8\xa3\xce\x14\xd4J" +
	"|3\xf2Ng\x0a\xdaJ|\x0b\xf2\x9d\xce\x14\xb4\x9d" +
	"\x0en\x14y\xb73\x05u\x11\xb7Cb5\x05\xf5\x10" +
	"\xb7Cb5\x05\xf5\x12\xefF\x9ep\xa6\xa08\xf1Z" +
	"x\xac\xa5\xa0~\xe2vz\xac\xa6 \x8dx\x02y\xc6" +
	"\x99\x82\xf6\x12O\"\x1f\xf8o\xa5\x9a\x8fnjq]" +
	"\xef{&K\xacr\xaf7\x99\xa6\x8c\xd9\xa4\x17\xb3E" +
	"\x8c\x83\x96\x94 \x08\xb7M\x95\x12K?^\xa3\x09\x0e" +
	"ZF\x82\xa0\xf4\xa1\xa9\x82\xc4Xd/\xd24\x07m" +
	"?~\xa7\xa3o\x83c\x14,\xc2\xf6\xcfyt\x8d\x82" +
	"I\xabN\x95\xc6\x18/\xe2\xdb\xb5\xdf\xf0*o\xebt" +
	"\x7f\xa7\xa6\x18\xd7\x0b\x10\xb6\x7f\xad\xaa\xbe}\xc7\xc8\x95" +
	"\xc8\xe5\x15\xebG\x91\x85\xf3\xcf\xbf\x03\x00\x00\xff\xff\xfc" +
	"\xde#\xa7"

func init() {
	schemas.Register(schema_b99093b7d2518300,
		0x8e703729a3de1278,
		0x91989c51606be6c8,
		0x958c34c871381d2c,
		0x97ffa3012c4f6a3e,
		0x981693349de63c8c,
		0x9843dfb8f1386b20,
		0xa031328fb2fcc743,
		0xa0835740abfe642a,
		0xa634f083d73d4594,
		0xa6bc62ab6b339789,
		0xae798ec69e3629e9,
		0xb105e7dd5c44b39c,
		0xbb0225ef96e5ba9f,
		0xc9c165c236a1bd53,
		0xd4eb3c212b8dbb26,
		0xf8c203f305398e1b,
		0xfb4425cca53d7224,
		0xff9ec84d90bcd521)
}

var x_b99093b7d2518300 = []byte{
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 10, 0, 3, 0,
	65, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	9, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 12, 0, 0, 0,
	0, 0, 0, 0, 9, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 10, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 1, 0, 1, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
}
