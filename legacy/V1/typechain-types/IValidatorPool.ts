/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export type ValidatorDataStruct = { _address: string; _tokenID: BigNumberish };

export type ValidatorDataStructOutput = [string, BigNumber] & {
    _address: string;
    _tokenID: BigNumber;
};

export interface IValidatorPoolInterface extends utils.Interface {
    contractName: "IValidatorPool";
    functions: {
        "claimExitingNFTPosition()": FunctionFragment;
        "collectProfits()": FunctionFragment;
        "completeETHDKG()": FunctionFragment;
        "getDisputerReward()": FunctionFragment;
        "getLocation(address)": FunctionFragment;
        "getLocations(address[])": FunctionFragment;
        "getMaxNumValidators()": FunctionFragment;
        "getStakeAmount()": FunctionFragment;
        "getValidator(uint256)": FunctionFragment;
        "getValidatorData(uint256)": FunctionFragment;
        "getValidatorsAddresses()": FunctionFragment;
        "getValidatorsCount()": FunctionFragment;
        "initializeETHDKG()": FunctionFragment;
        "isAccusable(address)": FunctionFragment;
        "isConsensusRunning()": FunctionFragment;
        "isInExitingQueue(address)": FunctionFragment;
        "isMaintenanceScheduled()": FunctionFragment;
        "isValidator(address)": FunctionFragment;
        "majorSlash(address,address)": FunctionFragment;
        "minorSlash(address,address)": FunctionFragment;
        "pauseConsensus()": FunctionFragment;
        "pauseConsensusOnArbitraryHeight(uint256)": FunctionFragment;
        "registerValidators(address[],uint256[])": FunctionFragment;
        "scheduleMaintenance()": FunctionFragment;
        "setDisputerReward(uint256)": FunctionFragment;
        "setLocation(string)": FunctionFragment;
        "setMaxNumValidators(uint256)": FunctionFragment;
        "setStakeAmount(uint256)": FunctionFragment;
        "tryGetTokenID(address)": FunctionFragment;
        "unregisterAllValidators()": FunctionFragment;
        "unregisterValidators(address[])": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "claimExitingNFTPosition",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "collectProfits",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "completeETHDKG",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getDisputerReward",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getLocation",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "getLocations",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "getMaxNumValidators",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getStakeAmount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getValidator",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getValidatorData",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getValidatorsAddresses",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getValidatorsCount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "initializeETHDKG",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isAccusable",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "isConsensusRunning",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isInExitingQueue",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "isMaintenanceScheduled",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isValidator",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "majorSlash",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "minorSlash",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "pauseConsensus",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "pauseConsensusOnArbitraryHeight",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "registerValidators",
        values: [string[], BigNumberish[]]
    ): string;
    encodeFunctionData(
        functionFragment: "scheduleMaintenance",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "setDisputerReward",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setLocation",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "setMaxNumValidators",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setStakeAmount",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "tryGetTokenID",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "unregisterAllValidators",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "unregisterValidators",
        values: [string[]]
    ): string;

    decodeFunctionResult(
        functionFragment: "claimExitingNFTPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectProfits",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "completeETHDKG",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getDisputerReward",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLocation",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLocations",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMaxNumValidators",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getStakeAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getValidator",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getValidatorData",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getValidatorsAddresses",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getValidatorsCount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initializeETHDKG",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isAccusable",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isConsensusRunning",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isInExitingQueue",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isMaintenanceScheduled",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isValidator",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "majorSlash",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "minorSlash",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "pauseConsensus",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "pauseConsensusOnArbitraryHeight",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "registerValidators",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "scheduleMaintenance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setDisputerReward",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setLocation",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setMaxNumValidators",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setStakeAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "tryGetTokenID",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "unregisterAllValidators",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "unregisterValidators",
        data: BytesLike
    ): Result;

    events: {
        "MaintenanceScheduled()": EventFragment;
        "ValidatorJoined(address,uint256)": EventFragment;
        "ValidatorLeft(address,uint256)": EventFragment;
        "ValidatorMajorSlashed(address)": EventFragment;
        "ValidatorMinorSlashed(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "MaintenanceScheduled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorJoined"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorLeft"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorMajorSlashed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorMinorSlashed"): EventFragment;
}

export type MaintenanceScheduledEvent = TypedEvent<[], {}>;

export type MaintenanceScheduledEventFilter =
    TypedEventFilter<MaintenanceScheduledEvent>;

export type ValidatorJoinedEvent = TypedEvent<
    [string, BigNumber],
    { account: string; validatorStakingTokenID: BigNumber }
>;

export type ValidatorJoinedEventFilter = TypedEventFilter<ValidatorJoinedEvent>;

export type ValidatorLeftEvent = TypedEvent<
    [string, BigNumber],
    { account: string; publicStakingTokenID: BigNumber }
>;

export type ValidatorLeftEventFilter = TypedEventFilter<ValidatorLeftEvent>;

export type ValidatorMajorSlashedEvent = TypedEvent<
    [string],
    { account: string }
>;

export type ValidatorMajorSlashedEventFilter =
    TypedEventFilter<ValidatorMajorSlashedEvent>;

export type ValidatorMinorSlashedEvent = TypedEvent<
    [string, BigNumber],
    { account: string; publicStakingTokenID: BigNumber }
>;

export type ValidatorMinorSlashedEventFilter =
    TypedEventFilter<ValidatorMinorSlashedEvent>;

export interface IValidatorPool extends BaseContract {
    contractName: "IValidatorPool";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IValidatorPoolInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        claimExitingNFTPosition(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectProfits(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        completeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getDisputerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

        getLocation(
            validator: string,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getLocations(
            validators_: string[],
            overrides?: CallOverrides
        ): Promise<[string[]]>;

        getMaxNumValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

        getStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

        getValidator(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getValidatorData(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[ValidatorDataStructOutput]>;

        getValidatorsAddresses(overrides?: CallOverrides): Promise<[string[]]>;

        getValidatorsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

        initializeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isAccusable(
            participant: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        isConsensusRunning(overrides?: CallOverrides): Promise<[boolean]>;

        isInExitingQueue(
            participant: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        isMaintenanceScheduled(overrides?: CallOverrides): Promise<[boolean]>;

        isValidator(
            participant: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        majorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        minorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        pauseConsensus(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        pauseConsensusOnArbitraryHeight(
            aliceNetHeight: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        registerValidators(
            validators: string[],
            publicStakingTokenIDs: BigNumberish[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        scheduleMaintenance(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setDisputerReward(
            disputerReward_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setLocation(
            ip: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setMaxNumValidators(
            maxNumValidators_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setStakeAmount(
            stakeAmount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        tryGetTokenID(
            account_: string,
            overrides?: CallOverrides
        ): Promise<[boolean, string, BigNumber]>;

        unregisterAllValidators(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        unregisterValidators(
            validators: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    claimExitingNFTPosition(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectProfits(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeETHDKG(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDisputerReward(overrides?: CallOverrides): Promise<BigNumber>;

    getLocation(validator: string, overrides?: CallOverrides): Promise<string>;

    getLocations(
        validators_: string[],
        overrides?: CallOverrides
    ): Promise<string[]>;

    getMaxNumValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidator(
        index: BigNumberish,
        overrides?: CallOverrides
    ): Promise<string>;

    getValidatorData(
        index: BigNumberish,
        overrides?: CallOverrides
    ): Promise<ValidatorDataStructOutput>;

    getValidatorsAddresses(overrides?: CallOverrides): Promise<string[]>;

    getValidatorsCount(overrides?: CallOverrides): Promise<BigNumber>;

    initializeETHDKG(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAccusable(
        participant: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    isConsensusRunning(overrides?: CallOverrides): Promise<boolean>;

    isInExitingQueue(
        participant: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    isMaintenanceScheduled(overrides?: CallOverrides): Promise<boolean>;

    isValidator(
        participant: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    majorSlash(
        dishonestValidator_: string,
        disputer_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minorSlash(
        dishonestValidator_: string,
        disputer_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseConsensus(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseConsensusOnArbitraryHeight(
        aliceNetHeight: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerValidators(
        validators: string[],
        publicStakingTokenIDs: BigNumberish[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scheduleMaintenance(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisputerReward(
        disputerReward_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLocation(
        ip: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxNumValidators(
        maxNumValidators_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakeAmount(
        stakeAmount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryGetTokenID(
        account_: string,
        overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber]>;

    unregisterAllValidators(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterValidators(
        validators: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        claimExitingNFTPosition(overrides?: CallOverrides): Promise<BigNumber>;

        collectProfits(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                payoutEth: BigNumber;
                payoutToken: BigNumber;
            }
        >;

        completeETHDKG(overrides?: CallOverrides): Promise<void>;

        getDisputerReward(overrides?: CallOverrides): Promise<BigNumber>;

        getLocation(
            validator: string,
            overrides?: CallOverrides
        ): Promise<string>;

        getLocations(
            validators_: string[],
            overrides?: CallOverrides
        ): Promise<string[]>;

        getMaxNumValidators(overrides?: CallOverrides): Promise<BigNumber>;

        getStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        getValidator(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        getValidatorData(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<ValidatorDataStructOutput>;

        getValidatorsAddresses(overrides?: CallOverrides): Promise<string[]>;

        getValidatorsCount(overrides?: CallOverrides): Promise<BigNumber>;

        initializeETHDKG(overrides?: CallOverrides): Promise<void>;

        isAccusable(
            participant: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isConsensusRunning(overrides?: CallOverrides): Promise<boolean>;

        isInExitingQueue(
            participant: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isMaintenanceScheduled(overrides?: CallOverrides): Promise<boolean>;

        isValidator(
            participant: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        majorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: CallOverrides
        ): Promise<void>;

        minorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: CallOverrides
        ): Promise<void>;

        pauseConsensus(overrides?: CallOverrides): Promise<void>;

        pauseConsensusOnArbitraryHeight(
            aliceNetHeight: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        registerValidators(
            validators: string[],
            publicStakingTokenIDs: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<void>;

        scheduleMaintenance(overrides?: CallOverrides): Promise<void>;

        setDisputerReward(
            disputerReward_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setLocation(ip: string, overrides?: CallOverrides): Promise<void>;

        setMaxNumValidators(
            maxNumValidators_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setStakeAmount(
            stakeAmount_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        tryGetTokenID(
            account_: string,
            overrides?: CallOverrides
        ): Promise<[boolean, string, BigNumber]>;

        unregisterAllValidators(overrides?: CallOverrides): Promise<void>;

        unregisterValidators(
            validators: string[],
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "MaintenanceScheduled()"(): MaintenanceScheduledEventFilter;
        MaintenanceScheduled(): MaintenanceScheduledEventFilter;

        "ValidatorJoined(address,uint256)"(
            account?: string | null,
            validatorStakingTokenID?: null
        ): ValidatorJoinedEventFilter;
        ValidatorJoined(
            account?: string | null,
            validatorStakingTokenID?: null
        ): ValidatorJoinedEventFilter;

        "ValidatorLeft(address,uint256)"(
            account?: string | null,
            publicStakingTokenID?: null
        ): ValidatorLeftEventFilter;
        ValidatorLeft(
            account?: string | null,
            publicStakingTokenID?: null
        ): ValidatorLeftEventFilter;

        "ValidatorMajorSlashed(address)"(
            account?: string | null
        ): ValidatorMajorSlashedEventFilter;
        ValidatorMajorSlashed(
            account?: string | null
        ): ValidatorMajorSlashedEventFilter;

        "ValidatorMinorSlashed(address,uint256)"(
            account?: string | null,
            publicStakingTokenID?: null
        ): ValidatorMinorSlashedEventFilter;
        ValidatorMinorSlashed(
            account?: string | null,
            publicStakingTokenID?: null
        ): ValidatorMinorSlashedEventFilter;
    };

    estimateGas: {
        claimExitingNFTPosition(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectProfits(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        completeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getDisputerReward(overrides?: CallOverrides): Promise<BigNumber>;

        getLocation(
            validator: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getLocations(
            validators_: string[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getMaxNumValidators(overrides?: CallOverrides): Promise<BigNumber>;

        getStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

        getValidator(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getValidatorData(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getValidatorsAddresses(overrides?: CallOverrides): Promise<BigNumber>;

        getValidatorsCount(overrides?: CallOverrides): Promise<BigNumber>;

        initializeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isAccusable(
            participant: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isConsensusRunning(overrides?: CallOverrides): Promise<BigNumber>;

        isInExitingQueue(
            participant: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isMaintenanceScheduled(overrides?: CallOverrides): Promise<BigNumber>;

        isValidator(
            participant: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        majorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        minorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        pauseConsensus(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        pauseConsensusOnArbitraryHeight(
            aliceNetHeight: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        registerValidators(
            validators: string[],
            publicStakingTokenIDs: BigNumberish[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        scheduleMaintenance(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setDisputerReward(
            disputerReward_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setLocation(
            ip: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setMaxNumValidators(
            maxNumValidators_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setStakeAmount(
            stakeAmount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        tryGetTokenID(
            account_: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        unregisterAllValidators(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        unregisterValidators(
            validators: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        claimExitingNFTPosition(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectProfits(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        completeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getDisputerReward(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getLocation(
            validator: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getLocations(
            validators_: string[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMaxNumValidators(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getStakeAmount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getValidator(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getValidatorData(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getValidatorsAddresses(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getValidatorsCount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initializeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isAccusable(
            participant: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isConsensusRunning(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isInExitingQueue(
            participant: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isMaintenanceScheduled(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isValidator(
            participant: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        majorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        minorSlash(
            dishonestValidator_: string,
            disputer_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        pauseConsensus(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        pauseConsensusOnArbitraryHeight(
            aliceNetHeight: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        registerValidators(
            validators: string[],
            publicStakingTokenIDs: BigNumberish[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        scheduleMaintenance(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setDisputerReward(
            disputerReward_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setLocation(
            ip: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setMaxNumValidators(
            maxNumValidators_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setStakeAmount(
            stakeAmount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        tryGetTokenID(
            account_: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        unregisterAllValidators(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        unregisterValidators(
            validators: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
