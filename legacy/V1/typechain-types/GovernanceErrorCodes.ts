/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface GovernanceErrorCodesInterface extends utils.Interface {
    contractName: "GovernanceErrorCodes";
    functions: {
        "GOVERNANCE_ONLY_FACTORY_ALLOWED()": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "GOVERNANCE_ONLY_FACTORY_ALLOWED",
        values?: undefined
    ): string;

    decodeFunctionResult(
        functionFragment: "GOVERNANCE_ONLY_FACTORY_ALLOWED",
        data: BytesLike
    ): Result;

    events: {};
}

export interface GovernanceErrorCodes extends BaseContract {
    contractName: "GovernanceErrorCodes";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: GovernanceErrorCodesInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        GOVERNANCE_ONLY_FACTORY_ALLOWED(
            overrides?: CallOverrides
        ): Promise<[string]>;
    };

    GOVERNANCE_ONLY_FACTORY_ALLOWED(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        GOVERNANCE_ONLY_FACTORY_ALLOWED(
            overrides?: CallOverrides
        ): Promise<string>;
    };

    filters: {};

    estimateGas: {
        GOVERNANCE_ONLY_FACTORY_ALLOWED(
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        GOVERNANCE_ONLY_FACTORY_ALLOWED(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
