/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface ExternalStoreInterface extends utils.Interface {
    contractName: "ExternalStore";
    functions: {
        "getCounter()": FunctionFragment;
        "getMetamorphicContractAddress(bytes32,address)": FunctionFragment;
        "getTokenIds()": FunctionFragment;
        "incrementCounter()": FunctionFragment;
        "storeTokenIds(uint256[4])": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "getCounter",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMetamorphicContractAddress",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "getTokenIds",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "incrementCounter",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "storeTokenIds",
        values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
    ): string;

    decodeFunctionResult(
        functionFragment: "getCounter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMetamorphicContractAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTokenIds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "incrementCounter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "storeTokenIds",
        data: BytesLike
    ): Result;

    events: {};
}

export interface ExternalStore extends BaseContract {
    contractName: "ExternalStore";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: ExternalStoreInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        getCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getTokenIds(
            overrides?: CallOverrides
        ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber]]>;

        incrementCounter(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        storeTokenIds(
            tokenIDs: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    getCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getMetamorphicContractAddress(
        _salt: BytesLike,
        _factory: string,
        overrides?: CallOverrides
    ): Promise<string>;

    getTokenIds(
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    incrementCounter(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeTokenIds(
        tokenIDs: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        getCounter(overrides?: CallOverrides): Promise<BigNumber>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<string>;

        getTokenIds(
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

        incrementCounter(overrides?: CallOverrides): Promise<void>;

        storeTokenIds(
            tokenIDs: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {};

    estimateGas: {
        getCounter(overrides?: CallOverrides): Promise<BigNumber>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getTokenIds(overrides?: CallOverrides): Promise<BigNumber>;

        incrementCounter(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        storeTokenIds(
            tokenIDs: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        getCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTokenIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        incrementCounter(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        storeTokenIds(
            tokenIDs: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
