/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface CryptoLibraryInterface extends utils.Interface {
    contractName: "CryptoLibrary";
    functions: {
        "CURVE_B()": FunctionFragment;
        "FIELD_MODULUS()": FunctionFragment;
        "G1_X()": FunctionFragment;
        "G1_Y()": FunctionFragment;
        "GROUP_ORDER()": FunctionFragment;
        "H1_X()": FunctionFragment;
        "H1_Y()": FunctionFragment;
        "H2_X()": FunctionFragment;
        "H2_XI()": FunctionFragment;
        "H2_Y()": FunctionFragment;
        "H2_YI()": FunctionFragment;
        "HASH_CONST_1()": FunctionFragment;
        "HASH_CONST_2()": FunctionFragment;
        "HASH_CONST_3()": FunctionFragment;
        "HASH_CONST_4()": FunctionFragment;
        "P_MINUS1()": FunctionFragment;
        "P_MINUS1_OVER2()": FunctionFragment;
        "P_MINUS2()": FunctionFragment;
        "P_PLUS1_OVER4()": FunctionFragment;
        "TWO_256_MOD_P()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "CURVE_B", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "FIELD_MODULUS",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "G1_X", values?: undefined): string;
    encodeFunctionData(functionFragment: "G1_Y", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "GROUP_ORDER",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "H1_X", values?: undefined): string;
    encodeFunctionData(functionFragment: "H1_Y", values?: undefined): string;
    encodeFunctionData(functionFragment: "H2_X", values?: undefined): string;
    encodeFunctionData(functionFragment: "H2_XI", values?: undefined): string;
    encodeFunctionData(functionFragment: "H2_Y", values?: undefined): string;
    encodeFunctionData(functionFragment: "H2_YI", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "HASH_CONST_1",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "HASH_CONST_2",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "HASH_CONST_3",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "HASH_CONST_4",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "P_MINUS1",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "P_MINUS1_OVER2",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "P_MINUS2",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "P_PLUS1_OVER4",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "TWO_256_MOD_P",
        values?: undefined
    ): string;

    decodeFunctionResult(functionFragment: "CURVE_B", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "FIELD_MODULUS",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "G1_X", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "G1_Y", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "GROUP_ORDER",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "H1_X", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "H1_Y", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "H2_X", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "H2_XI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "H2_Y", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "H2_YI", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "HASH_CONST_1",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "HASH_CONST_2",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "HASH_CONST_3",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "HASH_CONST_4",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "P_MINUS1", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "P_MINUS1_OVER2",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "P_MINUS2", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "P_PLUS1_OVER4",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "TWO_256_MOD_P",
        data: BytesLike
    ): Result;

    events: {};
}

export interface CryptoLibrary extends BaseContract {
    contractName: "CryptoLibrary";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: CryptoLibraryInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        CURVE_B(overrides?: CallOverrides): Promise<[BigNumber]>;

        FIELD_MODULUS(overrides?: CallOverrides): Promise<[BigNumber]>;

        G1_X(overrides?: CallOverrides): Promise<[BigNumber]>;

        G1_Y(overrides?: CallOverrides): Promise<[BigNumber]>;

        GROUP_ORDER(overrides?: CallOverrides): Promise<[BigNumber]>;

        H1_X(overrides?: CallOverrides): Promise<[BigNumber]>;

        H1_Y(overrides?: CallOverrides): Promise<[BigNumber]>;

        H2_X(overrides?: CallOverrides): Promise<[BigNumber]>;

        H2_XI(overrides?: CallOverrides): Promise<[BigNumber]>;

        H2_Y(overrides?: CallOverrides): Promise<[BigNumber]>;

        H2_YI(overrides?: CallOverrides): Promise<[BigNumber]>;

        HASH_CONST_1(overrides?: CallOverrides): Promise<[BigNumber]>;

        HASH_CONST_2(overrides?: CallOverrides): Promise<[BigNumber]>;

        HASH_CONST_3(overrides?: CallOverrides): Promise<[BigNumber]>;

        HASH_CONST_4(overrides?: CallOverrides): Promise<[BigNumber]>;

        P_MINUS1(overrides?: CallOverrides): Promise<[BigNumber]>;

        P_MINUS1_OVER2(overrides?: CallOverrides): Promise<[BigNumber]>;

        P_MINUS2(overrides?: CallOverrides): Promise<[BigNumber]>;

        P_PLUS1_OVER4(overrides?: CallOverrides): Promise<[BigNumber]>;

        TWO_256_MOD_P(overrides?: CallOverrides): Promise<[BigNumber]>;
    };

    CURVE_B(overrides?: CallOverrides): Promise<BigNumber>;

    FIELD_MODULUS(overrides?: CallOverrides): Promise<BigNumber>;

    G1_X(overrides?: CallOverrides): Promise<BigNumber>;

    G1_Y(overrides?: CallOverrides): Promise<BigNumber>;

    GROUP_ORDER(overrides?: CallOverrides): Promise<BigNumber>;

    H1_X(overrides?: CallOverrides): Promise<BigNumber>;

    H1_Y(overrides?: CallOverrides): Promise<BigNumber>;

    H2_X(overrides?: CallOverrides): Promise<BigNumber>;

    H2_XI(overrides?: CallOverrides): Promise<BigNumber>;

    H2_Y(overrides?: CallOverrides): Promise<BigNumber>;

    H2_YI(overrides?: CallOverrides): Promise<BigNumber>;

    HASH_CONST_1(overrides?: CallOverrides): Promise<BigNumber>;

    HASH_CONST_2(overrides?: CallOverrides): Promise<BigNumber>;

    HASH_CONST_3(overrides?: CallOverrides): Promise<BigNumber>;

    HASH_CONST_4(overrides?: CallOverrides): Promise<BigNumber>;

    P_MINUS1(overrides?: CallOverrides): Promise<BigNumber>;

    P_MINUS1_OVER2(overrides?: CallOverrides): Promise<BigNumber>;

    P_MINUS2(overrides?: CallOverrides): Promise<BigNumber>;

    P_PLUS1_OVER4(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_256_MOD_P(overrides?: CallOverrides): Promise<BigNumber>;

    callStatic: {
        CURVE_B(overrides?: CallOverrides): Promise<BigNumber>;

        FIELD_MODULUS(overrides?: CallOverrides): Promise<BigNumber>;

        G1_X(overrides?: CallOverrides): Promise<BigNumber>;

        G1_Y(overrides?: CallOverrides): Promise<BigNumber>;

        GROUP_ORDER(overrides?: CallOverrides): Promise<BigNumber>;

        H1_X(overrides?: CallOverrides): Promise<BigNumber>;

        H1_Y(overrides?: CallOverrides): Promise<BigNumber>;

        H2_X(overrides?: CallOverrides): Promise<BigNumber>;

        H2_XI(overrides?: CallOverrides): Promise<BigNumber>;

        H2_Y(overrides?: CallOverrides): Promise<BigNumber>;

        H2_YI(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_1(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_2(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_3(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_4(overrides?: CallOverrides): Promise<BigNumber>;

        P_MINUS1(overrides?: CallOverrides): Promise<BigNumber>;

        P_MINUS1_OVER2(overrides?: CallOverrides): Promise<BigNumber>;

        P_MINUS2(overrides?: CallOverrides): Promise<BigNumber>;

        P_PLUS1_OVER4(overrides?: CallOverrides): Promise<BigNumber>;

        TWO_256_MOD_P(overrides?: CallOverrides): Promise<BigNumber>;
    };

    filters: {};

    estimateGas: {
        CURVE_B(overrides?: CallOverrides): Promise<BigNumber>;

        FIELD_MODULUS(overrides?: CallOverrides): Promise<BigNumber>;

        G1_X(overrides?: CallOverrides): Promise<BigNumber>;

        G1_Y(overrides?: CallOverrides): Promise<BigNumber>;

        GROUP_ORDER(overrides?: CallOverrides): Promise<BigNumber>;

        H1_X(overrides?: CallOverrides): Promise<BigNumber>;

        H1_Y(overrides?: CallOverrides): Promise<BigNumber>;

        H2_X(overrides?: CallOverrides): Promise<BigNumber>;

        H2_XI(overrides?: CallOverrides): Promise<BigNumber>;

        H2_Y(overrides?: CallOverrides): Promise<BigNumber>;

        H2_YI(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_1(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_2(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_3(overrides?: CallOverrides): Promise<BigNumber>;

        HASH_CONST_4(overrides?: CallOverrides): Promise<BigNumber>;

        P_MINUS1(overrides?: CallOverrides): Promise<BigNumber>;

        P_MINUS1_OVER2(overrides?: CallOverrides): Promise<BigNumber>;

        P_MINUS2(overrides?: CallOverrides): Promise<BigNumber>;

        P_PLUS1_OVER4(overrides?: CallOverrides): Promise<BigNumber>;

        TWO_256_MOD_P(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        CURVE_B(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        FIELD_MODULUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        G1_X(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        G1_Y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        GROUP_ORDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        H1_X(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        H1_Y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        H2_X(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        H2_XI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        H2_Y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        H2_YI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        HASH_CONST_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        HASH_CONST_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        HASH_CONST_3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        HASH_CONST_4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        P_MINUS1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        P_MINUS1_OVER2(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        P_MINUS2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        P_PLUS1_OVER4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        TWO_256_MOD_P(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
