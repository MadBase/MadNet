/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Listener, Provider } from "@ethersproject/providers";
import { BaseContract, Signer, utils } from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface MinterInterface extends utils.Interface {
    contractName: "Minter";
    functions: {};

    events: {};
}

export interface Minter extends BaseContract {
    contractName: "Minter";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: MinterInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {};

    callStatic: {};

    filters: {};

    estimateGas: {};

    populateTransaction: {};
}
