/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export type ParticipantStruct = {
    publicKey: [BigNumberish, BigNumberish];
    nonce: BigNumberish;
    index: BigNumberish;
    phase: BigNumberish;
    distributedSharesHash: BytesLike;
    commitmentsFirstCoefficient: [BigNumberish, BigNumberish];
    keyShares: [BigNumberish, BigNumberish];
    gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
};

export type ParticipantStructOutput = [
    [BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    number,
    string,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber, BigNumber, BigNumber]
] & {
    publicKey: [BigNumber, BigNumber];
    nonce: BigNumber;
    index: BigNumber;
    phase: number;
    distributedSharesHash: string;
    commitmentsFirstCoefficient: [BigNumber, BigNumber];
    keyShares: [BigNumber, BigNumber];
    gpkj: [BigNumber, BigNumber, BigNumber, BigNumber];
};

export interface ETHDKGInterface extends utils.Interface {
    contractName: "ETHDKG";
    functions: {
        "accuseParticipantDidNotDistributeShares(address[])": FunctionFragment;
        "accuseParticipantDidNotSubmitGPKJ(address[])": FunctionFragment;
        "accuseParticipantDidNotSubmitKeyShares(address[])": FunctionFragment;
        "accuseParticipantDistributedBadShares(address,uint256[],uint256[2][],uint256[2],uint256[2])": FunctionFragment;
        "accuseParticipantNotRegistered(address[])": FunctionFragment;
        "accuseParticipantSubmittedBadGPKJ(address[],bytes32[],uint256[2][][],address)": FunctionFragment;
        "complete()": FunctionFragment;
        "distributeShares(uint256[],uint256[2][])": FunctionFragment;
        "getBadParticipants()": FunctionFragment;
        "getConfirmationLength()": FunctionFragment;
        "getETHDKGPhase()": FunctionFragment;
        "getMasterPublicKey()": FunctionFragment;
        "getMasterPublicKeyHash()": FunctionFragment;
        "getMetamorphicContractAddress(bytes32,address)": FunctionFragment;
        "getMinValidators()": FunctionFragment;
        "getNonce()": FunctionFragment;
        "getNumParticipants()": FunctionFragment;
        "getParticipantInternalState(address)": FunctionFragment;
        "getParticipantsInternalState(address[])": FunctionFragment;
        "getPhaseLength()": FunctionFragment;
        "getPhaseStartBlock()": FunctionFragment;
        "initialize(uint256,uint256)": FunctionFragment;
        "initializeETHDKG()": FunctionFragment;
        "isETHDKGCompleted()": FunctionFragment;
        "isETHDKGHalted()": FunctionFragment;
        "isETHDKGRunning()": FunctionFragment;
        "isMasterPublicKeySet()": FunctionFragment;
        "migrateValidators(address[],uint256[],uint256[4][],uint8,uint256,uint256,uint256,uint256[4])": FunctionFragment;
        "register(uint256[2])": FunctionFragment;
        "setConfirmationLength(uint16)": FunctionFragment;
        "setCustomAliceNetHeight(uint256)": FunctionFragment;
        "setPhaseLength(uint16)": FunctionFragment;
        "submitGPKJ(uint256[4])": FunctionFragment;
        "submitKeyShare(uint256[2],uint256[2],uint256[4])": FunctionFragment;
        "submitMasterPublicKey(uint256[4])": FunctionFragment;
        "tryGetParticipantIndex(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "accuseParticipantDidNotDistributeShares",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "accuseParticipantDidNotSubmitGPKJ",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "accuseParticipantDidNotSubmitKeyShares",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "accuseParticipantDistributedBadShares",
        values: [
            string,
            BigNumberish[],
            [BigNumberish, BigNumberish][],
            [BigNumberish, BigNumberish],
            [BigNumberish, BigNumberish]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "accuseParticipantNotRegistered",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "accuseParticipantSubmittedBadGPKJ",
        values: [
            string[],
            BytesLike[],
            [BigNumberish, BigNumberish][][],
            string
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "complete",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "distributeShares",
        values: [BigNumberish[], [BigNumberish, BigNumberish][]]
    ): string;
    encodeFunctionData(
        functionFragment: "getBadParticipants",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getConfirmationLength",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getETHDKGPhase",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMasterPublicKey",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMasterPublicKeyHash",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMetamorphicContractAddress",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "getMinValidators",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getNonce",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getNumParticipants",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getParticipantInternalState",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "getParticipantsInternalState",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "getPhaseLength",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getPhaseStartBlock",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "initializeETHDKG",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isETHDKGCompleted",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isETHDKGHalted",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isETHDKGRunning",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isMasterPublicKeySet",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "migrateValidators",
        values: [
            string[],
            BigNumberish[],
            [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "register",
        values: [[BigNumberish, BigNumberish]]
    ): string;
    encodeFunctionData(
        functionFragment: "setConfirmationLength",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setCustomAliceNetHeight",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setPhaseLength",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "submitGPKJ",
        values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
    ): string;
    encodeFunctionData(
        functionFragment: "submitKeyShare",
        values: [
            [BigNumberish, BigNumberish],
            [BigNumberish, BigNumberish],
            [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "submitMasterPublicKey",
        values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
    ): string;
    encodeFunctionData(
        functionFragment: "tryGetParticipantIndex",
        values: [string]
    ): string;

    decodeFunctionResult(
        functionFragment: "accuseParticipantDidNotDistributeShares",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "accuseParticipantDidNotSubmitGPKJ",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "accuseParticipantDidNotSubmitKeyShares",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "accuseParticipantDistributedBadShares",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "accuseParticipantNotRegistered",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "accuseParticipantSubmittedBadGPKJ",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "distributeShares",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getBadParticipants",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getConfirmationLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getETHDKGPhase",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMasterPublicKey",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMasterPublicKeyHash",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMetamorphicContractAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMinValidators",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getNumParticipants",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getParticipantInternalState",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getParticipantsInternalState",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPhaseLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPhaseStartBlock",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initialize",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initializeETHDKG",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isETHDKGCompleted",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isETHDKGHalted",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isETHDKGRunning",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isMasterPublicKeySet",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "migrateValidators",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "setConfirmationLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setCustomAliceNetHeight",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setPhaseLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "submitGPKJ",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "submitKeyShare",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "submitMasterPublicKey",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "tryGetParticipantIndex",
        data: BytesLike
    ): Result;

    events: {
        "AddressRegistered(address,uint256,uint256,uint256[2])": EventFragment;
        "GPKJSubmissionComplete(uint256)": EventFragment;
        "KeyShareSubmissionComplete(uint256)": EventFragment;
        "KeyShareSubmitted(address,uint256,uint256,uint256[2],uint256[2],uint256[4])": EventFragment;
        "MPKSet(uint256,uint256,uint256[4])": EventFragment;
        "RegistrationComplete(uint256)": EventFragment;
        "RegistrationOpened(uint256,uint256,uint256,uint256,uint256)": EventFragment;
        "ShareDistributionComplete(uint256)": EventFragment;
        "SharesDistributed(address,uint256,uint256,uint256[],uint256[2][])": EventFragment;
        "ValidatorMemberAdded(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
        "ValidatorSetCompleted(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AddressRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GPKJSubmissionComplete"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "KeyShareSubmissionComplete"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "KeyShareSubmitted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MPKSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationComplete"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationOpened"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "ShareDistributionComplete"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SharesDistributed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorMemberAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorSetCompleted"): EventFragment;
}

export type AddressRegisteredEvent = TypedEvent<
    [string, BigNumber, BigNumber, [BigNumber, BigNumber]],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        publicKey: [BigNumber, BigNumber];
    }
>;

export type AddressRegisteredEventFilter =
    TypedEventFilter<AddressRegisteredEvent>;

export type GPKJSubmissionCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type GPKJSubmissionCompleteEventFilter =
    TypedEventFilter<GPKJSubmissionCompleteEvent>;

export type KeyShareSubmissionCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type KeyShareSubmissionCompleteEventFilter =
    TypedEventFilter<KeyShareSubmissionCompleteEvent>;

export type KeyShareSubmittedEvent = TypedEvent<
    [
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber]
    ],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        keyShareG1: [BigNumber, BigNumber];
        keyShareG1CorrectnessProof: [BigNumber, BigNumber];
        keyShareG2: [BigNumber, BigNumber, BigNumber, BigNumber];
    }
>;

export type KeyShareSubmittedEventFilter =
    TypedEventFilter<KeyShareSubmittedEvent>;

export type MPKSetEvent = TypedEvent<
    [BigNumber, BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber]],
    {
        blockNumber: BigNumber;
        nonce: BigNumber;
        mpk: [BigNumber, BigNumber, BigNumber, BigNumber];
    }
>;

export type MPKSetEventFilter = TypedEventFilter<MPKSetEvent>;

export type RegistrationCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type RegistrationCompleteEventFilter =
    TypedEventFilter<RegistrationCompleteEvent>;

export type RegistrationOpenedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    {
        startBlock: BigNumber;
        numberValidators: BigNumber;
        nonce: BigNumber;
        phaseLength: BigNumber;
        confirmationLength: BigNumber;
    }
>;

export type RegistrationOpenedEventFilter =
    TypedEventFilter<RegistrationOpenedEvent>;

export type ShareDistributionCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type ShareDistributionCompleteEventFilter =
    TypedEventFilter<ShareDistributionCompleteEvent>;

export type SharesDistributedEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber[], [BigNumber, BigNumber][]],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        encryptedShares: BigNumber[];
        commitments: [BigNumber, BigNumber][];
    }
>;

export type SharesDistributedEventFilter =
    TypedEventFilter<SharesDistributedEvent>;

export type ValidatorMemberAddedEvent = TypedEvent<
    [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        epoch: BigNumber;
        share0: BigNumber;
        share1: BigNumber;
        share2: BigNumber;
        share3: BigNumber;
    }
>;

export type ValidatorMemberAddedEventFilter =
    TypedEventFilter<ValidatorMemberAddedEvent>;

export type ValidatorSetCompletedEvent = TypedEvent<
    [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ],
    {
        validatorCount: BigNumber;
        nonce: BigNumber;
        epoch: BigNumber;
        ethHeight: BigNumber;
        aliceNetHeight: BigNumber;
        groupKey0: BigNumber;
        groupKey1: BigNumber;
        groupKey2: BigNumber;
        groupKey3: BigNumber;
    }
>;

export type ValidatorSetCompletedEventFilter =
    TypedEventFilter<ValidatorSetCompletedEvent>;

export interface ETHDKG extends BaseContract {
    contractName: "ETHDKG";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: ETHDKGInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        accuseParticipantDidNotDistributeShares(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        accuseParticipantDidNotSubmitGPKJ(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        accuseParticipantDidNotSubmitKeyShares(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        accuseParticipantDistributedBadShares(
            dishonestAddress: string,
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            sharedKey: [BigNumberish, BigNumberish],
            sharedKeyCorrectnessProof: [BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        accuseParticipantNotRegistered(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        accuseParticipantSubmittedBadGPKJ(
            validators: string[],
            encryptedSharesHash: BytesLike[],
            commitments: [BigNumberish, BigNumberish][][],
            dishonestAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        complete(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        distributeShares(
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getBadParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

        getConfirmationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        getETHDKGPhase(overrides?: CallOverrides): Promise<[number]>;

        getMasterPublicKey(
            overrides?: CallOverrides
        ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber]]>;

        getMasterPublicKeyHash(overrides?: CallOverrides): Promise<[string]>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getMinValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

        getNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

        getNumParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

        getParticipantInternalState(
            participant: string,
            overrides?: CallOverrides
        ): Promise<[ParticipantStructOutput]>;

        getParticipantsInternalState(
            participantAddresses: string[],
            overrides?: CallOverrides
        ): Promise<[ParticipantStructOutput[]]>;

        getPhaseLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        getPhaseStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

        initialize(
            phaseLength_: BigNumberish,
            confirmationLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        initializeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isETHDKGCompleted(overrides?: CallOverrides): Promise<[boolean]>;

        isETHDKGHalted(overrides?: CallOverrides): Promise<[boolean]>;

        isETHDKGRunning(overrides?: CallOverrides): Promise<[boolean]>;

        isMasterPublicKeySet(overrides?: CallOverrides): Promise<[boolean]>;

        migrateValidators(
            validatorsAccounts_: string[],
            validatorIndexes_: BigNumberish[],
            validatorShares_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ][],
            validatorCount_: BigNumberish,
            epoch_: BigNumberish,
            sideChainHeight_: BigNumberish,
            ethHeight_: BigNumberish,
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        register(
            publicKey: [BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setConfirmationLength(
            confirmationLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setCustomAliceNetHeight(
            aliceNetHeight: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setPhaseLength(
            phaseLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        submitGPKJ(
            gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        submitKeyShare(
            keyShareG1: [BigNumberish, BigNumberish],
            keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
            keyShareG2: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        submitMasterPublicKey(
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        tryGetParticipantIndex(
            participant: string,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber]>;
    };

    accuseParticipantDidNotDistributeShares(
        dishonestAddresses: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accuseParticipantDidNotSubmitGPKJ(
        dishonestAddresses: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accuseParticipantDidNotSubmitKeyShares(
        dishonestAddresses: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accuseParticipantDistributedBadShares(
        dishonestAddress: string,
        encryptedShares: BigNumberish[],
        commitments: [BigNumberish, BigNumberish][],
        sharedKey: [BigNumberish, BigNumberish],
        sharedKeyCorrectnessProof: [BigNumberish, BigNumberish],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accuseParticipantNotRegistered(
        dishonestAddresses: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accuseParticipantSubmittedBadGPKJ(
        validators: string[],
        encryptedSharesHash: BytesLike[],
        commitments: [BigNumberish, BigNumberish][][],
        dishonestAddress: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    complete(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeShares(
        encryptedShares: BigNumberish[],
        commitments: [BigNumberish, BigNumberish][],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBadParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    getConfirmationLength(overrides?: CallOverrides): Promise<BigNumber>;

    getETHDKGPhase(overrides?: CallOverrides): Promise<number>;

    getMasterPublicKey(
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getMasterPublicKeyHash(overrides?: CallOverrides): Promise<string>;

    getMetamorphicContractAddress(
        _salt: BytesLike,
        _factory: string,
        overrides?: CallOverrides
    ): Promise<string>;

    getMinValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getNumParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    getParticipantInternalState(
        participant: string,
        overrides?: CallOverrides
    ): Promise<ParticipantStructOutput>;

    getParticipantsInternalState(
        participantAddresses: string[],
        overrides?: CallOverrides
    ): Promise<ParticipantStructOutput[]>;

    getPhaseLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPhaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
        phaseLength_: BigNumberish,
        confirmationLength_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeETHDKG(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isETHDKGCompleted(overrides?: CallOverrides): Promise<boolean>;

    isETHDKGHalted(overrides?: CallOverrides): Promise<boolean>;

    isETHDKGRunning(overrides?: CallOverrides): Promise<boolean>;

    isMasterPublicKeySet(overrides?: CallOverrides): Promise<boolean>;

    migrateValidators(
        validatorsAccounts_: string[],
        validatorIndexes_: BigNumberish[],
        validatorShares_: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
        ][],
        validatorCount_: BigNumberish,
        epoch_: BigNumberish,
        sideChainHeight_: BigNumberish,
        ethHeight_: BigNumberish,
        masterPublicKey_: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
        ],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
        publicKey: [BigNumberish, BigNumberish],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfirmationLength(
        confirmationLength_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCustomAliceNetHeight(
        aliceNetHeight: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhaseLength(
        phaseLength_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitGPKJ(
        gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitKeyShare(
        keyShareG1: [BigNumberish, BigNumberish],
        keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
        keyShareG2: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMasterPublicKey(
        masterPublicKey_: [
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish
        ],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryGetParticipantIndex(
        participant: string,
        overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    callStatic: {
        accuseParticipantDidNotDistributeShares(
            dishonestAddresses: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        accuseParticipantDidNotSubmitGPKJ(
            dishonestAddresses: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        accuseParticipantDidNotSubmitKeyShares(
            dishonestAddresses: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        accuseParticipantDistributedBadShares(
            dishonestAddress: string,
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            sharedKey: [BigNumberish, BigNumberish],
            sharedKeyCorrectnessProof: [BigNumberish, BigNumberish],
            overrides?: CallOverrides
        ): Promise<void>;

        accuseParticipantNotRegistered(
            dishonestAddresses: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        accuseParticipantSubmittedBadGPKJ(
            validators: string[],
            encryptedSharesHash: BytesLike[],
            commitments: [BigNumberish, BigNumberish][][],
            dishonestAddress: string,
            overrides?: CallOverrides
        ): Promise<void>;

        complete(overrides?: CallOverrides): Promise<void>;

        distributeShares(
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            overrides?: CallOverrides
        ): Promise<void>;

        getBadParticipants(overrides?: CallOverrides): Promise<BigNumber>;

        getConfirmationLength(overrides?: CallOverrides): Promise<BigNumber>;

        getETHDKGPhase(overrides?: CallOverrides): Promise<number>;

        getMasterPublicKey(
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

        getMasterPublicKeyHash(overrides?: CallOverrides): Promise<string>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<string>;

        getMinValidators(overrides?: CallOverrides): Promise<BigNumber>;

        getNonce(overrides?: CallOverrides): Promise<BigNumber>;

        getNumParticipants(overrides?: CallOverrides): Promise<BigNumber>;

        getParticipantInternalState(
            participant: string,
            overrides?: CallOverrides
        ): Promise<ParticipantStructOutput>;

        getParticipantsInternalState(
            participantAddresses: string[],
            overrides?: CallOverrides
        ): Promise<ParticipantStructOutput[]>;

        getPhaseLength(overrides?: CallOverrides): Promise<BigNumber>;

        getPhaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(
            phaseLength_: BigNumberish,
            confirmationLength_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        initializeETHDKG(overrides?: CallOverrides): Promise<void>;

        isETHDKGCompleted(overrides?: CallOverrides): Promise<boolean>;

        isETHDKGHalted(overrides?: CallOverrides): Promise<boolean>;

        isETHDKGRunning(overrides?: CallOverrides): Promise<boolean>;

        isMasterPublicKeySet(overrides?: CallOverrides): Promise<boolean>;

        migrateValidators(
            validatorsAccounts_: string[],
            validatorIndexes_: BigNumberish[],
            validatorShares_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ][],
            validatorCount_: BigNumberish,
            epoch_: BigNumberish,
            sideChainHeight_: BigNumberish,
            ethHeight_: BigNumberish,
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: CallOverrides
        ): Promise<void>;

        register(
            publicKey: [BigNumberish, BigNumberish],
            overrides?: CallOverrides
        ): Promise<void>;

        setConfirmationLength(
            confirmationLength_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setCustomAliceNetHeight(
            aliceNetHeight: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setPhaseLength(
            phaseLength_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        submitGPKJ(
            gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: CallOverrides
        ): Promise<void>;

        submitKeyShare(
            keyShareG1: [BigNumberish, BigNumberish],
            keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
            keyShareG2: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: CallOverrides
        ): Promise<void>;

        submitMasterPublicKey(
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: CallOverrides
        ): Promise<void>;

        tryGetParticipantIndex(
            participant: string,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber]>;
    };

    filters: {
        "AddressRegistered(address,uint256,uint256,uint256[2])"(
            account?: null,
            index?: null,
            nonce?: null,
            publicKey?: null
        ): AddressRegisteredEventFilter;
        AddressRegistered(
            account?: null,
            index?: null,
            nonce?: null,
            publicKey?: null
        ): AddressRegisteredEventFilter;

        "GPKJSubmissionComplete(uint256)"(
            blockNumber?: null
        ): GPKJSubmissionCompleteEventFilter;
        GPKJSubmissionComplete(
            blockNumber?: null
        ): GPKJSubmissionCompleteEventFilter;

        "KeyShareSubmissionComplete(uint256)"(
            blockNumber?: null
        ): KeyShareSubmissionCompleteEventFilter;
        KeyShareSubmissionComplete(
            blockNumber?: null
        ): KeyShareSubmissionCompleteEventFilter;

        "KeyShareSubmitted(address,uint256,uint256,uint256[2],uint256[2],uint256[4])"(
            account?: null,
            index?: null,
            nonce?: null,
            keyShareG1?: null,
            keyShareG1CorrectnessProof?: null,
            keyShareG2?: null
        ): KeyShareSubmittedEventFilter;
        KeyShareSubmitted(
            account?: null,
            index?: null,
            nonce?: null,
            keyShareG1?: null,
            keyShareG1CorrectnessProof?: null,
            keyShareG2?: null
        ): KeyShareSubmittedEventFilter;

        "MPKSet(uint256,uint256,uint256[4])"(
            blockNumber?: null,
            nonce?: null,
            mpk?: null
        ): MPKSetEventFilter;
        MPKSet(blockNumber?: null, nonce?: null, mpk?: null): MPKSetEventFilter;

        "RegistrationComplete(uint256)"(
            blockNumber?: null
        ): RegistrationCompleteEventFilter;
        RegistrationComplete(
            blockNumber?: null
        ): RegistrationCompleteEventFilter;

        "RegistrationOpened(uint256,uint256,uint256,uint256,uint256)"(
            startBlock?: null,
            numberValidators?: null,
            nonce?: null,
            phaseLength?: null,
            confirmationLength?: null
        ): RegistrationOpenedEventFilter;
        RegistrationOpened(
            startBlock?: null,
            numberValidators?: null,
            nonce?: null,
            phaseLength?: null,
            confirmationLength?: null
        ): RegistrationOpenedEventFilter;

        "ShareDistributionComplete(uint256)"(
            blockNumber?: null
        ): ShareDistributionCompleteEventFilter;
        ShareDistributionComplete(
            blockNumber?: null
        ): ShareDistributionCompleteEventFilter;

        "SharesDistributed(address,uint256,uint256,uint256[],uint256[2][])"(
            account?: null,
            index?: null,
            nonce?: null,
            encryptedShares?: null,
            commitments?: null
        ): SharesDistributedEventFilter;
        SharesDistributed(
            account?: null,
            index?: null,
            nonce?: null,
            encryptedShares?: null,
            commitments?: null
        ): SharesDistributedEventFilter;

        "ValidatorMemberAdded(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
            account?: null,
            index?: null,
            nonce?: null,
            epoch?: null,
            share0?: null,
            share1?: null,
            share2?: null,
            share3?: null
        ): ValidatorMemberAddedEventFilter;
        ValidatorMemberAdded(
            account?: null,
            index?: null,
            nonce?: null,
            epoch?: null,
            share0?: null,
            share1?: null,
            share2?: null,
            share3?: null
        ): ValidatorMemberAddedEventFilter;

        "ValidatorSetCompleted(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
            validatorCount?: null,
            nonce?: null,
            epoch?: null,
            ethHeight?: null,
            aliceNetHeight?: null,
            groupKey0?: null,
            groupKey1?: null,
            groupKey2?: null,
            groupKey3?: null
        ): ValidatorSetCompletedEventFilter;
        ValidatorSetCompleted(
            validatorCount?: null,
            nonce?: null,
            epoch?: null,
            ethHeight?: null,
            aliceNetHeight?: null,
            groupKey0?: null,
            groupKey1?: null,
            groupKey2?: null,
            groupKey3?: null
        ): ValidatorSetCompletedEventFilter;
    };

    estimateGas: {
        accuseParticipantDidNotDistributeShares(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        accuseParticipantDidNotSubmitGPKJ(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        accuseParticipantDidNotSubmitKeyShares(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        accuseParticipantDistributedBadShares(
            dishonestAddress: string,
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            sharedKey: [BigNumberish, BigNumberish],
            sharedKeyCorrectnessProof: [BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        accuseParticipantNotRegistered(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        accuseParticipantSubmittedBadGPKJ(
            validators: string[],
            encryptedSharesHash: BytesLike[],
            commitments: [BigNumberish, BigNumberish][][],
            dishonestAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        complete(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        distributeShares(
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getBadParticipants(overrides?: CallOverrides): Promise<BigNumber>;

        getConfirmationLength(overrides?: CallOverrides): Promise<BigNumber>;

        getETHDKGPhase(overrides?: CallOverrides): Promise<BigNumber>;

        getMasterPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

        getMasterPublicKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getMinValidators(overrides?: CallOverrides): Promise<BigNumber>;

        getNonce(overrides?: CallOverrides): Promise<BigNumber>;

        getNumParticipants(overrides?: CallOverrides): Promise<BigNumber>;

        getParticipantInternalState(
            participant: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getParticipantsInternalState(
            participantAddresses: string[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPhaseLength(overrides?: CallOverrides): Promise<BigNumber>;

        getPhaseStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(
            phaseLength_: BigNumberish,
            confirmationLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        initializeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isETHDKGCompleted(overrides?: CallOverrides): Promise<BigNumber>;

        isETHDKGHalted(overrides?: CallOverrides): Promise<BigNumber>;

        isETHDKGRunning(overrides?: CallOverrides): Promise<BigNumber>;

        isMasterPublicKeySet(overrides?: CallOverrides): Promise<BigNumber>;

        migrateValidators(
            validatorsAccounts_: string[],
            validatorIndexes_: BigNumberish[],
            validatorShares_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ][],
            validatorCount_: BigNumberish,
            epoch_: BigNumberish,
            sideChainHeight_: BigNumberish,
            ethHeight_: BigNumberish,
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        register(
            publicKey: [BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setConfirmationLength(
            confirmationLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setCustomAliceNetHeight(
            aliceNetHeight: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setPhaseLength(
            phaseLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        submitGPKJ(
            gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        submitKeyShare(
            keyShareG1: [BigNumberish, BigNumberish],
            keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
            keyShareG2: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        submitMasterPublicKey(
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        tryGetParticipantIndex(
            participant: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        accuseParticipantDidNotDistributeShares(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        accuseParticipantDidNotSubmitGPKJ(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        accuseParticipantDidNotSubmitKeyShares(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        accuseParticipantDistributedBadShares(
            dishonestAddress: string,
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            sharedKey: [BigNumberish, BigNumberish],
            sharedKeyCorrectnessProof: [BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        accuseParticipantNotRegistered(
            dishonestAddresses: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        accuseParticipantSubmittedBadGPKJ(
            validators: string[],
            encryptedSharesHash: BytesLike[],
            commitments: [BigNumberish, BigNumberish][][],
            dishonestAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        complete(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        distributeShares(
            encryptedShares: BigNumberish[],
            commitments: [BigNumberish, BigNumberish][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getBadParticipants(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getConfirmationLength(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getETHDKGPhase(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMasterPublicKey(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMasterPublicKeyHash(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMinValidators(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getNumParticipants(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getParticipantInternalState(
            participant: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getParticipantsInternalState(
            participantAddresses: string[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPhaseLength(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPhaseStartBlock(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initialize(
            phaseLength_: BigNumberish,
            confirmationLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        initializeETHDKG(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isETHDKGCompleted(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isETHDKGHalted(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isETHDKGRunning(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isMasterPublicKeySet(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        migrateValidators(
            validatorsAccounts_: string[],
            validatorIndexes_: BigNumberish[],
            validatorShares_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ][],
            validatorCount_: BigNumberish,
            epoch_: BigNumberish,
            sideChainHeight_: BigNumberish,
            ethHeight_: BigNumberish,
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        register(
            publicKey: [BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setConfirmationLength(
            confirmationLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setCustomAliceNetHeight(
            aliceNetHeight: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setPhaseLength(
            phaseLength_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        submitGPKJ(
            gpkj: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        submitKeyShare(
            keyShareG1: [BigNumberish, BigNumberish],
            keyShareG1CorrectnessProof: [BigNumberish, BigNumberish],
            keyShareG2: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        submitMasterPublicKey(
            masterPublicKey_: [
                BigNumberish,
                BigNumberish,
                BigNumberish,
                BigNumberish
            ],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        tryGetParticipantIndex(
            participant: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
