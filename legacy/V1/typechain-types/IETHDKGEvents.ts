/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface IETHDKGEventsInterface extends utils.Interface {
    contractName: "IETHDKGEvents";
    functions: {};

    events: {
        "AddressRegistered(address,uint256,uint256,uint256[2])": EventFragment;
        "GPKJSubmissionComplete(uint256)": EventFragment;
        "KeyShareSubmissionComplete(uint256)": EventFragment;
        "KeyShareSubmitted(address,uint256,uint256,uint256[2],uint256[2],uint256[4])": EventFragment;
        "MPKSet(uint256,uint256,uint256[4])": EventFragment;
        "RegistrationComplete(uint256)": EventFragment;
        "RegistrationOpened(uint256,uint256,uint256,uint256,uint256)": EventFragment;
        "ShareDistributionComplete(uint256)": EventFragment;
        "SharesDistributed(address,uint256,uint256,uint256[],uint256[2][])": EventFragment;
        "ValidatorMemberAdded(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
        "ValidatorSetCompleted(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AddressRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GPKJSubmissionComplete"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "KeyShareSubmissionComplete"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "KeyShareSubmitted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MPKSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationComplete"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrationOpened"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "ShareDistributionComplete"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SharesDistributed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorMemberAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValidatorSetCompleted"): EventFragment;
}

export type AddressRegisteredEvent = TypedEvent<
    [string, BigNumber, BigNumber, [BigNumber, BigNumber]],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        publicKey: [BigNumber, BigNumber];
    }
>;

export type AddressRegisteredEventFilter =
    TypedEventFilter<AddressRegisteredEvent>;

export type GPKJSubmissionCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type GPKJSubmissionCompleteEventFilter =
    TypedEventFilter<GPKJSubmissionCompleteEvent>;

export type KeyShareSubmissionCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type KeyShareSubmissionCompleteEventFilter =
    TypedEventFilter<KeyShareSubmissionCompleteEvent>;

export type KeyShareSubmittedEvent = TypedEvent<
    [
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber]
    ],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        keyShareG1: [BigNumber, BigNumber];
        keyShareG1CorrectnessProof: [BigNumber, BigNumber];
        keyShareG2: [BigNumber, BigNumber, BigNumber, BigNumber];
    }
>;

export type KeyShareSubmittedEventFilter =
    TypedEventFilter<KeyShareSubmittedEvent>;

export type MPKSetEvent = TypedEvent<
    [BigNumber, BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber]],
    {
        blockNumber: BigNumber;
        nonce: BigNumber;
        mpk: [BigNumber, BigNumber, BigNumber, BigNumber];
    }
>;

export type MPKSetEventFilter = TypedEventFilter<MPKSetEvent>;

export type RegistrationCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type RegistrationCompleteEventFilter =
    TypedEventFilter<RegistrationCompleteEvent>;

export type RegistrationOpenedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    {
        startBlock: BigNumber;
        numberValidators: BigNumber;
        nonce: BigNumber;
        phaseLength: BigNumber;
        confirmationLength: BigNumber;
    }
>;

export type RegistrationOpenedEventFilter =
    TypedEventFilter<RegistrationOpenedEvent>;

export type ShareDistributionCompleteEvent = TypedEvent<
    [BigNumber],
    { blockNumber: BigNumber }
>;

export type ShareDistributionCompleteEventFilter =
    TypedEventFilter<ShareDistributionCompleteEvent>;

export type SharesDistributedEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber[], [BigNumber, BigNumber][]],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        encryptedShares: BigNumber[];
        commitments: [BigNumber, BigNumber][];
    }
>;

export type SharesDistributedEventFilter =
    TypedEventFilter<SharesDistributedEvent>;

export type ValidatorMemberAddedEvent = TypedEvent<
    [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ],
    {
        account: string;
        index: BigNumber;
        nonce: BigNumber;
        epoch: BigNumber;
        share0: BigNumber;
        share1: BigNumber;
        share2: BigNumber;
        share3: BigNumber;
    }
>;

export type ValidatorMemberAddedEventFilter =
    TypedEventFilter<ValidatorMemberAddedEvent>;

export type ValidatorSetCompletedEvent = TypedEvent<
    [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ],
    {
        validatorCount: BigNumber;
        nonce: BigNumber;
        epoch: BigNumber;
        ethHeight: BigNumber;
        aliceNetHeight: BigNumber;
        groupKey0: BigNumber;
        groupKey1: BigNumber;
        groupKey2: BigNumber;
        groupKey3: BigNumber;
    }
>;

export type ValidatorSetCompletedEventFilter =
    TypedEventFilter<ValidatorSetCompletedEvent>;

export interface IETHDKGEvents extends BaseContract {
    contractName: "IETHDKGEvents";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IETHDKGEventsInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {};

    callStatic: {};

    filters: {
        "AddressRegistered(address,uint256,uint256,uint256[2])"(
            account?: null,
            index?: null,
            nonce?: null,
            publicKey?: null
        ): AddressRegisteredEventFilter;
        AddressRegistered(
            account?: null,
            index?: null,
            nonce?: null,
            publicKey?: null
        ): AddressRegisteredEventFilter;

        "GPKJSubmissionComplete(uint256)"(
            blockNumber?: null
        ): GPKJSubmissionCompleteEventFilter;
        GPKJSubmissionComplete(
            blockNumber?: null
        ): GPKJSubmissionCompleteEventFilter;

        "KeyShareSubmissionComplete(uint256)"(
            blockNumber?: null
        ): KeyShareSubmissionCompleteEventFilter;
        KeyShareSubmissionComplete(
            blockNumber?: null
        ): KeyShareSubmissionCompleteEventFilter;

        "KeyShareSubmitted(address,uint256,uint256,uint256[2],uint256[2],uint256[4])"(
            account?: null,
            index?: null,
            nonce?: null,
            keyShareG1?: null,
            keyShareG1CorrectnessProof?: null,
            keyShareG2?: null
        ): KeyShareSubmittedEventFilter;
        KeyShareSubmitted(
            account?: null,
            index?: null,
            nonce?: null,
            keyShareG1?: null,
            keyShareG1CorrectnessProof?: null,
            keyShareG2?: null
        ): KeyShareSubmittedEventFilter;

        "MPKSet(uint256,uint256,uint256[4])"(
            blockNumber?: null,
            nonce?: null,
            mpk?: null
        ): MPKSetEventFilter;
        MPKSet(blockNumber?: null, nonce?: null, mpk?: null): MPKSetEventFilter;

        "RegistrationComplete(uint256)"(
            blockNumber?: null
        ): RegistrationCompleteEventFilter;
        RegistrationComplete(
            blockNumber?: null
        ): RegistrationCompleteEventFilter;

        "RegistrationOpened(uint256,uint256,uint256,uint256,uint256)"(
            startBlock?: null,
            numberValidators?: null,
            nonce?: null,
            phaseLength?: null,
            confirmationLength?: null
        ): RegistrationOpenedEventFilter;
        RegistrationOpened(
            startBlock?: null,
            numberValidators?: null,
            nonce?: null,
            phaseLength?: null,
            confirmationLength?: null
        ): RegistrationOpenedEventFilter;

        "ShareDistributionComplete(uint256)"(
            blockNumber?: null
        ): ShareDistributionCompleteEventFilter;
        ShareDistributionComplete(
            blockNumber?: null
        ): ShareDistributionCompleteEventFilter;

        "SharesDistributed(address,uint256,uint256,uint256[],uint256[2][])"(
            account?: null,
            index?: null,
            nonce?: null,
            encryptedShares?: null,
            commitments?: null
        ): SharesDistributedEventFilter;
        SharesDistributed(
            account?: null,
            index?: null,
            nonce?: null,
            encryptedShares?: null,
            commitments?: null
        ): SharesDistributedEventFilter;

        "ValidatorMemberAdded(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
            account?: null,
            index?: null,
            nonce?: null,
            epoch?: null,
            share0?: null,
            share1?: null,
            share2?: null,
            share3?: null
        ): ValidatorMemberAddedEventFilter;
        ValidatorMemberAdded(
            account?: null,
            index?: null,
            nonce?: null,
            epoch?: null,
            share0?: null,
            share1?: null,
            share2?: null,
            share3?: null
        ): ValidatorMemberAddedEventFilter;

        "ValidatorSetCompleted(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
            validatorCount?: null,
            nonce?: null,
            epoch?: null,
            ethHeight?: null,
            aliceNetHeight?: null,
            groupKey0?: null,
            groupKey1?: null,
            groupKey2?: null,
            groupKey3?: null
        ): ValidatorSetCompletedEventFilter;
        ValidatorSetCompleted(
            validatorCount?: null,
            nonce?: null,
            epoch?: null,
            ethHeight?: null,
            aliceNetHeight?: null,
            groupKey0?: null,
            groupKey1?: null,
            groupKey2?: null,
            groupKey3?: null
        ): ValidatorSetCompletedEventFilter;
    };

    estimateGas: {};

    populateTransaction: {};
}
