/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface MockSelfDestructInterface extends utils.Interface {
    contractName: "MockSelfDestruct";
    functions: {
        "getFactory()": FunctionFragment;
        "i()": FunctionFragment;
        "lock()": FunctionFragment;
        "setFactory(address)": FunctionFragment;
        "setV(uint256)": FunctionFragment;
        "unlock()": FunctionFragment;
        "v()": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "getFactory",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "i", values?: undefined): string;
    encodeFunctionData(functionFragment: "lock", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "setFactory",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "setV",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "v", values?: undefined): string;

    decodeFunctionResult(
        functionFragment: "getFactory",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "i", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "setFactory",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setV", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "v", data: BytesLike): Result;

    events: {};
}

export interface MockSelfDestruct extends BaseContract {
    contractName: "MockSelfDestruct";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: MockSelfDestructInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        getFactory(overrides?: CallOverrides): Promise<[string]>;

        i(overrides?: CallOverrides): Promise<[BigNumber]>;

        lock(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setFactory(
            factory_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setV(
            _v: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        unlock(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        v(overrides?: CallOverrides): Promise<[BigNumber]>;
    };

    getFactory(overrides?: CallOverrides): Promise<string>;

    i(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
        factory_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setV(
        _v: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    v(overrides?: CallOverrides): Promise<BigNumber>;

    callStatic: {
        getFactory(overrides?: CallOverrides): Promise<string>;

        i(overrides?: CallOverrides): Promise<BigNumber>;

        lock(overrides?: CallOverrides): Promise<void>;

        setFactory(factory_: string, overrides?: CallOverrides): Promise<void>;

        setV(_v: BigNumberish, overrides?: CallOverrides): Promise<void>;

        unlock(overrides?: CallOverrides): Promise<void>;

        v(overrides?: CallOverrides): Promise<BigNumber>;
    };

    filters: {};

    estimateGas: {
        getFactory(overrides?: CallOverrides): Promise<BigNumber>;

        i(overrides?: CallOverrides): Promise<BigNumber>;

        lock(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setFactory(
            factory_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setV(
            _v: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        unlock(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        v(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        i(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        lock(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setFactory(
            factory_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setV(
            _v: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        unlock(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        v(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
