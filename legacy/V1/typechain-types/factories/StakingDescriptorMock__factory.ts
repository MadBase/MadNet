/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
    StakingDescriptorMock,
    StakingDescriptorMockInterface,
} from "../StakingDescriptorMock";

const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "tokenId",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "shares",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "freeAfter",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "withdrawFreeAfter",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "accumulatorEth",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "accumulatorToken",
                        type: "uint256",
                    },
                ],
                internalType:
                    "struct StakingDescriptor.ConstructTokenURIParams",
                name: "params",
                type: "tuple",
            },
        ],
        name: "constructTokenURI",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];

const _bytecode =
    "";

type StakingDescriptorMockConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: StakingDescriptorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingDescriptorMock__factory extends ContractFactory {
    constructor(...args: StakingDescriptorMockConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "StakingDescriptorMock";
    }

    deploy(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<StakingDescriptorMock> {
        return super.deploy(overrides || {}) as Promise<StakingDescriptorMock>;
    }
    getDeployTransaction(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address: string): StakingDescriptorMock {
        return super.attach(address) as StakingDescriptorMock;
    }
    connect(signer: Signer): StakingDescriptorMock__factory {
        return super.connect(signer) as StakingDescriptorMock__factory;
    }
    static readonly contractName: "StakingDescriptorMock";
    public readonly contractName: "StakingDescriptorMock";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): StakingDescriptorMockInterface {
        return new utils.Interface(_abi) as StakingDescriptorMockInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): StakingDescriptorMock {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as StakingDescriptorMock;
    }
}
