/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
    BigNumberish,
    BytesLike,
    Contract,
    ContractFactory,
    Overrides,
    Signer,
    utils,
} from "ethers";
import type {
    MockSelfDestruct,
    MockSelfDestructInterface,
} from "../MockSelfDestruct";

const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_i",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "getFactory",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "i",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "lock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
        ],
        name: "setFactory",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_v",
                type: "uint256",
            },
        ],
        name: "setV",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "unlock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "v",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];

const _bytecode =
    "0x60a060405234801561001057600080fd5b506040516103d93803806103d983398101604081905261002f91610060565b50608052600080546001600160a01b0319163317905561013d565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561007357600080fd5b8251602080850151919350906001600160401b038082111561009457600080fd5b818601915086601f8301126100a857600080fd5b8151818111156100ba576100ba61004a565b604051601f8201601f19908116603f011681019083821181831017156100e2576100e261004a565b8160405282815289868487010111156100fa57600080fd5b600093505b8284101561011c57848401860151818501870152928501926100ff565b8284111561012d5760008684830101525b8096505050505050509250929050565b608051610281610158600039600061013d01526102816000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a69df4b51161005b578063a69df4b51461011d578063af6dcca314610125578063e5aa3d5814610138578063f83d08ba1461015f57600080fd5b80635bb47808146100825780637c2efcba146100d957806388cc58e4146100f5575b600080fd5b6100d76100903660046101f5565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6100e260015481565b6040519081526020015b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ec565b6100d7610167565b6100d7610133366004610232565b600155565b6100e27f000000000000000000000000000000000000000000000000000000000000000081565b6100d76101a9565b6101a77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff805473ffffffffffffffffffffffffffffffffffffffff169055565b565b6101a77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80547fca11c0de15dead10cced00000000000000000000000000000000000000000000179055565b60006020828403121561020757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461022b57600080fd5b9392505050565b60006020828403121561024457600080fd5b503591905056fea26469706673582212205ba7d972b3f6933c89d4c530e4847a5a63d3618aed40b57dfdd8b1d0fa939dd364736f6c634300080d0033";

type MockSelfDestructConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: MockSelfDestructConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSelfDestruct__factory extends ContractFactory {
    constructor(...args: MockSelfDestructConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "MockSelfDestruct";
    }

    deploy(
        _i: BigNumberish,
        arg1: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<MockSelfDestruct> {
        return super.deploy(
            _i,
            arg1,
            overrides || {}
        ) as Promise<MockSelfDestruct>;
    }
    getDeployTransaction(
        _i: BigNumberish,
        arg1: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(_i, arg1, overrides || {});
    }
    attach(address: string): MockSelfDestruct {
        return super.attach(address) as MockSelfDestruct;
    }
    connect(signer: Signer): MockSelfDestruct__factory {
        return super.connect(signer) as MockSelfDestruct__factory;
    }
    static readonly contractName: "MockSelfDestruct";
    public readonly contractName: "MockSelfDestruct";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockSelfDestructInterface {
        return new utils.Interface(_abi) as MockSelfDestructInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): MockSelfDestruct {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as MockSelfDestruct;
    }
}
