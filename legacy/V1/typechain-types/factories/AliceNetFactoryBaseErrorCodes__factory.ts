/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
    AliceNetFactoryBaseErrorCodes,
    AliceNetFactoryBaseErrorCodesInterface,
} from "../AliceNetFactoryBaseErrorCodes";

const _abi = [
    {
        inputs: [],
        name: "ALICENETFACTORYBASE_CODE_SIZE_ZERO",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "ALICENETFACTORYBASE_UNAUTHORIZED",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];

const _bytecode =
    "0x60d6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806316ac26c1146042578063bd4c014914607a575b600080fd5b60687f393031000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b60687f39303000000000000000000000000000000000000000000000000000000000008156fea26469706673582212209205dd6577a25ee0516c1289b211af96c7536e307028cc26b119ff1fa37f0f0064736f6c634300080d0033";

type AliceNetFactoryBaseErrorCodesConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: AliceNetFactoryBaseErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AliceNetFactoryBaseErrorCodes__factory extends ContractFactory {
    constructor(...args: AliceNetFactoryBaseErrorCodesConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "AliceNetFactoryBaseErrorCodes";
    }

    deploy(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<AliceNetFactoryBaseErrorCodes> {
        return super.deploy(
            overrides || {}
        ) as Promise<AliceNetFactoryBaseErrorCodes>;
    }
    getDeployTransaction(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address: string): AliceNetFactoryBaseErrorCodes {
        return super.attach(address) as AliceNetFactoryBaseErrorCodes;
    }
    connect(signer: Signer): AliceNetFactoryBaseErrorCodes__factory {
        return super.connect(signer) as AliceNetFactoryBaseErrorCodes__factory;
    }
    static readonly contractName: "AliceNetFactoryBaseErrorCodes";
    public readonly contractName: "AliceNetFactoryBaseErrorCodes";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): AliceNetFactoryBaseErrorCodesInterface {
        return new utils.Interface(
            _abi
        ) as AliceNetFactoryBaseErrorCodesInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): AliceNetFactoryBaseErrorCodes {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as AliceNetFactoryBaseErrorCodes;
    }
}
