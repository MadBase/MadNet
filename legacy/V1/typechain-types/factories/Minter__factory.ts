/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
    Contract,
    ContractFactory,
    PayableOverrides,
    Signer,
    utils,
} from "ethers";
import type { Minter, MinterInterface } from "../Minter";

const _abi = [
    {
        inputs: [
            {
                internalType: "address payable",
                name: "addr",
                type: "address",
            },
        ],
        stateMutability: "payable",
        type: "constructor",
    },
];

const _bytecode =
    "0x6080604052604051610115380380610115833981016040819052602091609a565b60005a90505b620c38f28111156094576040516335313c2160e11b81523360048201526001600160a01b03831690636a62784290620c38f290602401600060405180830381600088803b158015607557600080fd5b5087f11580156088573d6000803e3d6000fd5b50505050505a90506026565b505060c8565b60006020828403121560ab57600080fd5b81516001600160a01b038116811460c157600080fd5b9392505050565b603f806100d66000396000f3fe6080604052600080fdfea2646970667358221220615064670ab0c6d2aab6a3e4c3f0155375eae587bed0ea68b4868e94e1d91e5c64736f6c634300080d0033";

type MinterConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: MinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Minter__factory extends ContractFactory {
    constructor(...args: MinterConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "Minter";
    }

    deploy(
        addr: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<Minter> {
        return super.deploy(addr, overrides || {}) as Promise<Minter>;
    }
    getDeployTransaction(
        addr: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(addr, overrides || {});
    }
    attach(address: string): Minter {
        return super.attach(address) as Minter;
    }
    connect(signer: Signer): Minter__factory {
        return super.connect(signer) as Minter__factory;
    }
    static readonly contractName: "Minter";
    public readonly contractName: "Minter";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MinterInterface {
        return new utils.Interface(_abi) as MinterInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): Minter {
        return new Contract(address, _abi, signerOrProvider) as Minter;
    }
}
