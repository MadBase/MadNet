/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
    ExternalStoreRegistration,
    ExternalStoreRegistrationInterface,
} from "../ExternalStoreRegistration";

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "getCounter",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "_salt",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "_factory",
                type: "address",
            },
        ],
        name: "getMetamorphicContractAddress",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "getTokenIDsLength",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getTokenIds",
        outputs: [
            {
                internalType: "uint256[]",
                name: "",
                type: "uint256[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "incrementCounter",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "tokenIDs",
                type: "uint256[]",
            },
        ],
        name: "storeTokenIds",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];

const _bytecode =
    "0x60a060405234801561001057600080fd5b506040516107c53803806107c583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610733610092600039600081816101f3015261036c01526107336000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638653a465116100505780638653a465146100b15780638ada066e146101ac578063b79129af146101b457600080fd5b80635b34b9661461007757806367f718a9146100815780638337a5831461009f575b600080fd5b61007f6101c7565b005b610089610293565b6040516100969190610464565b60405180910390f35b6001545b604051908152602001610096565b6101876100bf3660046104a8565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be60558201819052600091607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b6000546100a3565b61007f6101c2366004610520565b610340565b604080517f323030300000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331491016040516020818303038152906040529061027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027391906105fc565b60405180910390fd5b5060008054908061028c8361066f565b9190505550565b60015460609060009067ffffffffffffffff8111156102b4576102b46104f1565b6040519080825280602002602001820160405280156102dd578160200160208202803683370190505b50905060005b60015481101561033a5760018181548110610300576103006106ce565b906000526020600020015482828151811061031d5761031d6106ce565b6020908102919091010152806103328161066f565b9150506102e3565b50919050565b604080517f323030300000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633149101604051602081830303815290604052906103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027391906105fc565b508051610400906001906020840190610404565b5050565b82805482825590600052602060002090810192821561043f579160200282015b8281111561043f578251825591602001919060010190610424565b5061044b92915061044f565b5090565b5b8082111561044b5760008155600101610450565b6020808252825182820181905260009190848201906040850190845b8181101561049c57835183529284019291840191600101610480565b50909695505050505050565b600080604083850312156104bb57600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff811681146104e657600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561053357600080fd5b823567ffffffffffffffff8082111561054b57600080fd5b818501915085601f83011261055f57600080fd5b813581811115610571576105716104f1565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156105b4576105b46104f1565b6040529182528482019250838101850191888311156105d257600080fd5b938501935b828510156105f0578435845293850193928501926105d7565b98975050505050505050565b600060208083528351808285015260005b818110156106295785810183015185820160400152820161060d565b8181111561063b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122023f384e19440b7a47c155f561fcb9d2f95fc29e99aa8bbf52f0f7cc0ce9818d764736f6c634300080d0033";

type ExternalStoreRegistrationConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: ExternalStoreRegistrationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExternalStoreRegistration__factory extends ContractFactory {
    constructor(...args: ExternalStoreRegistrationConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "ExternalStoreRegistration";
    }

    deploy(
        factory_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ExternalStoreRegistration> {
        return super.deploy(
            factory_,
            overrides || {}
        ) as Promise<ExternalStoreRegistration>;
    }
    getDeployTransaction(
        factory_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(factory_, overrides || {});
    }
    attach(address: string): ExternalStoreRegistration {
        return super.attach(address) as ExternalStoreRegistration;
    }
    connect(signer: Signer): ExternalStoreRegistration__factory {
        return super.connect(signer) as ExternalStoreRegistration__factory;
    }
    static readonly contractName: "ExternalStoreRegistration";
    public readonly contractName: "ExternalStoreRegistration";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): ExternalStoreRegistrationInterface {
        return new utils.Interface(_abi) as ExternalStoreRegistrationInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): ExternalStoreRegistration {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as ExternalStoreRegistration;
    }
}
