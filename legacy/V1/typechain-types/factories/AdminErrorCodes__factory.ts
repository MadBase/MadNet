/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
    AdminErrorCodes,
    AdminErrorCodesInterface,
} from "../AdminErrorCodes";

const _abi = [
    {
        inputs: [],
        name: "ADMIN_SENDER_MUST_BE_ADMIN",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];

const _bytecode =
    "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80637eb1c915146038575b600080fd5b605e7f313730300000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f3fea264697066735822122037ce885f348f04f1b7cb62327b7e5c3a40c009890291588d59187dcb6bb1d3de64736f6c634300080d0033";

type AdminErrorCodesConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: AdminErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AdminErrorCodes__factory extends ContractFactory {
    constructor(...args: AdminErrorCodesConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "AdminErrorCodes";
    }

    deploy(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<AdminErrorCodes> {
        return super.deploy(overrides || {}) as Promise<AdminErrorCodes>;
    }
    getDeployTransaction(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address: string): AdminErrorCodes {
        return super.attach(address) as AdminErrorCodes;
    }
    connect(signer: Signer): AdminErrorCodes__factory {
        return super.connect(signer) as AdminErrorCodes__factory;
    }
    static readonly contractName: "AdminErrorCodes";
    public readonly contractName: "AdminErrorCodes";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): AdminErrorCodesInterface {
        return new utils.Interface(_abi) as AdminErrorCodesInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): AdminErrorCodes {
        return new Contract(address, _abi, signerOrProvider) as AdminErrorCodes;
    }
}
