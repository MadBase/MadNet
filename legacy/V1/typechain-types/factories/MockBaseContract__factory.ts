/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
    BigNumberish,
    Contract,
    ContractFactory,
    Overrides,
    Signer,
    utils,
} from "ethers";
import type {
    MockBaseContract,
    MockBaseContractInterface,
} from "../MockBaseContract";

const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "imut_",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "pString_",
                type: "string",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "fail",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "getFactory",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getImut",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getVar",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getpString",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "lock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "payMe",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "factory_",
                type: "address",
            },
        ],
        name: "setFactory",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_v",
                type: "uint256",
            },
        ],
        name: "setV",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "unlock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];

const _bytecode =
    "0x60a060405234801561001057600080fd5b5060405161074238038061074283398101604081905261002f9161010d565b805161004290600290602084019061005e565b5050608052600080546001600160a01b03191633179055610224565b82805461006a906101ea565b90600052602060002090601f01602090048101928261008c57600085556100d2565b82601f106100a557805160ff19168380011785556100d2565b828001600101855582156100d2579182015b828111156100d25782518255916020019190600101906100b7565b506100de9291506100e2565b5090565b5b808211156100de57600081556001016100e3565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561012057600080fd5b8251602080850151919350906001600160401b038082111561014157600080fd5b818601915086601f83011261015557600080fd5b815181811115610167576101676100f7565b604051601f8201601f19908116603f0116810190838211818310171561018f5761018f6100f7565b8160405282815289868487010111156101a757600080fd5b600093505b828410156101c957848401860151818501870152928501926101ac565b828411156101da5760008684830101525b8096505050505050509250929050565b600181811c908216806101fe57607f821691505b60208210810361021e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805161050361023f600039600061017301526105036000f3fe6080604052600436106100b15760003560e01c8063a69df4b511610069578063af6dcca31161004e578063af6dcca3146101f6578063d997ccb314610162578063f83d08ba1461021657600080fd5b8063a69df4b5146101cc578063a9cc4718146101e157600080fd5b80635bb478081161009a5780635bb47808146101005780635e8d510b1461016457806388cc58e41461019757600080fd5b806330310106146100b6578063477a5c98146100e1575b600080fd5b3480156100c257600080fd5b506100cb61022b565b6040516100d891906103b1565b60405180910390f35b3480156100ed57600080fd5b506001545b6040519081526020016100d8565b34801561010c57600080fd5b5061016261011b366004610424565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b34801561017057600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f2565b3480156101a357600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d8565b3480156101d857600080fd5b506101626102bd565b3480156101ed57600080fd5b506101626102ff565b34801561020257600080fd5b50610162610211366004610461565b600155565b34801561022257600080fd5b50610162610365565b60606002805461023a9061047a565b80601f01602080910402602001604051908101604052809291908181526020018280546102669061047a565b80156102b35780601f10610288576101008083540402835291602001916102b3565b820191906000526020600020905b81548152906001019060200180831161029657829003601f168201915b5050505050905090565b6102fd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff805473ffffffffffffffffffffffffffffffffffffffff169055565b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4661696c65642100000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b6102fd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80547fca11c0de15dead10cced00000000000000000000000000000000000000000000179055565b600060208083528351808285015260005b818110156103de578581018301518582016040015282016103c2565b818111156103f0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561043657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461045a57600080fd5b9392505050565b60006020828403121561047357600080fd5b5035919050565b600181811c9082168061048e57607f821691505b6020821081036104c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212204527ca85f6579b8778f0cf90b992c72deb0d73b2dd14e7e960b6653cc19f8ed464736f6c634300080d0033";

type MockBaseContractConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: MockBaseContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBaseContract__factory extends ContractFactory {
    constructor(...args: MockBaseContractConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "MockBaseContract";
    }

    deploy(
        imut_: BigNumberish,
        pString_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<MockBaseContract> {
        return super.deploy(
            imut_,
            pString_,
            overrides || {}
        ) as Promise<MockBaseContract>;
    }
    getDeployTransaction(
        imut_: BigNumberish,
        pString_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(imut_, pString_, overrides || {});
    }
    attach(address: string): MockBaseContract {
        return super.attach(address) as MockBaseContract;
    }
    connect(signer: Signer): MockBaseContract__factory {
        return super.connect(signer) as MockBaseContract__factory;
    }
    static readonly contractName: "MockBaseContract";
    public readonly contractName: "MockBaseContract";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockBaseContractInterface {
        return new utils.Interface(_abi) as MockBaseContractInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): MockBaseContract {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as MockBaseContract;
    }
}
