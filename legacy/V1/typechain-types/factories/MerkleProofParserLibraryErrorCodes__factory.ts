/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type {
    MerkleProofParserLibraryErrorCodes,
    MerkleProofParserLibraryErrorCodesInterface,
} from "../MerkleProofParserLibraryErrorCodes";

const _abi = [
    {
        inputs: [],
        name: "MERKLEPROOFPARSERLIB_INVALID_KEY_HEIGHT",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "MERKLEPROOFPARSERLIB_INVALID_PROOF_MINIMUM_SIZE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "MERKLEPROOFPARSERLIB_INVALID_PROOF_SIZE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];

const _bytecode =
    "0x61010661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060475760003560e01c80630c92c80614604c5780638f9354831460845780639eca17881460aa575b600080fd5b60727f313230310000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b60727f313230320000000000000000000000000000000000000000000000000000000081565b60727f31323030000000000000000000000000000000000000000000000000000000008156fea26469706673582212200e8c87ee0412803aef410bd0159c7b45bd95140237b54aaeda8853fde6c273ac64736f6c634300080d0033";

type MerkleProofParserLibraryErrorCodesConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: MerkleProofParserLibraryErrorCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProofParserLibraryErrorCodes__factory extends ContractFactory {
    constructor(...args: MerkleProofParserLibraryErrorCodesConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
        this.contractName = "MerkleProofParserLibraryErrorCodes";
    }

    deploy(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<MerkleProofParserLibraryErrorCodes> {
        return super.deploy(
            overrides || {}
        ) as Promise<MerkleProofParserLibraryErrorCodes>;
    }
    getDeployTransaction(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address: string): MerkleProofParserLibraryErrorCodes {
        return super.attach(address) as MerkleProofParserLibraryErrorCodes;
    }
    connect(signer: Signer): MerkleProofParserLibraryErrorCodes__factory {
        return super.connect(
            signer
        ) as MerkleProofParserLibraryErrorCodes__factory;
    }
    static readonly contractName: "MerkleProofParserLibraryErrorCodes";
    public readonly contractName: "MerkleProofParserLibraryErrorCodes";
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MerkleProofParserLibraryErrorCodesInterface {
        return new utils.Interface(
            _abi
        ) as MerkleProofParserLibraryErrorCodesInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): MerkleProofParserLibraryErrorCodes {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as MerkleProofParserLibraryErrorCodes;
    }
}
