/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface PublicStakingInterface extends utils.Interface {
    contractName: "PublicStaking";
    functions: {
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "burn(uint256)": FunctionFragment;
        "burnTo(address,uint256)": FunctionFragment;
        "circuitBreakerState()": FunctionFragment;
        "collectEth(uint256)": FunctionFragment;
        "collectEthTo(address,uint256)": FunctionFragment;
        "collectToken(uint256)": FunctionFragment;
        "collectTokenTo(address,uint256)": FunctionFragment;
        "depositEth(uint8)": FunctionFragment;
        "depositToken(uint8,uint256)": FunctionFragment;
        "estimateEthCollection(uint256)": FunctionFragment;
        "estimateExcessEth()": FunctionFragment;
        "estimateExcessToken()": FunctionFragment;
        "estimateTokenCollection(uint256)": FunctionFragment;
        "getAccumulatorScaleFactor()": FunctionFragment;
        "getApproved(uint256)": FunctionFragment;
        "getEthAccumulator()": FunctionFragment;
        "getMaxMintLock()": FunctionFragment;
        "getMetamorphicContractAddress(bytes32,address)": FunctionFragment;
        "getPosition(uint256)": FunctionFragment;
        "getTokenAccumulator()": FunctionFragment;
        "getTotalReserveAToken()": FunctionFragment;
        "getTotalReserveEth()": FunctionFragment;
        "getTotalShares()": FunctionFragment;
        "initialize()": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "lockOwnPosition(uint256,uint256)": FunctionFragment;
        "lockPosition(address,uint256,uint256)": FunctionFragment;
        "lockWithdraw(uint256,uint256)": FunctionFragment;
        "mint(uint256)": FunctionFragment;
        "mintTo(address,uint256,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "ownerOf(uint256)": FunctionFragment;
        "safeTransferFrom(address,address,uint256)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "skimExcessEth(address)": FunctionFragment;
        "skimExcessToken(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "tokenURI(uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "tripCB()": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "approve",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(
        functionFragment: "burn",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "burnTo",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "circuitBreakerState",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "collectEth",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectEthTo",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectToken",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectTokenTo",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "depositEth",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "depositToken",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "estimateEthCollection",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "estimateExcessEth",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "estimateExcessToken",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "estimateTokenCollection",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getAccumulatorScaleFactor",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getApproved",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getEthAccumulator",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMaxMintLock",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMetamorphicContractAddress",
        values: [BytesLike, string]
    ): string;
    encodeFunctionData(
        functionFragment: "getPosition",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getTokenAccumulator",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalReserveAToken",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalReserveEth",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalShares",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "isApprovedForAll",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "lockOwnPosition",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "lockPosition",
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "lockWithdraw",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "mintTo",
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "ownerOf",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "safeTransferFrom",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setApprovalForAll",
        values: [string, boolean]
    ): string;
    encodeFunctionData(
        functionFragment: "skimExcessEth",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "skimExcessToken",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "supportsInterface",
        values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "tokenURI",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "tripCB", values?: undefined): string;

    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "balanceOf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnTo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "circuitBreakerState",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectEthTo",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectTokenTo",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "depositEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "depositToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateEthCollection",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateExcessEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateExcessToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateTokenCollection",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAccumulatorScaleFactor",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getApproved",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getEthAccumulator",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMaxMintLock",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMetamorphicContractAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTokenAccumulator",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalReserveAToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalReserveEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalShares",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initialize",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isApprovedForAll",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "lockOwnPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "lockPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "lockWithdraw",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "safeTransferFrom",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setApprovalForAll",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "skimExcessEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "skimExcessToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "supportsInterface",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "transferFrom",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "tripCB", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "ApprovalForAll(address,address,bool)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
    [string, string, boolean],
    { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PublicStaking extends BaseContract {
    contractName: "PublicStaking";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: PublicStakingInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        balanceOf(
            owner: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        burn(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        circuitBreakerState(overrides?: CallOverrides): Promise<[boolean]>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        depositEth(
            magic_: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { payout: BigNumber }>;

        estimateExcessEth(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { excess: BigNumber }>;

        estimateExcessToken(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { excess: BigNumber }>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { payout: BigNumber }>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getEthAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getMaxMintLock(overrides?: CallOverrides): Promise<[BigNumber]>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                shares: BigNumber;
                freeAfter: BigNumber;
                withdrawFreeAfter: BigNumber;
                accumulatorEth: BigNumber;
                accumulatorToken: BigNumber;
            }
        >;

        getTokenAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getTotalReserveAToken(overrides?: CallOverrides): Promise<[BigNumber]>;

        getTotalReserveEth(overrides?: CallOverrides): Promise<[BigNumber]>;

        getTotalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

        initialize(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        mint(
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        skimExcessEth(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        skimExcessToken(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        tripCB(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnTo(
        to_: string,
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    circuitBreakerState(overrides?: CallOverrides): Promise<boolean>;

    collectEth(
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectEthTo(
        to_: string,
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectToken(
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectTokenTo(
        to_: string,
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositEth(
        magic_: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
        magic_: BigNumberish,
        amount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateEthCollection(
        tokenID_: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExcessEth(overrides?: CallOverrides): Promise<BigNumber>;

    estimateExcessToken(overrides?: CallOverrides): Promise<BigNumber>;

    estimateTokenCollection(
        tokenID_: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccumulatorScaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
    ): Promise<string>;

    getEthAccumulator(
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber] & { accumulator: BigNumber; slush: BigNumber }
    >;

    getMaxMintLock(overrides?: CallOverrides): Promise<BigNumber>;

    getMetamorphicContractAddress(
        _salt: BytesLike,
        _factory: string,
        overrides?: CallOverrides
    ): Promise<string>;

    getPosition(
        tokenID_: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            shares: BigNumber;
            freeAfter: BigNumber;
            withdrawFreeAfter: BigNumber;
            accumulatorEth: BigNumber;
            accumulatorToken: BigNumber;
        }
    >;

    getTokenAccumulator(
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber] & { accumulator: BigNumber; slush: BigNumber }
    >;

    getTotalReserveAToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReserveEth(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
    ): Promise<boolean>;

    lockOwnPosition(
        tokenID_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPosition(
        caller_: string,
        tokenID_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockWithdraw(
        tokenID_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
        amount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
        to_: string,
        amount_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skimExcessEth(
        to_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skimExcessToken(
        to_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tripCB(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

        burn(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                payoutEth: BigNumber;
                payoutAToken: BigNumber;
            }
        >;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                payoutEth: BigNumber;
                payoutAToken: BigNumber;
            }
        >;

        circuitBreakerState(overrides?: CallOverrides): Promise<boolean>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        depositEth(
            magic_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        estimateExcessEth(overrides?: CallOverrides): Promise<BigNumber>;

        estimateExcessToken(overrides?: CallOverrides): Promise<BigNumber>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        getEthAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getMaxMintLock(overrides?: CallOverrides): Promise<BigNumber>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<string>;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                shares: BigNumber;
                freeAfter: BigNumber;
                withdrawFreeAfter: BigNumber;
                accumulatorEth: BigNumber;
                accumulatorToken: BigNumber;
            }
        >;

        getTokenAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getTotalReserveAToken(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalReserveEth(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(overrides?: CallOverrides): Promise<void>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        mint(
            amount_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<string>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: CallOverrides
        ): Promise<void>;

        skimExcessEth(
            to_: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        skimExcessToken(
            to_: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>;

        symbol(overrides?: CallOverrides): Promise<string>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        tripCB(overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "Approval(address,address,uint256)"(
            owner?: string | null,
            approved?: string | null,
            tokenId?: BigNumberish | null
        ): ApprovalEventFilter;
        Approval(
            owner?: string | null,
            approved?: string | null,
            tokenId?: BigNumberish | null
        ): ApprovalEventFilter;

        "ApprovalForAll(address,address,bool)"(
            owner?: string | null,
            operator?: string | null,
            approved?: null
        ): ApprovalForAllEventFilter;
        ApprovalForAll(
            owner?: string | null,
            operator?: string | null,
            approved?: null
        ): ApprovalForAllEventFilter;

        "Transfer(address,address,uint256)"(
            from?: string | null,
            to?: string | null,
            tokenId?: BigNumberish | null
        ): TransferEventFilter;
        Transfer(
            from?: string | null,
            to?: string | null,
            tokenId?: BigNumberish | null
        ): TransferEventFilter;
    };

    estimateGas: {
        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

        burn(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        circuitBreakerState(overrides?: CallOverrides): Promise<BigNumber>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        depositEth(
            magic_: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        estimateExcessEth(overrides?: CallOverrides): Promise<BigNumber>;

        estimateExcessToken(overrides?: CallOverrides): Promise<BigNumber>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getEthAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

        getMaxMintLock(overrides?: CallOverrides): Promise<BigNumber>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getTokenAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalReserveAToken(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalReserveEth(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        mint(
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        skimExcessEth(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        skimExcessToken(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        tripCB(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        approve(
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        balanceOf(
            owner: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        burn(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        circuitBreakerState(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        depositEth(
            magic_: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        estimateExcessEth(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        estimateExcessToken(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getApproved(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getEthAccumulator(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMaxMintLock(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMetamorphicContractAddress(
            _salt: BytesLike,
            _factory: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTokenAccumulator(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalReserveAToken(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalReserveEth(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalShares(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initialize(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isApprovedForAll(
            owner: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        mint(
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        ownerOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "safeTransferFrom(address,address,uint256)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: string,
            to: string,
            tokenId: BigNumberish,
            _data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        skimExcessEth(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        skimExcessToken(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenURI(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        transferFrom(
            from: string,
            to: string,
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        tripCB(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
