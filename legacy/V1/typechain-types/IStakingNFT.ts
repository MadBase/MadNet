/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface IStakingNFTInterface extends utils.Interface {
    contractName: "IStakingNFT";
    functions: {
        "burn(uint256)": FunctionFragment;
        "burnTo(address,uint256)": FunctionFragment;
        "collectEth(uint256)": FunctionFragment;
        "collectEthTo(address,uint256)": FunctionFragment;
        "collectToken(uint256)": FunctionFragment;
        "collectTokenTo(address,uint256)": FunctionFragment;
        "depositEth(uint8)": FunctionFragment;
        "depositToken(uint8,uint256)": FunctionFragment;
        "estimateEthCollection(uint256)": FunctionFragment;
        "estimateExcessEth()": FunctionFragment;
        "estimateExcessToken()": FunctionFragment;
        "estimateTokenCollection(uint256)": FunctionFragment;
        "getAccumulatorScaleFactor()": FunctionFragment;
        "getEthAccumulator()": FunctionFragment;
        "getPosition(uint256)": FunctionFragment;
        "getTokenAccumulator()": FunctionFragment;
        "getTotalReserveAToken()": FunctionFragment;
        "getTotalReserveEth()": FunctionFragment;
        "getTotalShares()": FunctionFragment;
        "lockOwnPosition(uint256,uint256)": FunctionFragment;
        "lockPosition(address,uint256,uint256)": FunctionFragment;
        "lockWithdraw(uint256,uint256)": FunctionFragment;
        "mint(uint256)": FunctionFragment;
        "mintTo(address,uint256,uint256)": FunctionFragment;
        "skimExcessEth(address)": FunctionFragment;
        "skimExcessToken(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "burn",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "burnTo",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectEth",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectEthTo",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectToken",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "collectTokenTo",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "depositEth",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "depositToken",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "estimateEthCollection",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "estimateExcessEth",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "estimateExcessToken",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "estimateTokenCollection",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getAccumulatorScaleFactor",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getEthAccumulator",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getPosition",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getTokenAccumulator",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalReserveAToken",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalReserveEth",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalShares",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "lockOwnPosition",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "lockPosition",
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "lockWithdraw",
        values: [BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "mintTo",
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "skimExcessEth",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "skimExcessToken",
        values: [string]
    ): string;

    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnTo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "collectEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectEthTo",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "collectTokenTo",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "depositEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "depositToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateEthCollection",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateExcessEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateExcessToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "estimateTokenCollection",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAccumulatorScaleFactor",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getEthAccumulator",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTokenAccumulator",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalReserveAToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalReserveEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalShares",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "lockOwnPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "lockPosition",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "lockWithdraw",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "skimExcessEth",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "skimExcessToken",
        data: BytesLike
    ): Result;

    events: {};
}

export interface IStakingNFT extends BaseContract {
    contractName: "IStakingNFT";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IStakingNFTInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        burn(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        depositEth(
            magic_: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { payout: BigNumber }>;

        estimateExcessEth(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { excess: BigNumber }>;

        estimateExcessToken(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { excess: BigNumber }>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { payout: BigNumber }>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getEthAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                shares: BigNumber;
                freeAfter: BigNumber;
                withdrawFreeAfter: BigNumber;
                accumulatorEth: BigNumber;
                accumulatorToken: BigNumber;
            }
        >;

        getTokenAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getTotalReserveAToken(overrides?: CallOverrides): Promise<[BigNumber]>;

        getTotalReserveEth(overrides?: CallOverrides): Promise<[BigNumber]>;

        getTotalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        mint(
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        skimExcessEth(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        skimExcessToken(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    burn(
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnTo(
        to_: string,
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectEth(
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectEthTo(
        to_: string,
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectToken(
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectTokenTo(
        to_: string,
        tokenID_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositEth(
        magic_: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
        magic_: BigNumberish,
        amount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateEthCollection(
        tokenID_: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExcessEth(overrides?: CallOverrides): Promise<BigNumber>;

    estimateExcessToken(overrides?: CallOverrides): Promise<BigNumber>;

    estimateTokenCollection(
        tokenID_: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccumulatorScaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getEthAccumulator(
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber] & { accumulator: BigNumber; slush: BigNumber }
    >;

    getPosition(
        tokenID_: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            shares: BigNumber;
            freeAfter: BigNumber;
            withdrawFreeAfter: BigNumber;
            accumulatorEth: BigNumber;
            accumulatorToken: BigNumber;
        }
    >;

    getTokenAccumulator(
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber] & { accumulator: BigNumber; slush: BigNumber }
    >;

    getTotalReserveAToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReserveEth(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    lockOwnPosition(
        tokenID_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPosition(
        caller_: string,
        tokenID_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockWithdraw(
        tokenID_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
        amount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
        to_: string,
        amount_: BigNumberish,
        lockDuration_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skimExcessEth(
        to_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skimExcessToken(
        to_: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        burn(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                payoutEth: BigNumber;
                payoutAToken: BigNumber;
            }
        >;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                payoutEth: BigNumber;
                payoutAToken: BigNumber;
            }
        >;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        depositEth(
            magic_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        estimateExcessEth(overrides?: CallOverrides): Promise<BigNumber>;

        estimateExcessToken(overrides?: CallOverrides): Promise<BigNumber>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getEthAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                shares: BigNumber;
                freeAfter: BigNumber;
                withdrawFreeAfter: BigNumber;
                accumulatorEth: BigNumber;
                accumulatorToken: BigNumber;
            }
        >;

        getTokenAccumulator(
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                accumulator: BigNumber;
                slush: BigNumber;
            }
        >;

        getTotalReserveAToken(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalReserveEth(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        mint(
            amount_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        skimExcessEth(
            to_: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        skimExcessToken(
            to_: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    filters: {};

    estimateGas: {
        burn(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        depositEth(
            magic_: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        estimateExcessEth(overrides?: CallOverrides): Promise<BigNumber>;

        estimateExcessToken(overrides?: CallOverrides): Promise<BigNumber>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getEthAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getTokenAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalReserveAToken(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalReserveEth(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        mint(
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        skimExcessEth(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        skimExcessToken(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        burn(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        burnTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectEth(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectEthTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectToken(
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collectTokenTo(
            to_: string,
            tokenID_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        depositEth(
            magic_: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        depositToken(
            magic_: BigNumberish,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        estimateEthCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        estimateExcessEth(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        estimateExcessToken(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        estimateTokenCollection(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getAccumulatorScaleFactor(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getEthAccumulator(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPosition(
            tokenID_: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTokenAccumulator(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalReserveAToken(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalReserveEth(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalShares(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        lockOwnPosition(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        lockPosition(
            caller_: string,
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        lockWithdraw(
            tokenID_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        mint(
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        mintTo(
            to_: string,
            amount_: BigNumberish,
            lockDuration_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        skimExcessEth(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        skimExcessToken(
            to_: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
