name: Alicenet CI

on:
  push:
    branches: [ main, candidate ]
  pull_request:
    branches: [ main, candidate ]

env:
  NODE_VERSION: 16.x

#concurrency:
#  group: ${{ github.ref }}
#  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:

  solidity-build:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./bridge
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/node-cache

#  solidity-unit-tests:
#    runs-on: ubuntu-20.04
#    timeout-minutes: 15
#    strategy:
#      matrix:
#        # when adding a new test folder to the smart contracts make sure to
#        # name it starting with 0-9 or A-Z
#        include:
#          - test-group: "[0-9a-dA-D]"
#          - test-group: "[eE]"
#            sub-filter-exclude: "ethdkg/phases"
#          - test-group: "ethdkg"
#            sub-filter-include: "phases"
#            sub-filter-exclude: "accusations"
#          - test-group: "ethdkg"
#            sub-filter-include: "phases/accusations"
#          - test-group: "[f-qF-Q]"
#          - test-group: "[r-sR-S]"
#          - test-group: "[t-zT-Z]"
#
#    needs: solidity-build
#    defaults:
#      run:
#        working-directory: ./bridge
#    steps:
#      - uses: actions/checkout@v3
#      - uses: ./.github/actions/node-cache
#      - uses: ./.github/actions/solidity-tests
#        with:
#          test-group: ${{ matrix.test-group }}
#          sub-filter-include: ${{ matrix.sub-filter-include }}
#          sub-filter-exclude: ${{ matrix.sub-filter-exclude }}
#
#  solidity-linter:
#    runs-on: ubuntu-20.04
#    timeout-minutes: 10
#    needs: solidity-build
#    defaults:
#      run:
#        working-directory: ./bridge
#    steps:
#      - uses: actions/checkout@v3
#      - uses: ./.github/actions/node-cache
#      - run: npm run lint-solidity
#
#  typescript-linter:
#    runs-on: ubuntu-20.04
#    timeout-minutes: 10
#    needs: solidity-build
#    defaults:
#      run:
#        working-directory: ./bridge
#        shell: bash
#    steps:
#      - uses: actions/checkout@v3
#      - uses: ./.github/actions/node-cache
#      - run: npm run clean && npm run compile && npm run typechain
#      - run: npm run lint

  golang-build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: solidity-build
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: "Sanitize branch name"
        run: |
            echo "BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | sed -E 's/[^[:alnum:]]+/_/g')" >> $GITHUB_ENV
            echo "OPERATING_SYSTEM=$(echo ${{ matrix.os }} | sed -E 's/[^[:alnum:]]+/_/g')" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: ./.github/actions/alicenet-config
      - run: make build
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: alicenet-${{ env.BRANCH_NAME }}-${{ env.OPERATING_SYSTEM }}
          path: ./madnet

#  golang-vet:
#    runs-on: ubuntu-20.04
#    timeout-minutes: 10
#    needs: golang-build
#    continue-on-error: true
#    steps:
#      - uses: actions/checkout@v3
#      - uses: ./.github/actions/alicenet-config
#      - run: go vet ./...
#
#  golang-linter:
#    runs-on: ubuntu-20.04
#    timeout-minutes: 10
#    needs: golang-build
#    continue-on-error: true
#    steps:
#      - uses: actions/checkout@v3
#      - uses: ./.github/actions/alicenet-config
#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v3

  golang-unit-tests:
    runs-on: ${{ matrix.os }}
    needs: golang-build
#    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/alicenet-config
      # tool to format the test output
      - name: Set up gotestfmt
        run: go install github.com/haveyoudebuggedit/gotestfmt/v2/cmd/gotestfmt@latest

      # install ubuntu eth missing dependencies
      - name: Check out ethereum repo for ethkey
        uses: actions/checkout@master
        with:
            repository: ethereum/go-ethereum
            path: './go-ethereum'
      - name: Install ethkey
        run: |
              REPO_PATH=$(pwd)
              cd go-ethereum
              sudo apt install make gcc
              make all
              cd  /usr/local/bin
              sudo ln -s $REPO_PATH/go-ethereum/build/bin/ethkey /usr/local/bin
              cd $REPO_PATH
      - name: Run tests
        timeout-minutes: 60
        run: |
            set -euo pipefail
            ./scripts/main.sh init 5
            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestGPKjSubmission
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestDisputeMissingShareDistributionTask
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestRegisterTask
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestMPKSubmission
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestKeyShareSubmission
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestDisputeShareDistributionTask
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestDisputeShareDistributionTask
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestShouldRetryTrue
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestShouldNotRetryAfterSuccessfullyAccusingAllMissingParticipants
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestDisputeMissingKey
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestDisputeMissingGPK
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestShouldAccuseOneValidator
#            go test -v github.com/MadBase/MadNet/blockchain/dkg/dkgtasks -run TestGPKjDispute
